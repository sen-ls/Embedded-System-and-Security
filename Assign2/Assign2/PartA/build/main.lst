
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e2c  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020870  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020870  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020870  2**0
                  CONTENTS
  5 .data         00000870  20000000  0c004e2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000738  20000870  0c00569c  00020870  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020870  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000e00  30000000  0c00569c  00030000  2**2
                  ALLOC
 10 .debug_aranges 00000890  00000000  00000000  00020870  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00022d21  00000000  00000000  00021100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000376c  00000000  00000000  00043e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000af7f  00000000  00000000  0004758d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000018dc  00000000  00000000  0005250c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0007ffd6  00000000  00000000  00053de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004f9a  00000000  00000000  000d3dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000948  00000000  00000000  000d8d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 00000688  00000000  00000000  000d96a0  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001c929  00000000  00000000  000d9d28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	a9 03 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c004e2c 	.word	0x0c004e2c
 800024c:	20000000 	.word	0x20000000
 8000250:	00000870 	.word	0x00000870
 8000254:	0c00569c 	.word	0x0c00569c
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c004e2c 	.word	0x0c004e2c
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c004e2c 	.word	0x0c004e2c
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000870 	.word	0x20000870
 800027c:	00000738 	.word	0x00000738
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800
    .thumb
 8000294:	08003e5d 	.word	0x08003e5d
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08003f45 	.word	0x08003f45
    ldr  r0, =main
 80002ac:	080002b5 	.word	0x080002b5

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <main>:

#include "VirtualSerial.h"
#include "packetizer.h"
#include "crypto.h"

int main(void) {
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	b08b      	sub	sp, #44	; 0x2c
  uint8_t key[8] = {0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42};
 80002b8:	4b1f      	ldr	r3, [pc, #124]	; (8000338 <main+0x84>)
 80002ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80002be:	ab0a      	add	r3, sp, #40	; 0x28
 80002c0:	e903 0003 	stmdb	r3, {r0, r1}
  pt_s plaintext = { 0 };
 80002c4:	2300      	movs	r3, #0
 80002c6:	9305      	str	r3, [sp, #20]
 80002c8:	9306      	str	r3, [sp, #24]
 80002ca:	9307      	str	r3, [sp, #28]
  ct_s ciphertext = { 0 };
 80002cc:	9303      	str	r3, [sp, #12]
 80002ce:	9304      	str	r3, [sp, #16]

  USB_Init();
 80002d0:	f000 f872 	bl	80003b8 <USB_Init>
    /* Consumes incoming data and parses it until we received a valid packet.
       If so, it will fill the plaintextJob struct with the appropriate information. */
    if(packetizerReceive(&plaintext) == 0) {
      /* If the sender did not sent a nonce, generate one */
      if(plaintext.nonce == NULL) {
        plaintext.nonce = malloc(CRYPTO_NONCE_BYTES);
 80002d4:	2518      	movs	r5, #24
 80002d6:	e015      	b.n	8000304 <main+0x50>
 80002d8:	4628      	mov	r0, r5
 80002da:	f003 fe57 	bl	8003f8c <malloc>
 80002de:	9007      	str	r0, [sp, #28]
        for(size_t i = 0; i < CRYPTO_NONCE_BYTES; i++) {
 80002e0:	2400      	movs	r4, #0
          plaintext.nonce[i] = rand() & UINT8_MAX;
 80002e2:	f004 f9ff 	bl	80046e4 <rand>
 80002e6:	9b07      	ldr	r3, [sp, #28]
 80002e8:	5518      	strb	r0, [r3, r4]
        for(size_t i = 0; i < CRYPTO_NONCE_BYTES; i++) {
 80002ea:	3401      	adds	r4, #1
 80002ec:	2c18      	cmp	r4, #24
 80002ee:	d1f8      	bne.n	80002e2 <main+0x2e>
 80002f0:	e010      	b.n	8000314 <main+0x60>
        ciphertext.textLen = getCiphertextLength(plaintext.textLen);
        /* Finally, if encryption was successful, send ciphertext back in a packet */
        packetizerSend(&ciphertext);
      }
      /* Free all buffers that were allocated in the meantime */
      free(plaintext.text);
 80002f2:	9805      	ldr	r0, [sp, #20]
 80002f4:	f003 fe52 	bl	8003f9c <free>
      plaintext.text = NULL;
 80002f8:	2400      	movs	r4, #0
 80002fa:	9405      	str	r4, [sp, #20]
      free(ciphertext.text);
 80002fc:	9803      	ldr	r0, [sp, #12]
 80002fe:	f003 fe4d 	bl	8003f9c <free>
      ciphertext.text = NULL;
 8000302:	9403      	str	r4, [sp, #12]
    if(packetizerReceive(&plaintext) == 0) {
 8000304:	a805      	add	r0, sp, #20
 8000306:	f000 f9c9 	bl	800069c <packetizerReceive>
 800030a:	2800      	cmp	r0, #0
 800030c:	d1fa      	bne.n	8000304 <main+0x50>
      if(plaintext.nonce == NULL) {
 800030e:	9b07      	ldr	r3, [sp, #28]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0e1      	beq.n	80002d8 <main+0x24>
      if(encrypt(&ciphertext.text, plaintext.text, plaintext.textLen, plaintext.nonce,
 8000314:	ab08      	add	r3, sp, #32
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	9b07      	ldr	r3, [sp, #28]
 800031a:	9a06      	ldr	r2, [sp, #24]
 800031c:	9905      	ldr	r1, [sp, #20]
 800031e:	a803      	add	r0, sp, #12
 8000320:	f000 f9f8 	bl	8000714 <encrypt>
 8000324:	2800      	cmp	r0, #0
 8000326:	d1e4      	bne.n	80002f2 <main+0x3e>
        ciphertext.textLen = getCiphertextLength(plaintext.textLen);
 8000328:	9806      	ldr	r0, [sp, #24]
 800032a:	f000 fa15 	bl	8000758 <getCiphertextLength>
 800032e:	9004      	str	r0, [sp, #16]
        packetizerSend(&ciphertext);
 8000330:	a803      	add	r0, sp, #12
 8000332:	f000 f9c5 	bl	80006c0 <packetizerSend>
 8000336:	e7dc      	b.n	80002f2 <main+0x3e>
 8000338:	08004bbc 	.word	0x08004bbc

0800033c <SystemCoreClockSetup>:

#include "VirtualSerial.h"

/* This function is only weakly declared in system_XMC4500.c so one can simply reimplement it if
   necessary. The values to use are copied from Infineon's VirtualSerial example. */
void SystemCoreClockSetup(void) {
 800033c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800033e:	b087      	sub	sp, #28
  XMC_SCU_CLOCK_CONFIG_t clock_config = {
 8000340:	2500      	movs	r5, #0
 8000342:	9502      	str	r5, [sp, #8]
 8000344:	9503      	str	r5, [sp, #12]
 8000346:	2350      	movs	r3, #80	; 0x50
 8000348:	f88d 3004 	strb.w	r3, [sp, #4]
 800034c:	2702      	movs	r7, #2
 800034e:	f88d 7005 	strb.w	r7, [sp, #5]
 8000352:	2604      	movs	r6, #4
 8000354:	f88d 6006 	strb.w	r6, [sp, #6]
 8000358:	2401      	movs	r4, #1
 800035a:	f88d 4007 	strb.w	r4, [sp, #7]
 800035e:	f88d 400a 	strb.w	r4, [sp, #10]
 8000362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000366:	9304      	str	r3, [sp, #16]
 8000368:	f88d 4014 	strb.w	r4, [sp, #20]
 800036c:	f88d 4015 	strb.w	r4, [sp, #21]
 8000370:	f88d 4016 	strb.w	r4, [sp, #22]
 8000374:	f88d 4017 	strb.w	r4, [sp, #23]
    .fccu_clkdiv = 1,
    .fperipheral_clkdiv = 1
    };

  /* General setup of clock tree with recommended default values, see above */
  XMC_SCU_CLOCK_Init(&clock_config);
 8000378:	eb0d 0006 	add.w	r0, sp, r6
 800037c:	f003 f97c 	bl	8003678 <XMC_SCU_CLOCK_Init>

  /* Enable clock to USB peripheral */
  XMC_SCU_CLOCK_EnableUsbPll();
 8000380:	f002 fe74 	bl	800306c <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(2, 64);
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	4638      	mov	r0, r7
 8000388:	f002 fe84 	bl	8003094 <XMC_SCU_CLOCK_StartUsbPll>
  XMC_SCU_CLOCK_SetUsbClockDivider(4);
 800038c:	4630      	mov	r0, r6
 800038e:	f002 fe05 	bl	8002f9c <XMC_SCU_CLOCK_SetUsbClockDivider>
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8000392:	4628      	mov	r0, r5
 8000394:	f002 fd84 	bl	8002ea0 <XMC_SCU_CLOCK_SetUsbClockSource>
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8000398:	4620      	mov	r0, r4
 800039a:	f002 fe2b 	bl	8002ff4 <XMC_SCU_CLOCK_EnableClock>

  /* Update clock status information */
  SystemCoreClockUpdate();
 800039e:	f003 fc47 	bl	8003c30 <SystemCoreClockUpdate>
}
 80003a2:	b007      	add	sp, #28
 80003a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003a8 <USB0_0_IRQHandler>:
/*******************************************************************************
**                     Public Function Definitions                            **
*******************************************************************************/

void USB0_0_IRQHandler(void)
{
 80003a8:	b508      	push	{r3, lr}
  XMC_USBD_IRQHandler(&USB_runtime);
 80003aa:	4802      	ldr	r0, [pc, #8]	; (80003b4 <USB0_0_IRQHandler+0xc>)
 80003ac:	f001 fc64 	bl	8001c78 <XMC_USBD_IRQHandler>
}
 80003b0:	bd08      	pop	{r3, pc}
 80003b2:	bf00      	nop
 80003b4:	20000000 	.word	0x20000000

080003b8 <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void)
{
 80003b8:	b508      	push	{r3, lr}
  USBD_Initialize(&USB_runtime);
 80003ba:	4817      	ldr	r0, [pc, #92]	; (8000418 <USB_Init+0x60>)
 80003bc:	f000 fe4a 	bl	8001054 <USBD_Initialize>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <USB_Init+0x64>)
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003c8:	f1c2 0107 	rsb	r1, r2, #7
 80003cc:	2906      	cmp	r1, #6
 80003ce:	bf28      	it	cs
 80003d0:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003d2:	1d93      	adds	r3, r2, #6
 80003d4:	2b06      	cmp	r3, #6
 80003d6:	bf8c      	ite	hi
 80003d8:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80003dc:	2200      	movls	r2, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003e2:	408b      	lsls	r3, r1
 80003e4:	43db      	mvns	r3, r3
 80003e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003ea:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <USB_Init+0x68>)
 80003f2:	f882 336b 	strb.w	r3, [r2, #875]	; 0x36b
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003fa:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003fe:	60d3      	str	r3, [r2, #12]
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
  NVIC_EnableIRQ(USB0_0_IRQn);

  /* LUFA Class Line Encoding*/
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <USB_Init+0x60>)
 8000402:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
  VirtualSerial_CDC_Interface.State.LineEncoding.DataBits = 8;
 8000408:	2208      	movs	r2, #8
 800040a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <USB_Init+0x6c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4798      	blx	r3

  /* USB Connection*/
  USB_Attach();
	
}
 8000416:	bd08      	pop	{r3, pc}
 8000418:	20000000 	.word	0x20000000
 800041c:	e000ed00 	.word	0xe000ed00
 8000420:	e000e100 	.word	0xe000e100
 8000424:	20000ba8 	.word	0x20000ba8

08000428 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
}
 8000428:	4770      	bx	lr

0800042a <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
}
 800042a:	4770      	bx	lr

0800042c <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void)
{
 800042c:	b508      	push	{r3, lr}
  if(device.IsConfigured)
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <EVENT_USB_Device_Reset+0x24>)
 8000430:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000434:	f013 0f01 	tst.w	r3, #1
 8000438:	d100      	bne.n	800043c <EVENT_USB_Device_Reset+0x10>
  {
    USB_Init();
    device.IsConfigured=0;
  }
}
 800043a:	bd08      	pop	{r3, pc}
    USB_Init();
 800043c:	f7ff ffbc 	bl	80003b8 <USB_Init>
    device.IsConfigured=0;
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <EVENT_USB_Device_Reset+0x24>)
 8000442:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8000446:	f36f 0200 	bfc	r2, #0, #1
 800044a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 800044e:	e7f4      	b.n	800043a <EVENT_USB_Device_Reset+0xe>
 8000450:	20000ba8 	.word	0x20000ba8

08000454 <EVENT_USB_Device_ConfigurationChanged>:

/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 8000454:	b508      	push	{r3, lr}
  USBD_SetEndpointBuffer(CDC_NOTIFICATION_EPADDR, ep2_buf, 64);
 8000456:	2240      	movs	r2, #64	; 0x40
 8000458:	490c      	ldr	r1, [pc, #48]	; (800048c <EVENT_USB_Device_ConfigurationChanged+0x38>)
 800045a:	2081      	movs	r0, #129	; 0x81
 800045c:	f000 fe40 	bl	80010e0 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_TX_EPADDR, ep3_buf, 64);
 8000460:	2240      	movs	r2, #64	; 0x40
 8000462:	490b      	ldr	r1, [pc, #44]	; (8000490 <EVENT_USB_Device_ConfigurationChanged+0x3c>)
 8000464:	2082      	movs	r0, #130	; 0x82
 8000466:	f000 fe3b 	bl	80010e0 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_RX_EPADDR, ep4_buf, 64);
 800046a:	2240      	movs	r2, #64	; 0x40
 800046c:	4909      	ldr	r1, [pc, #36]	; (8000494 <EVENT_USB_Device_ConfigurationChanged+0x40>)
 800046e:	2003      	movs	r0, #3
 8000470:	f000 fe36 	bl	80010e0 <USBD_SetEndpointBuffer>
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 8000474:	4808      	ldr	r0, [pc, #32]	; (8000498 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 8000476:	f001 fe8f 	bl	8002198 <CDC_Device_ConfigureEndpoints>

  device.IsConfigured = 1;
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <EVENT_USB_Device_ConfigurationChanged+0x48>)
 800047c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000488:	bd08      	pop	{r3, pc}
 800048a:	bf00      	nop
 800048c:	20000928 	.word	0x20000928
 8000490:	20000968 	.word	0x20000968
 8000494:	200008e8 	.word	0x200008e8
 8000498:	20000010 	.word	0x20000010
 800049c:	20000ba8 	.word	0x20000ba8

080004a0 <EVENT_USB_Device_ControlRequest>:

/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
 80004a0:	b508      	push	{r3, lr}
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <EVENT_USB_Device_ControlRequest+0xc>)
 80004a4:	f002 f842 	bl	800252c <CDC_Device_ProcessControlRequest>
}
 80004a8:	bd08      	pop	{r3, pc}
 80004aa:	bf00      	nop
 80004ac:	20000010 	.word	0x20000010

080004b0 <EVENT_USB_Device_StartOfFrame>:

void EVENT_USB_Device_StartOfFrame(void)
{
}
 80004b0:	4770      	bx	lr

080004b2 <EVENT_USB_Device_WakeUp>:

void EVENT_USB_Device_WakeUp(void)
{
}
 80004b2:	4770      	bx	lr

080004b4 <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend(void)
{
}
 80004b4:	4770      	bx	lr
	...

080004b8 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 80004b8:	0a03      	lsrs	r3, r0, #8
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d00a      	beq.n	80004d4 <CALLBACK_USB_GetDescriptor+0x1c>
 80004be:	2b03      	cmp	r3, #3
 80004c0:	d00b      	beq.n	80004da <CALLBACK_USB_GetDescriptor+0x22>
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d002      	beq.n	80004cc <CALLBACK_USB_GetDescriptor+0x14>
	uint16_t    Size    = NO_DESCRIPTOR;
 80004c6:	2000      	movs	r0, #0
	const void* Address = NULL;
 80004c8:	4603      	mov	r3, r0
 80004ca:	e001      	b.n	80004d0 <CALLBACK_USB_GetDescriptor+0x18>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 80004cc:	2012      	movs	r0, #18
			Address = &DeviceDescriptor;
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <CALLBACK_USB_GetDescriptor+0x48>)
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
 80004d0:	6013      	str	r3, [r2, #0]
	return Size;
}
 80004d2:	4770      	bx	lr
			Size    = sizeof(USB_Descriptor_Configuration_t);
 80004d4:	203e      	movs	r0, #62	; 0x3e
			Address = &ConfigurationDescriptor;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <CALLBACK_USB_GetDescriptor+0x4c>)
			break;
 80004d8:	e7fa      	b.n	80004d0 <CALLBACK_USB_GetDescriptor+0x18>
			switch (DescriptorNumber)
 80004da:	b2c0      	uxtb	r0, r0
 80004dc:	2801      	cmp	r0, #1
 80004de:	d008      	beq.n	80004f2 <CALLBACK_USB_GetDescriptor+0x3a>
 80004e0:	b120      	cbz	r0, 80004ec <CALLBACK_USB_GetDescriptor+0x34>
 80004e2:	2802      	cmp	r0, #2
 80004e4:	d008      	beq.n	80004f8 <CALLBACK_USB_GetDescriptor+0x40>
	uint16_t    Size    = NO_DESCRIPTOR;
 80004e6:	2000      	movs	r0, #0
	const void* Address = NULL;
 80004e8:	4603      	mov	r3, r0
 80004ea:	e7f1      	b.n	80004d0 <CALLBACK_USB_GetDescriptor+0x18>
					Size    = LanguageString.Header.Size;
 80004ec:	2004      	movs	r0, #4
					Address = &LanguageString;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <CALLBACK_USB_GetDescriptor+0x50>)
 80004f0:	e7ee      	b.n	80004d0 <CALLBACK_USB_GetDescriptor+0x18>
					Size    = ManufacturerString.Header.Size;
 80004f2:	2058      	movs	r0, #88	; 0x58
					Address = &ManufacturerString;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <CALLBACK_USB_GetDescriptor+0x54>)
					break;
 80004f6:	e7eb      	b.n	80004d0 <CALLBACK_USB_GetDescriptor+0x18>
					Size    = ProductString.Header.Size;
 80004f8:	2020      	movs	r0, #32
					Address = &ProductString;
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <CALLBACK_USB_GetDescriptor+0x58>)
					break;
 80004fc:	e7e8      	b.n	80004d0 <CALLBACK_USB_GetDescriptor+0x18>
 80004fe:	bf00      	nop
 8000500:	08004bc4 	.word	0x08004bc4
 8000504:	08004bd8 	.word	0x08004bd8
 8000508:	08004c18 	.word	0x08004c18
 800050c:	08004c44 	.word	0x08004c44
 8000510:	08004c20 	.word	0x08004c20

08000514 <packetizerReceiveByteBlocking>:

#include "VirtualSerial.h"
#include "base64url.h"
#include "packetizer.h"

int16_t packetizerReceiveByteBlocking(void) {
 8000514:	b510      	push	{r4, lr}
  /* Wait until at least one byte is received and if so return it */
  while(CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface) <= 0) {
 8000516:	4c07      	ldr	r4, [pc, #28]	; (8000534 <packetizerReceiveByteBlocking+0x20>)
 8000518:	e002      	b.n	8000520 <packetizerReceiveByteBlocking+0xc>
    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 800051a:	4620      	mov	r0, r4
 800051c:	f001 ff10 	bl	8002340 <CDC_Device_USBTask>
  while(CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface) <= 0) {
 8000520:	4620      	mov	r0, r4
 8000522:	f001 ff37 	bl	8002394 <CDC_Device_BytesReceived>
 8000526:	2800      	cmp	r0, #0
 8000528:	d0f7      	beq.n	800051a <packetizerReceiveByteBlocking+0x6>
  }
  return CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <packetizerReceiveByteBlocking+0x20>)
 800052c:	f001 ff6c 	bl	8002408 <CDC_Device_ReceiveByte>
}
 8000530:	bd10      	pop	{r4, pc}
 8000532:	bf00      	nop
 8000534:	20000010 	.word	0x20000010

08000538 <packetizerReadHeader>:

enum packetizerErrors packetizerReadHeader(pt_s *job) {
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	b093      	sub	sp, #76	; 0x4c
 800053c:	4607      	mov	r7, r0
  /* We received a start of header (SoH, 0x01) and now gather all the bytes that belong to the
     header up to and including the start of text (SoT, 0x02) to see if the header is too long */
  char headerB64[PACKETIZER_HEADER_B64_LEN] = { 0 };
 800053e:	2224      	movs	r2, #36	; 0x24
 8000540:	2100      	movs	r1, #0
 8000542:	eb0d 0002 	add.w	r0, sp, r2
 8000546:	f004 f86f 	bl	8004628 <memset>
  char header[PACKETIZER_HEADER_LEN] = { 0 };
 800054a:	2500      	movs	r5, #0
 800054c:	9502      	str	r5, [sp, #8]
 800054e:	9503      	str	r5, [sp, #12]
 8000550:	9504      	str	r5, [sp, #16]
 8000552:	9505      	str	r5, [sp, #20]
 8000554:	9506      	str	r5, [sp, #24]
 8000556:	9507      	str	r5, [sp, #28]
 8000558:	f8cd 501f 	str.w	r5, [sp, #31]
  size_t header_len = sizeof(header);
 800055c:	231b      	movs	r3, #27
 800055e:	9301      	str	r3, [sp, #4]
  int16_t rbuf = 0;
 
  for(size_t headerB64idx = 0; headerB64idx < PACKETIZER_HEADER_B64_LEN; ) {
    rbuf = packetizerReceiveByteBlocking();
 8000560:	f7ff ffd8 	bl	8000514 <packetizerReceiveByteBlocking>
 8000564:	4604      	mov	r4, r0

    if(rbuf > 0xFF) {
 8000566:	28ff      	cmp	r0, #255	; 0xff
 8000568:	dd08      	ble.n	800057c <packetizerReadHeader+0x44>
  for(size_t headerB64idx = 0; headerB64idx < PACKETIZER_HEADER_B64_LEN; ) {
 800056a:	2d23      	cmp	r5, #35	; 0x23
 800056c:	d9f8      	bls.n	8000560 <packetizerReadHeader+0x28>
         Because isbase64() considers padding to be not part of the alphabet, allow it also. */
      return packetizer_IllegalCharacter;
    }
  }
  /* Here we wait for the SoT to check that the header is not too long */
  if(packetizerReceiveByteBlocking() != 0x02) {
 800056e:	f7ff ffd1 	bl	8000514 <packetizerReceiveByteBlocking>
 8000572:	2802      	cmp	r0, #2
 8000574:	d014      	beq.n	80005a0 <packetizerReadHeader+0x68>
    return packetizer_HeaderIncorrectSize;
 8000576:	2002      	movs	r0, #2
  } else {
    /* Decoding failed, e.g. because padding was incorrect */
    return packetizer_HeaderDecodingFailed;
  }
  return packetizer_Successful;
}
 8000578:	b013      	add	sp, #76	; 0x4c
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(rbuf == 0x02) {
 800057c:	2802      	cmp	r0, #2
 800057e:	d039      	beq.n	80005f4 <packetizerReadHeader+0xbc>
    } else if(isbase64(rbuf) || rbuf == '=') {
 8000580:	b2c6      	uxtb	r6, r0
 8000582:	4630      	mov	r0, r6
 8000584:	f000 f96c 	bl	8000860 <isbase64>
 8000588:	b908      	cbnz	r0, 800058e <packetizerReadHeader+0x56>
 800058a:	2c3d      	cmp	r4, #61	; 0x3d
 800058c:	d134      	bne.n	80005f8 <packetizerReadHeader+0xc0>
      headerB64[headerB64idx++] = rbuf;
 800058e:	1c6b      	adds	r3, r5, #1
 8000590:	aa12      	add	r2, sp, #72	; 0x48
 8000592:	4415      	add	r5, r2
 8000594:	f805 6c24 	strb.w	r6, [r5, #-36]
  for(size_t headerB64idx = 0; headerB64idx < PACKETIZER_HEADER_B64_LEN; ) {
 8000598:	2b23      	cmp	r3, #35	; 0x23
 800059a:	d8e8      	bhi.n	800056e <packetizerReadHeader+0x36>
      headerB64[headerB64idx++] = rbuf;
 800059c:	461d      	mov	r5, r3
 800059e:	e7df      	b.n	8000560 <packetizerReadHeader+0x28>
  if(base64_decode(headerB64, PACKETIZER_HEADER_B64_LEN, header, &header_len)) {
 80005a0:	ab01      	add	r3, sp, #4
 80005a2:	aa02      	add	r2, sp, #8
 80005a4:	2124      	movs	r1, #36	; 0x24
 80005a6:	eb0d 0001 	add.w	r0, sp, r1
 80005aa:	f000 f963 	bl	8000874 <base64_decode>
 80005ae:	b328      	cbz	r0, 80005fc <packetizerReadHeader+0xc4>
    if(header_len == sizeof(header)) {
 80005b0:	9b01      	ldr	r3, [sp, #4]
 80005b2:	2b1b      	cmp	r3, #27
 80005b4:	d001      	beq.n	80005ba <packetizerReadHeader+0x82>
      return packetizer_HeaderIncorrectSize;
 80005b6:	2002      	movs	r0, #2
 80005b8:	e7de      	b.n	8000578 <packetizerReadHeader+0x40>
      job->textLen = header[2] << 16 | header[1] << 8 | header[0];
 80005ba:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80005be:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80005c2:	021b      	lsls	r3, r3, #8
 80005c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80005c8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	607b      	str	r3, [r7, #4]
      job->nonce = malloc(CRYPTO_NONCE_BYTES);
 80005d0:	2018      	movs	r0, #24
 80005d2:	f003 fcdb 	bl	8003f8c <malloc>
 80005d6:	60b8      	str	r0, [r7, #8]
      if(job->nonce != NULL) {
 80005d8:	b190      	cbz	r0, 8000600 <packetizerReadHeader+0xc8>
        memcpy(job->nonce, header + 3, CRYPTO_NONCE_BYTES);
 80005da:	ad12      	add	r5, sp, #72	; 0x48
 80005dc:	4604      	mov	r4, r0
 80005de:	f855 0d3d 	ldr.w	r0, [r5, #-61]!
 80005e2:	6869      	ldr	r1, [r5, #4]
 80005e4:	68aa      	ldr	r2, [r5, #8]
 80005e6:	68eb      	ldr	r3, [r5, #12]
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	6928      	ldr	r0, [r5, #16]
 80005ec:	6969      	ldr	r1, [r5, #20]
 80005ee:	c403      	stmia	r4!, {r0, r1}
  return packetizer_Successful;
 80005f0:	2000      	movs	r0, #0
 80005f2:	e7c1      	b.n	8000578 <packetizerReadHeader+0x40>
      return packetizer_HeaderIncorrectSize;
 80005f4:	2002      	movs	r0, #2
 80005f6:	e7bf      	b.n	8000578 <packetizerReadHeader+0x40>
      return packetizer_IllegalCharacter;
 80005f8:	2001      	movs	r0, #1
 80005fa:	e7bd      	b.n	8000578 <packetizerReadHeader+0x40>
    return packetizer_HeaderDecodingFailed;
 80005fc:	2003      	movs	r0, #3
 80005fe:	e7bb      	b.n	8000578 <packetizerReadHeader+0x40>
        return packetizer_NonceAllocationFailed;
 8000600:	2004      	movs	r0, #4
 8000602:	e7b9      	b.n	8000578 <packetizerReadHeader+0x40>

08000604 <packetizerReadText>:

enum packetizerErrors packetizerReadText(pt_s *job) {
 8000604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	4606      	mov	r6, r0
  /* We received a correct header, now allocate space for the text and receive it up to and
     including the end of text (EoT, 0x03) to see if the text is too long. Then remove base64url
     encoding */
  enum packetizerErrors ret = packetizer_Successful;
  int16_t rbuf = 0;
  size_t textB64_len = job->textLen * sizeof(char), text_len = 0;
 800060c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8000610:	2400      	movs	r4, #0
 8000612:	9401      	str	r4, [sp, #4]
  char *textB64 = calloc(job->textLen, sizeof(char)), *text = NULL;
 8000614:	2101      	movs	r1, #1
 8000616:	4640      	mov	r0, r8
 8000618:	f003 fc52 	bl	8003ec0 <calloc>
 800061c:	9400      	str	r4, [sp, #0]
  if(textB64 == NULL) {
 800061e:	b358      	cbz	r0, 8000678 <packetizerReadText+0x74>
 8000620:	4607      	mov	r7, r0
 8000622:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
    return packetizer_TextAllocationFailed;
  }
 
  /* Allocate memory for text (in base64 yet) and receive it */
  for(size_t textB64idx = 0; textB64idx < job->textLen; ) {
 8000626:	4625      	mov	r5, r4
 8000628:	6873      	ldr	r3, [r6, #4]
 800062a:	42ab      	cmp	r3, r5
 800062c:	d926      	bls.n	800067c <packetizerReadText+0x78>
    rbuf = packetizerReceiveByteBlocking();
 800062e:	f7ff ff71 	bl	8000514 <packetizerReceiveByteBlocking>
 8000632:	4604      	mov	r4, r0

    if(rbuf > 0xFF) {
 8000634:	28ff      	cmp	r0, #255	; 0xff
 8000636:	dcf7      	bgt.n	8000628 <packetizerReadText+0x24>
      /* Error in CDC_Device_ReceiveByte(), ignore it */
    } else if(rbuf == 0x03) {
 8000638:	2803      	cmp	r0, #3
 800063a:	d02b      	beq.n	8000694 <packetizerReadText+0x90>
      /* A premature EoT means the text is too short */
      ret = packetizer_TextIncorrectSize;
      break;
    } else if(isbase64(rbuf) || rbuf == '=') {
 800063c:	fa5f fa80 	uxtb.w	sl, r0
 8000640:	4650      	mov	r0, sl
 8000642:	f000 f90d 	bl	8000860 <isbase64>
 8000646:	b908      	cbnz	r0, 800064c <packetizerReadText+0x48>
 8000648:	2c3d      	cmp	r4, #61	; 0x3d
 800064a:	d125      	bne.n	8000698 <packetizerReadText+0x94>
      textB64[textB64idx++] = rbuf;
 800064c:	3501      	adds	r5, #1
 800064e:	f809 af01 	strb.w	sl, [r9, #1]!
 8000652:	e7e9      	b.n	8000628 <packetizerReadText+0x24>
      ret = packetizer_TextIncorrectSize;
    }
  }
  if(ret == packetizer_Successful) {
    /* We received a text of correct size, so remove base64url encoding and put link into job */
    if(base64_decode_alloc(textB64, textB64_len, &text, &text_len)) {
 8000654:	ab01      	add	r3, sp, #4
 8000656:	466a      	mov	r2, sp
 8000658:	4641      	mov	r1, r8
 800065a:	4638      	mov	r0, r7
 800065c:	f000 f97c 	bl	8000958 <base64_decode_alloc>
 8000660:	b130      	cbz	r0, 8000670 <packetizerReadText+0x6c>
      job->textLen = text_len;
 8000662:	9b01      	ldr	r3, [sp, #4]
 8000664:	6073      	str	r3, [r6, #4]
      if(text != NULL) {
 8000666:	9b00      	ldr	r3, [sp, #0]
 8000668:	b123      	cbz	r3, 8000674 <packetizerReadText+0x70>
        job->text = (uint8_t *) text;
 800066a:	6033      	str	r3, [r6, #0]
 800066c:	2400      	movs	r4, #0
 800066e:	e00a      	b.n	8000686 <packetizerReadText+0x82>
        /* If text pointer is NULL, malloc failed */
        ret = packetizer_TextAllocationFailed;
      }
    } else {
      /* Decoding failed, e.g. because padding was incorrect */
      ret = packetizer_TextDecodingFailed;
 8000670:	2407      	movs	r4, #7
 8000672:	e008      	b.n	8000686 <packetizerReadText+0x82>
        ret = packetizer_TextAllocationFailed;
 8000674:	2405      	movs	r4, #5
 8000676:	e006      	b.n	8000686 <packetizerReadText+0x82>
    return packetizer_TextAllocationFailed;
 8000678:	2405      	movs	r4, #5
 800067a:	e007      	b.n	800068c <packetizerReadText+0x88>
    if(packetizerReceiveByteBlocking() != 0x03) {
 800067c:	f7ff ff4a 	bl	8000514 <packetizerReceiveByteBlocking>
 8000680:	2803      	cmp	r0, #3
 8000682:	d0e7      	beq.n	8000654 <packetizerReadText+0x50>
      ret = packetizer_TextIncorrectSize;
 8000684:	2406      	movs	r4, #6
    }
  }

  /* Regardless of our outcome, we have to free the textB64, because we loose the pointer to it on
     return */
  free(textB64);
 8000686:	4638      	mov	r0, r7
 8000688:	f003 fc88 	bl	8003f9c <free>
  return ret;
}
 800068c:	4620      	mov	r0, r4
 800068e:	b002      	add	sp, #8
 8000690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = packetizer_TextIncorrectSize;
 8000694:	2406      	movs	r4, #6
 8000696:	e7f6      	b.n	8000686 <packetizerReadText+0x82>
      ret = packetizer_IllegalCharacter;
 8000698:	2401      	movs	r4, #1
 800069a:	e7f4      	b.n	8000686 <packetizerReadText+0x82>

0800069c <packetizerReceive>:
  
enum packetizerErrors packetizerReceive(pt_s *job) {
 800069c:	b510      	push	{r4, lr}
 800069e:	4604      	mov	r4, r0
  enum packetizerErrors ret;

  /* Discard bytes until we find a start of header (SoH, 0x01) */
  while(packetizerReceiveByteBlocking() != 0x01);
 80006a0:	f7ff ff38 	bl	8000514 <packetizerReceiveByteBlocking>
 80006a4:	2801      	cmp	r0, #1
 80006a6:	d1fb      	bne.n	80006a0 <packetizerReceive+0x4>
  /* Read header and fill in job or forward error */
  ret = packetizerReadHeader(job);
 80006a8:	4620      	mov	r0, r4
 80006aa:	f7ff ff45 	bl	8000538 <packetizerReadHeader>
  if(ret != packetizer_Successful) {
 80006ae:	4603      	mov	r3, r0
 80006b0:	b108      	cbz	r0, 80006b6 <packetizerReceive+0x1a>
  ret = packetizerReadText(job);
  if(ret != packetizer_Successful) {
    return ret;
  }
  return packetizer_Successful;
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd10      	pop	{r4, pc}
  ret = packetizerReadText(job);
 80006b6:	4620      	mov	r0, r4
 80006b8:	f7ff ffa4 	bl	8000604 <packetizerReadText>
 80006bc:	4603      	mov	r3, r0
 80006be:	e7f8      	b.n	80006b2 <packetizerReceive+0x16>

080006c0 <packetizerSend>:

enum packetizerErrors packetizerSend(ct_s *output) {
 80006c0:	b530      	push	{r4, r5, lr}
 80006c2:	b083      	sub	sp, #12
 80006c4:	4604      	mov	r4, r0
  enum packetizerErrors ret = packetizer_Successful;
  char *textB64 = NULL;
 80006c6:	aa02      	add	r2, sp, #8
 80006c8:	2300      	movs	r3, #0
 80006ca:	f842 3d04 	str.w	r3, [r2, #-4]!
  size_t textB64_len = 0;

  /* Encode ciphertext into base64url, return fail if not successful */
  textB64_len = base64_encode_alloc((char *) output->text, output->textLen, &textB64);
 80006ce:	6841      	ldr	r1, [r0, #4]
 80006d0:	6800      	ldr	r0, [r0, #0]
 80006d2:	f000 f8a1 	bl	8000818 <base64_encode_alloc>
 80006d6:	4605      	mov	r5, r0
  if(textB64 == NULL) {
 80006d8:	9b01      	ldr	r3, [sp, #4]
 80006da:	b183      	cbz	r3, 80006fe <packetizerSend+0x3e>
      ret = packetizer_CiphertextTooLarge;
    } else {
      ret = packetizer_CiphertextAllocationFailed;
    }
  } else {
    CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 0x02);
 80006dc:	4c0c      	ldr	r4, [pc, #48]	; (8000710 <packetizerSend+0x50>)
 80006de:	2102      	movs	r1, #2
 80006e0:	4620      	mov	r0, r4
 80006e2:	f001 fdc1 	bl	8002268 <CDC_Device_SendByte>
    CDC_Device_SendData(&VirtualSerial_CDC_Interface, textB64, textB64_len);
 80006e6:	b2aa      	uxth	r2, r5
 80006e8:	9901      	ldr	r1, [sp, #4]
 80006ea:	4620      	mov	r0, r4
 80006ec:	f001 fd9a 	bl	8002224 <CDC_Device_SendData>
    CDC_Device_SendByte(&VirtualSerial_CDC_Interface, 0x03);
 80006f0:	2103      	movs	r1, #3
 80006f2:	4620      	mov	r0, r4
 80006f4:	f001 fdb8 	bl	8002268 <CDC_Device_SendByte>
  enum packetizerErrors ret = packetizer_Successful;
 80006f8:	2000      	movs	r0, #0
  }

  return ret;
}
 80006fa:	b003      	add	sp, #12
 80006fc:	bd30      	pop	{r4, r5, pc}
    if(output->textLen > 0 && textB64_len <= 0) {
 80006fe:	6863      	ldr	r3, [r4, #4]
 8000700:	b123      	cbz	r3, 800070c <packetizerSend+0x4c>
      ret = packetizer_CiphertextTooLarge;
 8000702:	2800      	cmp	r0, #0
 8000704:	bf14      	ite	ne
 8000706:	2008      	movne	r0, #8
 8000708:	2009      	moveq	r0, #9
 800070a:	e7f6      	b.n	80006fa <packetizerSend+0x3a>
      ret = packetizer_CiphertextAllocationFailed;
 800070c:	2008      	movs	r0, #8
 800070e:	e7f4      	b.n	80006fa <packetizerSend+0x3a>
 8000710:	20000010 	.word	0x20000010

08000714 <encrypt>:
#include <malloc.h>
#include "crypto.h"

uint8_t encrypt(uint8_t *ciphertext[],
                const uint8_t *plaintext, const size_t plaintext_len,
                const uint8_t *nonce, const uint8_t *key ) {
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	b0a0      	sub	sp, #128	; 0x80
 8000718:	4605      	mov	r5, r0
 800071a:	4614      	mov	r4, r2
 800071c:	461e      	mov	r6, r3
  /* Encrypt like the most popular app with over 30 million users worldwide did
     cf. https://www.ssl.com/article/nq-vault-app-not-as-secure-as-advertised/  */
  uint8_t buf[128];
  memcpy(buf, plaintext, plaintext_len);
 800071e:	4668      	mov	r0, sp
 8000720:	f003 fee8 	bl	80044f4 <memcpy>
  for(uint8_t i=0; i<128; i++) buf[i] ^= key[nonce[0] % 8];
 8000724:	7833      	ldrb	r3, [r6, #0]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800072c:	5cd0      	ldrb	r0, [r2, r3]
 800072e:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
 8000732:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8000736:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800073a:	4042      	eors	r2, r0
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	428b      	cmp	r3, r1
 8000740:	d1f9      	bne.n	8000736 <encrypt+0x22>
  *ciphertext = malloc(plaintext_len);
 8000742:	4620      	mov	r0, r4
 8000744:	f003 fc22 	bl	8003f8c <malloc>
 8000748:	6028      	str	r0, [r5, #0]
  memcpy(*ciphertext, buf, plaintext_len);
 800074a:	4622      	mov	r2, r4
 800074c:	4669      	mov	r1, sp
 800074e:	f003 fed1 	bl	80044f4 <memcpy>
  return 0;
}
 8000752:	2000      	movs	r0, #0
 8000754:	b020      	add	sp, #128	; 0x80
 8000756:	bd70      	pop	{r4, r5, r6, pc}

08000758 <getCiphertextLength>:

size_t getCiphertextLength(const size_t plaintext_len) {
  return plaintext_len;
}
 8000758:	4770      	bx	lr
	...

0800075c <base64_encode>:
	       char *restrict out, size_t outlen)
{
  static const char b64str[64] =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

  while (inlen && outlen)
 800075c:	2900      	cmp	r1, #0
 800075e:	d054      	beq.n	800080a <base64_encode+0xae>
{
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	460f      	mov	r7, r1
  while (inlen && outlen)
 8000764:	b1eb      	cbz	r3, 80007a2 <base64_encode+0x46>
    {
      *out++ = b64str[(to_uchar (in[0]) >> 2) & 0x3f];
 8000766:	7801      	ldrb	r1, [r0, #0]
 8000768:	088c      	lsrs	r4, r1, #2
 800076a:	4d2a      	ldr	r5, [pc, #168]	; (8000814 <base64_encode+0xb8>)
 800076c:	5d2c      	ldrb	r4, [r5, r4]
 800076e:	7014      	strb	r4, [r2, #0]
      if (!--outlen)
 8000770:	2b01      	cmp	r3, #1
 8000772:	d016      	beq.n	80007a2 <base64_encode+0x46>
		   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
		  & 0x3f]
	 : '=');
      if (!--outlen)
	break;
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
 8000774:	253d      	movs	r5, #61	; 0x3d
      *out++ =
 8000776:	4c27      	ldr	r4, [pc, #156]	; (8000814 <base64_encode+0xb8>)
		   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
 8000778:	f04f 0e00 	mov.w	lr, #0
 800077c:	e01e      	b.n	80007bc <base64_encode+0x60>
		      & 0x3f];
 800077e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      *out++ = b64str[((to_uchar (in[0]) << 4)
 8000782:	5c61      	ldrb	r1, [r4, r1]
 8000784:	7051      	strb	r1, [r2, #1]
      if (!--outlen)
 8000786:	2b02      	cmp	r3, #2
 8000788:	d00b      	beq.n	80007a2 <base64_encode+0x46>
      *out++ =
 800078a:	bb26      	cbnz	r6, 80007d6 <base64_encode+0x7a>
 800078c:	7095      	strb	r5, [r2, #2]
      if (!--outlen)
 800078e:	2b03      	cmp	r3, #3
 8000790:	d007      	beq.n	80007a2 <base64_encode+0x46>
 8000792:	3204      	adds	r2, #4
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
 8000794:	f802 5c01 	strb.w	r5, [r2, #-1]
      if (!--outlen)
 8000798:	3b04      	subs	r3, #4
 800079a:	d002      	beq.n	80007a2 <base64_encode+0x46>
	break;
      if (inlen)
 800079c:	b916      	cbnz	r6, 80007a4 <base64_encode+0x48>
      if (inlen)
	in += 3;
    }

  if (outlen)
    *out = '\0';
 800079e:	2300      	movs	r3, #0
 80007a0:	7013      	strb	r3, [r2, #0]
}
 80007a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (inlen)
 80007a4:	1e77      	subs	r7, r6, #1
 80007a6:	d0fa      	beq.n	800079e <base64_encode+0x42>
      *out++ = b64str[(to_uchar (in[0]) >> 2) & 0x3f];
 80007a8:	f810 1f03 	ldrb.w	r1, [r0, #3]!
 80007ac:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 80007b0:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80007b4:	f882 c000 	strb.w	ip, [r2]
      if (!--outlen)
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d0f2      	beq.n	80007a2 <base64_encode+0x46>
      *out++ = b64str[((to_uchar (in[0]) << 4)
 80007bc:	0109      	lsls	r1, r1, #4
		       + (--inlen ? to_uchar (in[1]) >> 4 : 0))
 80007be:	1e7e      	subs	r6, r7, #1
 80007c0:	d0dd      	beq.n	800077e <base64_encode+0x22>
 80007c2:	f890 c001 	ldrb.w	ip, [r0, #1]
 80007c6:	eb01 111c 	add.w	r1, r1, ip, lsr #4
		      & 0x3f];
 80007ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      *out++ = b64str[((to_uchar (in[0]) << 4)
 80007ce:	5c61      	ldrb	r1, [r4, r1]
 80007d0:	7051      	strb	r1, [r2, #1]
      if (!--outlen)
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d0e5      	beq.n	80007a2 <base64_encode+0x46>
	 ? b64str[((to_uchar (in[1]) << 2)
 80007d6:	7841      	ldrb	r1, [r0, #1]
 80007d8:	0089      	lsls	r1, r1, #2
		   + (--inlen ? to_uchar (in[2]) >> 6 : 0))
 80007da:	1ebe      	subs	r6, r7, #2
 80007dc:	bf1a      	itte	ne
 80007de:	7887      	ldrbne	r7, [r0, #2]
 80007e0:	09bf      	lsrne	r7, r7, #6
 80007e2:	4677      	moveq	r7, lr
 80007e4:	4439      	add	r1, r7
		  & 0x3f]
 80007e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      *out++ =
 80007ea:	5c61      	ldrb	r1, [r4, r1]
 80007ec:	7091      	strb	r1, [r2, #2]
      if (!--outlen)
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d0d7      	beq.n	80007a2 <base64_encode+0x46>
      *out++ = inlen ? b64str[to_uchar (in[2]) & 0x3f] : '=';
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d0cd      	beq.n	8000792 <base64_encode+0x36>
 80007f6:	3204      	adds	r2, #4
 80007f8:	7881      	ldrb	r1, [r0, #2]
 80007fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80007fe:	5c61      	ldrb	r1, [r4, r1]
 8000800:	f802 1c01 	strb.w	r1, [r2, #-1]
      if (!--outlen)
 8000804:	3b04      	subs	r3, #4
 8000806:	d1cd      	bne.n	80007a4 <base64_encode+0x48>
 8000808:	e7cb      	b.n	80007a2 <base64_encode+0x46>
  if (outlen)
 800080a:	b10b      	cbz	r3, 8000810 <base64_encode+0xb4>
    *out = '\0';
 800080c:	2300      	movs	r3, #0
 800080e:	7013      	strb	r3, [r2, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	08004ca0 	.word	0x08004ca0

08000818 <base64_encode_alloc>:
   memory allocation failed, OUT is set to NULL, and the return value
   indicates length of the requested memory block, i.e.,
   BASE64_LENGTH(inlen) + 1. */
size_t
base64_encode_alloc (const char *in, size_t inlen, char **out)
{
 8000818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t outlen = 1 + BASE64_LENGTH (inlen);
 800081c:	1c8c      	adds	r4, r1, #2
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <base64_encode_alloc+0x44>)
 8000820:	fba3 3404 	umull	r3, r4, r3, r4
 8000824:	0864      	lsrs	r4, r4, #1
 8000826:	00a4      	lsls	r4, r4, #2
 8000828:	1c65      	adds	r5, r4, #1
   * If the multiplication overflows, we lose at least half of the
   * correct value, so the result is < ((inlen + 2) / 3) * 2, which is
   * less than (inlen + 2) * 0.66667, which is less than inlen as soon as
   * (inlen > 4).
   */
  if (inlen > outlen)
 800082a:	42a9      	cmp	r1, r5
 800082c:	d904      	bls.n	8000838 <base64_encode_alloc+0x20>
    {
      *out = NULL;
 800082e:	2500      	movs	r5, #0
 8000830:	6015      	str	r5, [r2, #0]
    return outlen;

  base64_encode (in, inlen, *out, outlen);

  return outlen - 1;
}
 8000832:	4628      	mov	r0, r5
 8000834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000838:	4617      	mov	r7, r2
 800083a:	460e      	mov	r6, r1
 800083c:	4680      	mov	r8, r0
  *out = malloc (outlen);
 800083e:	4628      	mov	r0, r5
 8000840:	f003 fba4 	bl	8003f8c <malloc>
 8000844:	6038      	str	r0, [r7, #0]
  if (!*out)
 8000846:	2800      	cmp	r0, #0
 8000848:	d0f3      	beq.n	8000832 <base64_encode_alloc+0x1a>
  base64_encode (in, inlen, *out, outlen);
 800084a:	462b      	mov	r3, r5
 800084c:	4602      	mov	r2, r0
 800084e:	4631      	mov	r1, r6
 8000850:	4640      	mov	r0, r8
 8000852:	f7ff ff83 	bl	800075c <base64_encode>
  return outlen - 1;
 8000856:	4625      	mov	r5, r4
 8000858:	e7eb      	b.n	8000832 <base64_encode_alloc+0x1a>
 800085a:	bf00      	nop
 800085c:	aaaaaaab 	.word	0xaaaaaaab

08000860 <isbase64>:
   false otherwise.  Note that '=' is padding and not considered to be
   part of the alphabet.  */
bool
isbase64 (char ch)
{
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <isbase64+0x10>)
 8000862:	4418      	add	r0, r3
 8000864:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8000868:	43c0      	mvns	r0, r0
}
 800086a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 800086e:	4770      	bx	lr
 8000870:	08004ca0 	.word	0x08004ca0

08000874 <base64_decode>:
   that, when applicable, you must remove any line terminators that is
   part of the data stream before calling this function.  */
bool
base64_decode (const char *restrict in, size_t inlen,
	       char *restrict out, size_t *outlen)
{
 8000874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t outleft = *outlen;
 8000878:	f8d3 c000 	ldr.w	ip, [r3]

  while (inlen >= 2)
 800087c:	2901      	cmp	r1, #1
 800087e:	d963      	bls.n	8000948 <base64_decode+0xd4>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000880:	7805      	ldrb	r5, [r0, #0]
 8000882:	4c34      	ldr	r4, [pc, #208]	; (8000954 <base64_decode+0xe0>)
 8000884:	442c      	add	r4, r5
 8000886:	f994 6040 	ldrsb.w	r6, [r4, #64]	; 0x40
    {
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 800088a:	2e00      	cmp	r6, #0
 800088c:	db5e      	blt.n	800094c <base64_decode+0xd8>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 800088e:	7845      	ldrb	r5, [r0, #1]
 8000890:	4c30      	ldr	r4, [pc, #192]	; (8000954 <base64_decode+0xe0>)
 8000892:	442c      	add	r4, r5
 8000894:	f994 e040 	ldrsb.w	lr, [r4, #64]	; 0x40
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 8000898:	f1be 0f00 	cmp.w	lr, #0
 800089c:	db58      	blt.n	8000950 <base64_decode+0xdc>
  size_t outleft = *outlen;
 800089e:	4665      	mov	r5, ip
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 80008a0:	4f2c      	ldr	r7, [pc, #176]	; (8000954 <base64_decode+0xe0>)
 80008a2:	e021      	b.n	80008e8 <base64_decode+0x74>
      if (inlen == 2)
	break;

      if (in[2] == '=')
	{
	  if (inlen != 4)
 80008a4:	2904      	cmp	r1, #4
 80008a6:	d103      	bne.n	80008b0 <base64_decode+0x3c>
	    break;

	  if (in[3] != '=')
 80008a8:	78e2      	ldrb	r2, [r4, #3]
 80008aa:	2a3d      	cmp	r2, #61	; 0x3d
 80008ac:	d100      	bne.n	80008b0 <base64_decode+0x3c>
		}
	    }
	}

      in += 4;
      inlen -= 4;
 80008ae:	3904      	subs	r1, #4
    }

  *outlen -= outleft;
 80008b0:	ebac 0505 	sub.w	r5, ip, r5
 80008b4:	601d      	str	r5, [r3, #0]
 80008b6:	fab1 f081 	clz	r0, r1
 80008ba:	0940      	lsrs	r0, r0, #5

  if (inlen != 0)
    return false;

  return true;
}
 80008bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	      if (inlen != 4)
 80008c0:	2904      	cmp	r1, #4
 80008c2:	d0f4      	beq.n	80008ae <base64_decode+0x3a>
 80008c4:	e7f4      	b.n	80008b0 <base64_decode+0x3c>
      inlen -= 4;
 80008c6:	3904      	subs	r1, #4
  while (inlen >= 2)
 80008c8:	2901      	cmp	r1, #1
 80008ca:	d9f1      	bls.n	80008b0 <base64_decode+0x3c>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 80008cc:	7926      	ldrb	r6, [r4, #4]
 80008ce:	443e      	add	r6, r7
 80008d0:	f996 6040 	ldrsb.w	r6, [r6, #64]	; 0x40
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	dbeb      	blt.n	80008b0 <base64_decode+0x3c>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 80008d8:	7964      	ldrb	r4, [r4, #5]
 80008da:	443c      	add	r4, r7
 80008dc:	f994 e040 	ldrsb.w	lr, [r4, #64]	; 0x40
 80008e0:	3004      	adds	r0, #4
      if (!isbase64 (in[0]) || !isbase64 (in[1]))
 80008e2:	f1be 0f00 	cmp.w	lr, #0
 80008e6:	dbe3      	blt.n	80008b0 <base64_decode+0x3c>
 80008e8:	4604      	mov	r4, r0
      if (outleft)
 80008ea:	b135      	cbz	r5, 80008fa <base64_decode+0x86>
		    | (b64[to_uchar (in[1])] >> 4));
 80008ec:	ea4f 182e 	mov.w	r8, lr, asr #4
 80008f0:	ea48 0686 	orr.w	r6, r8, r6, lsl #2
	  *out++ = ((b64[to_uchar (in[0])] << 2)
 80008f4:	7016      	strb	r6, [r2, #0]
	  outleft--;
 80008f6:	3d01      	subs	r5, #1
	  *out++ = ((b64[to_uchar (in[0])] << 2)
 80008f8:	3201      	adds	r2, #1
      if (inlen == 2)
 80008fa:	2902      	cmp	r1, #2
 80008fc:	d0d8      	beq.n	80008b0 <base64_decode+0x3c>
      if (in[2] == '=')
 80008fe:	78a6      	ldrb	r6, [r4, #2]
 8000900:	2e3d      	cmp	r6, #61	; 0x3d
 8000902:	d0cf      	beq.n	80008a4 <base64_decode+0x30>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 8000904:	443e      	add	r6, r7
 8000906:	f996 8040 	ldrsb.w	r8, [r6, #64]	; 0x40
	  if (!isbase64 (in[2]))
 800090a:	f1b8 0f00 	cmp.w	r8, #0
 800090e:	dbcf      	blt.n	80008b0 <base64_decode+0x3c>
	  if (outleft)
 8000910:	b13d      	cbz	r5, 8000922 <base64_decode+0xae>
			| (b64[to_uchar (in[2])] >> 2));
 8000912:	ea4f 06a8 	mov.w	r6, r8, asr #2
 8000916:	ea46 1e0e 	orr.w	lr, r6, lr, lsl #4
	      *out++ = (((b64[to_uchar (in[1])] << 4) & 0xf0)
 800091a:	f882 e000 	strb.w	lr, [r2]
	      outleft--;
 800091e:	3d01      	subs	r5, #1
	      *out++ = (((b64[to_uchar (in[1])] << 4) & 0xf0)
 8000920:	3201      	adds	r2, #1
	  if (inlen == 3)
 8000922:	2903      	cmp	r1, #3
 8000924:	d0c4      	beq.n	80008b0 <base64_decode+0x3c>
	  if (in[3] == '=')
 8000926:	78e6      	ldrb	r6, [r4, #3]
 8000928:	2e3d      	cmp	r6, #61	; 0x3d
 800092a:	d0c9      	beq.n	80008c0 <base64_decode+0x4c>
  return uchar_in_range (to_uchar (ch)) && 0 <= b64[to_uchar (ch)];
 800092c:	443e      	add	r6, r7
 800092e:	f996 6040 	ldrsb.w	r6, [r6, #64]	; 0x40
	      if (!isbase64 (in[3]))
 8000932:	2e00      	cmp	r6, #0
 8000934:	dbbc      	blt.n	80008b0 <base64_decode+0x3c>
	      if (outleft)
 8000936:	2d00      	cmp	r5, #0
 8000938:	d0c5      	beq.n	80008c6 <base64_decode+0x52>
			    | b64[to_uchar (in[3])]);
 800093a:	ea46 1888 	orr.w	r8, r6, r8, lsl #6
		  *out++ = (((b64[to_uchar (in[2])] << 6) & 0xc0)
 800093e:	f882 8000 	strb.w	r8, [r2]
		  outleft--;
 8000942:	3d01      	subs	r5, #1
		  *out++ = (((b64[to_uchar (in[2])] << 6) & 0xc0)
 8000944:	3201      	adds	r2, #1
 8000946:	e7be      	b.n	80008c6 <base64_decode+0x52>
  size_t outleft = *outlen;
 8000948:	4665      	mov	r5, ip
 800094a:	e7b1      	b.n	80008b0 <base64_decode+0x3c>
 800094c:	4665      	mov	r5, ip
 800094e:	e7af      	b.n	80008b0 <base64_decode+0x3c>
 8000950:	4665      	mov	r5, ip
 8000952:	e7ad      	b.n	80008b0 <base64_decode+0x3c>
 8000954:	08004ca0 	.word	0x08004ca0

08000958 <base64_decode_alloc>:
   input was invalid, in which case *OUT is NULL and *OUTLEN is
   undefined. */
bool
base64_decode_alloc (const char *in, size_t inlen, char **out,
		     size_t *outlen)
{
 8000958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095a:	b083      	sub	sp, #12
 800095c:	4607      	mov	r7, r0
 800095e:	460c      	mov	r4, r1
 8000960:	4615      	mov	r5, r2
 8000962:	461e      	mov	r6, r3
  /* This may allocate a few bytes too much, depending on input,
     but it's not worth the extra CPU time to compute the exact amount.
     The exact amount is 3 * inlen / 4, minus 1 if the input ends
     with "=" and minus another 1 if the input ends with "==".
     Dividing before multiplying avoids the possibility of overflow.  */
  size_t needlen = 3 * (inlen / 4) + 2;
 8000964:	0888      	lsrs	r0, r1, #2
 8000966:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800096a:	3002      	adds	r0, #2
 800096c:	9001      	str	r0, [sp, #4]

  *out = malloc (needlen);
 800096e:	f003 fb0d 	bl	8003f8c <malloc>
 8000972:	6028      	str	r0, [r5, #0]
  if (!*out)
 8000974:	b188      	cbz	r0, 800099a <base64_decode_alloc+0x42>
    return true;

  if (!base64_decode (in, inlen, *out, &needlen))
 8000976:	ab01      	add	r3, sp, #4
 8000978:	4602      	mov	r2, r0
 800097a:	4621      	mov	r1, r4
 800097c:	4638      	mov	r0, r7
 800097e:	f7ff ff79 	bl	8000874 <base64_decode>
 8000982:	4604      	mov	r4, r0
 8000984:	b118      	cbz	r0, 800098e <base64_decode_alloc+0x36>
      free (*out);
      *out = NULL;
      return false;
    }

  if (outlen)
 8000986:	b14e      	cbz	r6, 800099c <base64_decode_alloc+0x44>
    *outlen = needlen;
 8000988:	9b01      	ldr	r3, [sp, #4]
 800098a:	6033      	str	r3, [r6, #0]
 800098c:	e006      	b.n	800099c <base64_decode_alloc+0x44>
      free (*out);
 800098e:	6828      	ldr	r0, [r5, #0]
 8000990:	f003 fb04 	bl	8003f9c <free>
      *out = NULL;
 8000994:	2300      	movs	r3, #0
 8000996:	602b      	str	r3, [r5, #0]
      return false;
 8000998:	e000      	b.n	800099c <base64_decode_alloc+0x44>
    return true;
 800099a:	2401      	movs	r4, #1

  return true;
}
 800099c:	4620      	mov	r0, r4
 800099e:	b003      	add	sp, #12
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080009a4 <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 80009a4:	b510      	push	{r4, lr}
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 80009a6:	4c07      	ldr	r4, [pc, #28]	; (80009c4 <USBD_HandleEP0_Stall+0x20>)
 80009a8:	6823      	ldr	r3, [r4, #0]
 80009aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ac:	2101      	movs	r1, #1
 80009ae:	2080      	movs	r0, #128	; 0x80
 80009b0:	4798      	blx	r3
	device.EP0_State = IDLE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009bc:	2118      	movs	r1, #24
 80009be:	2000      	movs	r0, #0
 80009c0:	4798      	blx	r3
}
 80009c2:	bd10      	pop	{r4, pc}
 80009c4:	20000ba8 	.word	0x20000ba8

080009c8 <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 80009c8:	b530      	push	{r4, r5, lr}
 80009ca:	b083      	sub	sp, #12
	uint32_t length = 0,ret;
	uint16_t status = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 80009d2:	4ba1      	ldr	r3, [pc, #644]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 80009d4:	885c      	ldrh	r4, [r3, #2]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 80009d6:	f7ff fd63 	bl	80004a0 <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 80009da:	4ba0      	ldr	r3, [pc, #640]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 80009dc:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80009e0:	f013 0f02 	tst.w	r3, #2
 80009e4:	d058      	beq.n	8000a98 <USB_Device_ProcessControlRequest+0xd0>
	Value = USB_ControlRequest.wValue & 0x00FF;
 80009e6:	b2e4      	uxtb	r4, r4
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 80009e8:	4b9b      	ldr	r3, [pc, #620]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 80009ea:	785b      	ldrb	r3, [r3, #1]
 80009ec:	2b0c      	cmp	r3, #12
 80009ee:	f200 8174 	bhi.w	8000cda <USB_Device_ProcessControlRequest+0x312>
 80009f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80009f6:	0089      	.short	0x0089
 80009f8:	0172000d 	.word	0x0172000d
 80009fc:	01720117 	.word	0x01720117
 8000a00:	005300d8 	.word	0x005300d8
 8000a04:	004200fe 	.word	0x004200fe
 8000a08:	007000e7 	.word	0x007000e7
 8000a0c:	016f0101 	.word	0x016f0101
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000a10:	4b91      	ldr	r3, [pc, #580]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d008      	beq.n	8000a2e <USB_Device_ProcessControlRequest+0x66>
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000a1c:	bb53      	cbnz	r3, 8000a74 <USB_Device_ProcessControlRequest+0xac>
			 device.RemoteWakeUp = 0;
 8000a1e:	4b8f      	ldr	r3, [pc, #572]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000a20:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8000a24:	f36f 0282 	bfc	r2, #2, #1
 8000a28:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
			 break;
 8000a2c:	e02d      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8000a2e:	4b8a      	ldr	r3, [pc, #552]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 8000a30:	8898      	ldrh	r0, [r3, #4]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000a32:	4b8b      	ldr	r3, [pc, #556]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	d000      	beq.n	8000a3e <USB_Device_ProcessControlRequest+0x76>
 8000a3c:	b9b8      	cbnz	r0, 8000a6e <USB_Device_ProcessControlRequest+0xa6>
					device.Endpoints[Index].IsConfigured==1) {
 8000a3e:	f000 030f 	and.w	r3, r0, #15
 8000a42:	4986      	ldr	r1, [pc, #536]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000a44:	222c      	movs	r2, #44	; 0x2c
 8000a46:	fb02 1203 	mla	r2, r2, r3, r1
 8000a4a:	7a12      	ldrb	r2, [r2, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8000a4c:	f012 0f01 	tst.w	r2, #1
 8000a50:	d00d      	beq.n	8000a6e <USB_Device_ProcessControlRequest+0xa6>
				device.Endpoints[Index].IsHalted = 0;
 8000a52:	460a      	mov	r2, r1
 8000a54:	212c      	movs	r1, #44	; 0x2c
 8000a56:	fb01 2303 	mla	r3, r1, r3, r2
 8000a5a:	7a19      	ldrb	r1, [r3, #8]
 8000a5c:	f36f 0182 	bfc	r1, #2, #1
 8000a60:	7219      	strb	r1, [r3, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8000a62:	6813      	ldr	r3, [r2, #0]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a66:	2100      	movs	r1, #0
 8000a68:	b2c0      	uxtb	r0, r0
 8000a6a:	4798      	blx	r3
 8000a6c:	e00d      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
				USBD_HandleEP0_Stall();
 8000a6e:	f7ff ff99 	bl	80009a4 <USBD_HandleEP0_Stall>
 8000a72:	e00a      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		}
		USBD_HandleEP0_Stall();
 8000a74:	f7ff ff96 	bl	80009a4 <USBD_HandleEP0_Stall>
		break;
 8000a78:	e007      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 8000a7a:	497a      	ldr	r1, [pc, #488]	; (8000c64 <USB_Device_ProcessControlRequest+0x29c>)
 8000a7c:	f2a1 1339 	subw	r3, r1, #313	; 0x139
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	2201      	movs	r2, #1
 8000a86:	2000      	movs	r0, #0
 8000a88:	4798      	blx	r3
		break;

	default:
		USBD_HandleEP0_Stall();
	}
	device.IsSetupRecieved = 0;
 8000a8a:	4a74      	ldr	r2, [pc, #464]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000a8c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000a90:	f36f 0341 	bfc	r3, #1, #1
 8000a94:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000a98:	b003      	add	sp, #12
 8000a9a:	bd30      	pop	{r4, r5, pc}
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 8000a9c:	4b6e      	ldr	r3, [pc, #440]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 8000a9e:	8899      	ldrh	r1, [r3, #4]
 8000aa0:	466a      	mov	r2, sp
 8000aa2:	b2c9      	uxtb	r1, r1
 8000aa4:	8858      	ldrh	r0, [r3, #2]
 8000aa6:	f7ff fd07 	bl	80004b8 <CALLBACK_USB_GetDescriptor>
		if (length==0)
 8000aaa:	b188      	cbz	r0, 8000ad0 <USB_Device_ProcessControlRequest+0x108>
			length = length < USB_ControlRequest.wLength ?
 8000aac:	4a6a      	ldr	r2, [pc, #424]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 8000aae:	88d4      	ldrh	r4, [r2, #6]
 8000ab0:	4284      	cmp	r4, r0
 8000ab2:	bf28      	it	cs
 8000ab4:	4604      	movcs	r4, r0
			ret = device.Driver->EndpointWrite(0,buffer,length);
 8000ab6:	4d69      	ldr	r5, [pc, #420]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4622      	mov	r2, r4
 8000abe:	9900      	ldr	r1, [sp, #0]
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	4798      	blx	r3
			device.Endpoints[0].InDataLeft = length - ret;
 8000ac4:	1a24      	subs	r4, r4, r0
 8000ac6:	62ac      	str	r4, [r5, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8000ac8:	9b00      	ldr	r3, [sp, #0]
 8000aca:	4403      	add	r3, r0
 8000acc:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000ace:	e7dc      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000ad0:	f7ff ff68 	bl	80009a4 <USBD_HandleEP0_Stall>
 8000ad4:	e7d9      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000ad6:	4b62      	ldr	r3, [pc, #392]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d10b      	bne.n	8000af8 <USB_Device_ProcessControlRequest+0x130>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 8000ae0:	4b5d      	ldr	r3, [pc, #372]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 8000ae2:	889b      	ldrh	r3, [r3, #4]
 8000ae4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000ae8:	495c      	ldr	r1, [pc, #368]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000aea:	680a      	ldr	r2, [r1, #0]
 8000aec:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8000aee:	2201      	movs	r2, #1
 8000af0:	4419      	add	r1, r3
 8000af2:	2000      	movs	r0, #0
 8000af4:	47a0      	blx	r4
			break;
 8000af6:	e7c8      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000af8:	4b59      	ldr	r3, [pc, #356]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d1c3      	bne.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000b02:	f7ff ff4f 	bl	80009a4 <USBD_HandleEP0_Stall>
			break;
 8000b06:	e7c0      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000b08:	4b53      	ldr	r3, [pc, #332]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f013 0303 	ands.w	r3, r3, #3
 8000b10:	d111      	bne.n	8000b36 <USB_Device_ProcessControlRequest+0x16e>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 8000b12:	4a52      	ldr	r2, [pc, #328]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000b14:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000b18:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8000b1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000b20:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000b24:	a902      	add	r1, sp, #8
 8000b26:	f821 3d02 	strh.w	r3, [r1, #-2]!
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	2202      	movs	r2, #2
 8000b30:	2000      	movs	r0, #0
 8000b32:	4798      	blx	r3
			break;
 8000b34:	e7a9      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d023      	beq.n	8000b82 <USB_Device_ProcessControlRequest+0x1ba>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d130      	bne.n	8000ba0 <USB_Device_ProcessControlRequest+0x1d8>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8000b3e:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 8000b40:	889b      	ldrh	r3, [r3, #4]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000b42:	4a47      	ldr	r2, [pc, #284]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	2a04      	cmp	r2, #4
 8000b4a:	d000      	beq.n	8000b4e <USB_Device_ProcessControlRequest+0x186>
 8000b4c:	bb43      	cbnz	r3, 8000ba0 <USB_Device_ProcessControlRequest+0x1d8>
					device.Endpoints[Index].IsConfigured==1) {
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	4942      	ldr	r1, [pc, #264]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000b54:	222c      	movs	r2, #44	; 0x2c
 8000b56:	fb02 1203 	mla	r2, r2, r3, r1
 8000b5a:	7a12      	ldrb	r2, [r2, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000b5c:	f012 0f01 	tst.w	r2, #1
 8000b60:	d01e      	beq.n	8000ba0 <USB_Device_ProcessControlRequest+0x1d8>
				status = device.Endpoints[Index].IsHalted;
 8000b62:	460a      	mov	r2, r1
 8000b64:	212c      	movs	r1, #44	; 0x2c
 8000b66:	fb01 2303 	mla	r3, r1, r3, r2
 8000b6a:	7a1b      	ldrb	r3, [r3, #8]
 8000b6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b70:	a902      	add	r1, sp, #8
 8000b72:	f821 3d02 	strh.w	r3, [r1, #-2]!
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000b76:	6813      	ldr	r3, [r2, #0]
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	4798      	blx	r3
				break;
 8000b80:	e783      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d109      	bne.n	8000ba0 <USB_Device_ProcessControlRequest+0x1d8>
			status = 0;
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	a902      	add	r1, sp, #8
 8000b90:	f821 0d02 	strh.w	r0, [r1, #-2]!
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000b94:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	4798      	blx	r3
			break;
 8000b9e:	e774      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8000ba0:	f7ff ff00 	bl	80009a4 <USBD_HandleEP0_Stall>
		break;
 8000ba4:	e771      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		if (Value == 0)
 8000ba6:	b94c      	cbnz	r4, 8000bbc <USB_Device_ProcessControlRequest+0x1f4>
			USB_DeviceState = DEVICE_STATE_Default;
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	4798      	blx	r3
		break;
 8000bba:	e766      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e7f4      	b.n	8000bae <USB_Device_ProcessControlRequest+0x1e6>
		device.Configuration = Value;
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000bc6:	f883 4139 	strb.w	r4, [r3, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8000bca:	f7ff fc43 	bl	8000454 <EVENT_USB_Device_ConfigurationChanged>
		if (Value == 0) {
 8000bce:	b91c      	cbnz	r4, 8000bd8 <USB_Device_ProcessControlRequest+0x210>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	701a      	strb	r2, [r3, #0]
			break;
 8000bd6:	e758      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		if (device.IsConfigured == 1)
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000bda:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000bde:	f013 0f01 	tst.w	r3, #1
 8000be2:	d003      	beq.n	8000bec <USB_Device_ProcessControlRequest+0x224>
			USB_DeviceState = DEVICE_STATE_Configured;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e74e      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000bec:	f7ff feda 	bl	80009a4 <USBD_HandleEP0_Stall>
 8000bf0:	e74b      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8000bf2:	f7ff fed7 	bl	80009a4 <USBD_HandleEP0_Stall>
		break;
 8000bf6:	e748      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	d008      	beq.n	8000c14 <USB_Device_ProcessControlRequest+0x24c>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	f47f af3e 	bne.w	8000a8a <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000c0e:	f7ff fec9 	bl	80009a4 <USBD_HandleEP0_Stall>
			break;
 8000c12:	e73a      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 8000c14:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
 8000c16:	8891      	ldrh	r1, [r2, #4]
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <USB_Device_ProcessControlRequest+0x294>)
 8000c1a:	440b      	add	r3, r1
 8000c1c:	8852      	ldrh	r2, [r2, #2]
 8000c1e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 8000c22:	e732      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		if (Value == FEATURE_SEL_TestMode) {
 8000c24:	2c02      	cmp	r4, #2
 8000c26:	d013      	beq.n	8000c50 <USB_Device_ProcessControlRequest+0x288>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d01a      	beq.n	8000c68 <USB_Device_ProcessControlRequest+0x2a0>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <USB_Device_ProcessControlRequest+0x298>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d106      	bne.n	8000c4a <USB_Device_ProcessControlRequest+0x282>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000c3c:	b92c      	cbnz	r4, 8000c4a <USB_Device_ProcessControlRequest+0x282>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <USB_Device_ProcessControlRequest+0x290>)
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d037      	beq.n	8000cba <USB_Device_ProcessControlRequest+0x2f2>
		USBD_HandleEP0_Stall();
 8000c4a:	f7ff feab 	bl	80009a4 <USBD_HandleEP0_Stall>
		break;
 8000c4e:	e71c      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
			USBD_HandleEP0_Stall();
 8000c50:	f7ff fea8 	bl	80009a4 <USBD_HandleEP0_Stall>
			break;
 8000c54:	e719      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
 8000c56:	bf00      	nop
 8000c58:	20000ef8 	.word	0x20000ef8
 8000c5c:	20000ba8 	.word	0x20000ba8
 8000c60:	20000ef5 	.word	0x20000ef5
 8000c64:	20000ce1 	.word	0x20000ce1
			switch (Value) {
 8000c68:	b154      	cbz	r4, 8000c80 <USB_Device_ProcessControlRequest+0x2b8>
 8000c6a:	2c01      	cmp	r4, #1
 8000c6c:	f47f af0d 	bne.w	8000a8a <USB_Device_ProcessControlRequest+0xc2>
				device.RemoteWakeUp = 1;
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <USB_Device_ProcessControlRequest+0x318>)
 8000c72:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8000c7e:	e704      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <USB_Device_ProcessControlRequest+0x31c>)
 8000c82:	8898      	ldrh	r0, [r3, #4]
				if (device.Endpoints[Index].IsConfigured == 0)
 8000c84:	f000 030f 	and.w	r3, r0, #15
 8000c88:	4915      	ldr	r1, [pc, #84]	; (8000ce0 <USB_Device_ProcessControlRequest+0x318>)
 8000c8a:	222c      	movs	r2, #44	; 0x2c
 8000c8c:	fb02 1203 	mla	r2, r2, r3, r1
 8000c90:	7a12      	ldrb	r2, [r2, #8]
 8000c92:	f012 0f01 	tst.w	r2, #1
 8000c96:	d00d      	beq.n	8000cb4 <USB_Device_ProcessControlRequest+0x2ec>
					device.Endpoints[Index].IsHalted = 1;
 8000c98:	4911      	ldr	r1, [pc, #68]	; (8000ce0 <USB_Device_ProcessControlRequest+0x318>)
 8000c9a:	222c      	movs	r2, #44	; 0x2c
 8000c9c:	fb02 1303 	mla	r3, r2, r3, r1
 8000ca0:	7a1a      	ldrb	r2, [r3, #8]
 8000ca2:	f042 0204 	orr.w	r2, r2, #4
 8000ca6:	721a      	strb	r2, [r3, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8000ca8:	680b      	ldr	r3, [r1, #0]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	2101      	movs	r1, #1
 8000cae:	b2c0      	uxtb	r0, r0
 8000cb0:	4798      	blx	r3
 8000cb2:	e6ea      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
					USBD_HandleEP0_Stall();
 8000cb4:	f7ff fe76 	bl	80009a4 <USBD_HandleEP0_Stall>
 8000cb8:	e6e7      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <USB_Device_ProcessControlRequest+0x31c>)
 8000cbc:	889b      	ldrh	r3, [r3, #4]
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1c2      	bne.n	8000c4a <USB_Device_ProcessControlRequest+0x282>
				device.Endpoints[0].IsHalted = 1;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <USB_Device_ProcessControlRequest+0x318>)
 8000cc6:	7a13      	ldrb	r3, [r2, #8]
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 8000cce:	f7ff fe69 	bl	80009a4 <USBD_HandleEP0_Stall>
				break;
 8000cd2:	e6da      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8000cd4:	f7ff fe66 	bl	80009a4 <USBD_HandleEP0_Stall>
		break;
 8000cd8:	e6d7      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
		USBD_HandleEP0_Stall();
 8000cda:	f7ff fe63 	bl	80009a4 <USBD_HandleEP0_Stall>
 8000cde:	e6d4      	b.n	8000a8a <USB_Device_ProcessControlRequest+0xc2>
 8000ce0:	20000ba8 	.word	0x20000ba8
 8000ce4:	20000ef8 	.word	0x20000ef8

08000ce8 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 8000ce8:	b510      	push	{r4, lr}
	if (device.EP0_State == IN_DATA) {
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <USBD_HandleEP0_IN+0x38>)
 8000cec:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d109      	bne.n	8000d08 <USBD_HandleEP0_IN+0x20>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <USBD_HandleEP0_IN+0x38>)
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 8000d00:	2305      	movs	r3, #5
 8000d02:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
 8000d06:	e00a      	b.n	8000d1e <USBD_HandleEP0_IN+0x36>
	}
	if (device.EP0_State == IN_STATUS) {
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d108      	bne.n	8000d1e <USBD_HandleEP0_IN+0x36>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000d0c:	4c04      	ldr	r4, [pc, #16]	; (8000d20 <USBD_HandleEP0_IN+0x38>)
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d12:	2118      	movs	r1, #24
 8000d14:	7920      	ldrb	r0, [r4, #4]
 8000d16:	4798      	blx	r3
		device.EP0_State = IDLE;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	}
}
 8000d1e:	bd10      	pop	{r4, pc}
 8000d20:	20000ba8 	.word	0x20000ba8

08000d24 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 8000d24:	b510      	push	{r4, lr}
	if (device.EP0_State == OUT_DATA) {
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <USBD_HandleEP0_OUT+0x40>)
 8000d28:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d00b      	beq.n	8000d48 <USBD_HandleEP0_OUT+0x24>
		USB_Device_ProcessControlRequest();
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
		device.EP0_State = IN_STATUS;
	}
	if (device.EP0_State == OUT_STATUS) {
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	d108      	bne.n	8000d46 <USBD_HandleEP0_OUT+0x22>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000d34:	4c0b      	ldr	r4, [pc, #44]	; (8000d64 <USBD_HandleEP0_OUT+0x40>)
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3a:	2118      	movs	r1, #24
 8000d3c:	7920      	ldrb	r0, [r4, #4]
 8000d3e:	4798      	blx	r3
		device.EP0_State = IDLE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	}
}
 8000d46:	bd10      	pop	{r4, pc}
		USB_Device_ProcessControlRequest();
 8000d48:	f7ff fe3e 	bl	80009c8 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 8000d4c:	4c05      	ldr	r4, [pc, #20]	; (8000d64 <USBD_HandleEP0_OUT+0x40>)
 8000d4e:	6823      	ldr	r3, [r4, #0]
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	2200      	movs	r2, #0
 8000d54:	4611      	mov	r1, r2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
 8000d60:	e7f1      	b.n	8000d46 <USBD_HandleEP0_OUT+0x22>
 8000d62:	bf00      	nop
 8000d64:	20000ba8 	.word	0x20000ba8

08000d68 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 8000d68:	b510      	push	{r4, lr}
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 8000d6a:	4c1a      	ldr	r4, [pc, #104]	; (8000dd4 <USBD_HandleEP0_SETUP+0x6c>)
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d70:	2208      	movs	r2, #8
 8000d72:	4919      	ldr	r1, [pc, #100]	; (8000dd8 <USBD_HandleEP0_SETUP+0x70>)
 8000d74:	2000      	movs	r0, #0
 8000d76:	4798      	blx	r3
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 8000d78:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	if (ret_val != 8 )
 8000d84:	2808      	cmp	r0, #8
 8000d86:	d000      	beq.n	8000d8a <USBD_HandleEP0_SETUP+0x22>
			device.EP0_State = OUT_DATA;
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
		}
	}
}
 8000d88:	bd10      	pop	{r4, pc}
	if (USB_ControlRequest.wLength==0) {
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <USBD_HandleEP0_SETUP+0x70>)
 8000d8c:	88d9      	ldrh	r1, [r3, #6]
 8000d8e:	b169      	cbz	r1, 8000dac <USBD_HandleEP0_SETUP+0x44>
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <USBD_HandleEP0_SETUP+0x70>)
 8000d92:	f993 3000 	ldrsb.w	r3, [r3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db14      	blt.n	8000dc4 <USBD_HandleEP0_SETUP+0x5c>
			device.EP0_State = OUT_DATA;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <USBD_HandleEP0_SETUP+0x6c>)
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da6:	2000      	movs	r0, #0
 8000da8:	4798      	blx	r3
 8000daa:	e7ed      	b.n	8000d88 <USBD_HandleEP0_SETUP+0x20>
		device.EP0_State = IN_STATUS;
 8000dac:	2303      	movs	r3, #3
 8000dae:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 8000db2:	f7ff fe09 	bl	80009c8 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 8000db6:	6823      	ldr	r3, [r4, #0]
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4798      	blx	r3
 8000dc2:	e7e1      	b.n	8000d88 <USBD_HandleEP0_SETUP+0x20>
			device.EP0_State = IN_DATA;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <USBD_HandleEP0_SETUP+0x6c>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 8000dcc:	f7ff fdfc 	bl	80009c8 <USB_Device_ProcessControlRequest>
 8000dd0:	e7da      	b.n	8000d88 <USBD_HandleEP0_SETUP+0x20>
 8000dd2:	bf00      	nop
 8000dd4:	20000ba8 	.word	0x20000ba8
 8000dd8:	20000ef8 	.word	0x20000ef8

08000ddc <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 8000ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;
	switch (event) {
 8000de0:	2809      	cmp	r0, #9
 8000de2:	d847      	bhi.n	8000e74 <USBD_SignalDeviceEventHandler+0x98>
 8000de4:	e8df f000 	tbb	[pc, r0]
 8000de8:	4e4b545c 	.word	0x4e4b545c
 8000dec:	7e864605 	.word	0x7e864605
 8000df0:	4846      	.short	0x4846
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 8000df2:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <USBD_SignalDeviceEventHandler+0x12c>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 8000df8:	4b44      	ldr	r3, [pc, #272]	; (8000f0c <USBD_SignalDeviceEventHandler+0x130>)
 8000dfa:	2701      	movs	r7, #1
 8000dfc:	f883 713b 	strb.w	r7, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 8000e00:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8000e04:	f36f 0282 	bfc	r2, #2, #1
 8000e08:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8000e0c:	2400      	movs	r4, #0
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
			device.Endpoints[i].InInUse = 0;
 8000e0e:	461e      	mov	r6, r3
 8000e10:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8000e14:	e001      	b.n	8000e1a <USBD_SignalDeviceEventHandler+0x3e>
 8000e16:	3401      	adds	r4, #1
 8000e18:	3701      	adds	r7, #1
 8000e1a:	fb08 6304 	mla	r3, r8, r4, r6
 8000e1e:	891a      	ldrh	r2, [r3, #8]
 8000e20:	f36f 1204 	bfc	r2, #4, #1
 8000e24:	811a      	strh	r2, [r3, #8]
			device.Endpoints[i].OutInUse = 0;
 8000e26:	891a      	ldrh	r2, [r3, #8]
 8000e28:	f36f 02c3 	bfc	r2, #3, #1
 8000e2c:	811a      	strh	r2, [r3, #8]
			device.Endpoints[i].IsHalted = 0;
 8000e2e:	7a1a      	ldrb	r2, [r3, #8]
 8000e30:	f36f 0282 	bfc	r2, #2, #1
 8000e34:	721a      	strb	r2, [r3, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 8000e36:	2c00      	cmp	r4, #0
 8000e38:	d0ed      	beq.n	8000e16 <USBD_SignalDeviceEventHandler+0x3a>
 8000e3a:	b2d3      	uxtb	r3, r2
 8000e3c:	f013 0f01 	tst.w	r3, #1
 8000e40:	d00b      	beq.n	8000e5a <USBD_SignalDeviceEventHandler+0x7e>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 8000e42:	fb08 6504 	mla	r5, r8, r4, r6
 8000e46:	6833      	ldr	r3, [r6, #0]
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	7928      	ldrb	r0, [r5, #4]
 8000e4c:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8000e4e:	7a2b      	ldrb	r3, [r5, #8]
				device.Endpoints[i].IsEnabled = 0;
 8000e50:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000e54:	f36f 0341 	bfc	r3, #1, #1
 8000e58:	722b      	strb	r3, [r5, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8000e5a:	2f06      	cmp	r7, #6
 8000e5c:	dddb      	ble.n	8000e16 <USBD_SignalDeviceEventHandler+0x3a>
			}
		}
		device.Configuration = 0;
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <USBD_SignalDeviceEventHandler+0x130>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
			device.InterfaceSettings[i] = 0;
 8000e66:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000e6e:	2118      	movs	r1, #24
 8000e70:	7918      	ldrb	r0, [r3, #4]
 8000e72:	4790      	blx	r2
		EVENT_USB_Device_Suspend();
		break;
	default:
		return;
	}
}
 8000e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		EVENT_USB_Device_StartOfFrame();
 8000e78:	f7ff fb1a 	bl	80004b0 <EVENT_USB_Device_StartOfFrame>
		break;
 8000e7c:	e7fa      	b.n	8000e74 <USBD_SignalDeviceEventHandler+0x98>
		EVENT_USB_Device_Connect();
 8000e7e:	f7ff fad3 	bl	8000428 <EVENT_USB_Device_Connect>
		break;
 8000e82:	e7f7      	b.n	8000e74 <USBD_SignalDeviceEventHandler+0x98>
		USB_DeviceState = DEVICE_STATE_Powered;
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <USBD_SignalDeviceEventHandler+0x12c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 8000e8a:	f7ff face 	bl	800042a <EVENT_USB_Device_Disconnect>
		break;
 8000e8e:	e7f1      	b.n	8000e74 <USBD_SignalDeviceEventHandler+0x98>
		 USB_DeviceState = DEVICE_STATE_Unattached;
 8000e90:	2000      	movs	r0, #0
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <USBD_SignalDeviceEventHandler+0x12c>)
 8000e94:	7018      	strb	r0, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <USBD_SignalDeviceEventHandler+0x130>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4798      	blx	r3
		 break;
 8000e9e:	e7e9      	b.n	8000e74 <USBD_SignalDeviceEventHandler+0x98>
		 USB_DeviceState = DEVICE_STATE_Powered;
 8000ea0:	2501      	movs	r5, #1
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <USBD_SignalDeviceEventHandler+0x12c>)
 8000ea4:	701d      	strb	r5, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 8000ea6:	4c19      	ldr	r4, [pc, #100]	; (8000f0c <USBD_SignalDeviceEventHandler+0x130>)
 8000ea8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eac:	2100      	movs	r1, #0
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f003 fbba 	bl	8004628 <memset>
		 device.Driver = &Driver_USBD0;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <USBD_SignalDeviceEventHandler+0x134>)
 8000eb6:	6023      	str	r3, [r4, #0]
		 device.EP0_State = IDLE;
 8000eb8:	f884 513b 	strb.w	r5, [r4, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8000ebc:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <USBD_SignalDeviceEventHandler+0x138>)
 8000ebe:	6222      	str	r2, [r4, #32]
		 device.Endpoints[0].InBufferLength = 256;
 8000ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec4:	6262      	str	r2, [r4, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8000ec6:	4914      	ldr	r1, [pc, #80]	; (8000f18 <USBD_SignalDeviceEventHandler+0x13c>)
 8000ec8:	6161      	str	r1, [r4, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 8000eca:	61a2      	str	r2, [r4, #24]
		 device.Endpoints[0].IsEnabled = 1;
 8000ecc:	2203      	movs	r2, #3
 8000ece:	7222      	strb	r2, [r4, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 8000ed0:	8921      	ldrh	r1, [r4, #8]
 8000ed2:	2240      	movs	r2, #64	; 0x40
 8000ed4:	f362 118c 	bfi	r1, r2, #6, #7
 8000ed8:	8121      	strh	r1, [r4, #8]
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	2100      	movs	r1, #0
 8000ede:	4608      	mov	r0, r1
 8000ee0:	4798      	blx	r3
		break;
 8000ee2:	e7c7      	b.n	8000e74 <USBD_SignalDeviceEventHandler+0x98>
		USB_DeviceState = device.PreSuspendDeviceState;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <USBD_SignalDeviceEventHandler+0x130>)
 8000ee6:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <USBD_SignalDeviceEventHandler+0x12c>)
 8000eec:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 8000eee:	f7ff fae0 	bl	80004b2 <EVENT_USB_Device_WakeUp>
		break;
 8000ef2:	e7bf      	b.n	8000e74 <USBD_SignalDeviceEventHandler+0x98>
		device.PreSuspendDeviceState = USB_DeviceState;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <USBD_SignalDeviceEventHandler+0x12c>)
 8000ef6:	7819      	ldrb	r1, [r3, #0]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <USBD_SignalDeviceEventHandler+0x130>)
 8000efa:	f882 113a 	strb.w	r1, [r2, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 8000efe:	2205      	movs	r2, #5
 8000f00:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 8000f02:	f7ff fad7 	bl	80004b4 <EVENT_USB_Device_Suspend>
		break;
 8000f06:	e7b5      	b.n	8000e74 <USBD_SignalDeviceEventHandler+0x98>
 8000f08:	20000ef5 	.word	0x20000ef5
 8000f0c:	20000ba8 	.word	0x20000ba8
 8000f10:	08004de0 	.word	0x08004de0
 8000f14:	200009a8 	.word	0x200009a8
 8000f18:	20000aa8 	.word	0x20000aa8

08000f1c <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 8000f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1e:	f000 040f 	and.w	r4, r0, #15
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8000f24:	f893 613c 	ldrb.w	r6, [r3, #316]	; 0x13c
	temp_dir = device.CurrentDirection;
 8000f28:	f893 513d 	ldrb.w	r5, [r3, #317]	; 0x13d
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8000f2c:	f883 413c 	strb.w	r4, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 8000f30:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8000f34:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 8000f38:	2901      	cmp	r1, #1
 8000f3a:	d015      	beq.n	8000f68 <USBD_SignalEndpointEvent_Handler+0x4c>
 8000f3c:	b139      	cbz	r1, 8000f4e <USBD_SignalEndpointEvent_Handler+0x32>
 8000f3e:	2902      	cmp	r1, #2
 8000f40:	d038      	beq.n	8000fb4 <USBD_SignalEndpointEvent_Handler+0x98>
		default:
			break;
		}
		break;
	}
	device.CurrentEndpoint = temp_num;
 8000f42:	4b42      	ldr	r3, [pc, #264]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8000f44:	f883 613c 	strb.w	r6, [r3, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 8000f48:	f883 513d 	strb.w	r5, [r3, #317]	; 0x13d
}
 8000f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ep->OutInUse = 0;
 8000f4e:	4a3f      	ldr	r2, [pc, #252]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8000f50:	232c      	movs	r3, #44	; 0x2c
 8000f52:	fb03 2304 	mla	r3, r3, r4, r2
 8000f56:	891a      	ldrh	r2, [r3, #8]
 8000f58:	f36f 02c3 	bfc	r2, #3, #1
 8000f5c:	811a      	strh	r2, [r3, #8]
		switch(device.CurrentEndpoint) {
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d1ef      	bne.n	8000f42 <USBD_SignalEndpointEvent_Handler+0x26>
			USBD_HandleEP0_SETUP();
 8000f62:	f7ff ff01 	bl	8000d68 <USBD_HandleEP0_SETUP>
			break;
 8000f66:	e7ec      	b.n	8000f42 <USBD_SignalEndpointEvent_Handler+0x26>
		ep->IsOutRecieved = 1;
 8000f68:	4a38      	ldr	r2, [pc, #224]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8000f6a:	232c      	movs	r3, #44	; 0x2c
 8000f6c:	fb03 2304 	mla	r3, r3, r4, r2
 8000f70:	891a      	ldrh	r2, [r3, #8]
 8000f72:	f042 0220 	orr.w	r2, r2, #32
 8000f76:	811a      	strh	r2, [r3, #8]
		if (ep->OutBytesAvailable == 0) {
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	b963      	cbnz	r3, 8000f96 <USBD_SignalEndpointEvent_Handler+0x7a>
			ep->OutOffset = 0; /* clear offset, new data is there */
 8000f7c:	4b33      	ldr	r3, [pc, #204]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8000f7e:	272c      	movs	r7, #44	; 0x2c
 8000f80:	fb07 3704 	mla	r7, r7, r4, r3
 8000f84:	2200      	movs	r2, #0
 8000f86:	613a      	str	r2, [r7, #16]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	6979      	ldr	r1, [r7, #20]
 8000f90:	7938      	ldrb	r0, [r7, #4]
 8000f92:	4798      	blx	r3
 8000f94:	60f8      	str	r0, [r7, #12]
		ep->OutInUse = 0;
 8000f96:	4a2d      	ldr	r2, [pc, #180]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8000f98:	232c      	movs	r3, #44	; 0x2c
 8000f9a:	fb03 2404 	mla	r4, r3, r4, r2
 8000f9e:	8923      	ldrh	r3, [r4, #8]
 8000fa0:	f36f 03c3 	bfc	r3, #3, #1
 8000fa4:	8123      	strh	r3, [r4, #8]
		switch(device.CurrentEndpoint) {
 8000fa6:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1c9      	bne.n	8000f42 <USBD_SignalEndpointEvent_Handler+0x26>
			USBD_HandleEP0_OUT();
 8000fae:	f7ff feb9 	bl	8000d24 <USBD_HandleEP0_OUT>
			break;
 8000fb2:	e7c6      	b.n	8000f42 <USBD_SignalEndpointEvent_Handler+0x26>
		if (ep->InDataLeft> 0) {
 8000fb4:	4a25      	ldr	r2, [pc, #148]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8000fb6:	232c      	movs	r3, #44	; 0x2c
 8000fb8:	fb03 2304 	mla	r3, r3, r4, r2
 8000fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fbe:	b17a      	cbz	r2, 8000fe0 <USBD_SignalEndpointEvent_Handler+0xc4>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8000fc2:	212c      	movs	r1, #44	; 0x2c
 8000fc4:	fb01 3404 	mla	r4, r1, r4, r3
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fce:	7920      	ldrb	r0, [r4, #4]
 8000fd0:	4798      	blx	r3
			ep->InDataLeft -= data_count;
 8000fd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fd4:	1a12      	subs	r2, r2, r0
 8000fd6:	62a2      	str	r2, [r4, #40]	; 0x28
			ep->InDataBuffer+= data_count;
 8000fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fda:	4403      	add	r3, r0
 8000fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
			return;
 8000fde:	e7b5      	b.n	8000f4c <USBD_SignalEndpointEvent_Handler+0x30>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8000fe2:	232c      	movs	r3, #44	; 0x2c
 8000fe4:	fb03 2304 	mla	r3, r3, r4, r2
 8000fe8:	7918      	ldrb	r0, [r3, #4]
 8000fea:	f010 0f0f 	tst.w	r0, #15
 8000fee:	d11a      	bne.n	8001026 <USBD_SignalEndpointEvent_Handler+0x10a>
 8000ff0:	232c      	movs	r3, #44	; 0x2c
 8000ff2:	fb03 2304 	mla	r3, r3, r4, r2
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	b1ab      	cbz	r3, 8001026 <USBD_SignalEndpointEvent_Handler+0x10a>
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <USBD_SignalEndpointEvent_Handler+0x134>)
 8000ffc:	88d2      	ldrh	r2, [r2, #6]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d011      	beq.n	8001026 <USBD_SignalEndpointEvent_Handler+0x10a>
 8001002:	4912      	ldr	r1, [pc, #72]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8001004:	222c      	movs	r2, #44	; 0x2c
 8001006:	fb02 1204 	mla	r2, r2, r4, r1
 800100a:	8912      	ldrh	r2, [r2, #8]
 800100c:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8001010:	fbb3 f1f2 	udiv	r1, r3, r2
 8001014:	fb02 3311 	mls	r3, r2, r1, r3
 8001018:	b92b      	cbnz	r3, 8001026 <USBD_SignalEndpointEvent_Handler+0x10a>
			device.Driver->EndpointWrite(ep->Address,0,0);
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	2200      	movs	r2, #0
 8001022:	4611      	mov	r1, r2
 8001024:	4798      	blx	r3
		ep->InBytesAvailable = 0;
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <USBD_SignalEndpointEvent_Handler+0x130>)
 8001028:	222c      	movs	r2, #44	; 0x2c
 800102a:	fb02 3404 	mla	r4, r2, r4, r3
 800102e:	2100      	movs	r1, #0
 8001030:	61e1      	str	r1, [r4, #28]
		ep->InInUse = 0;
 8001032:	8922      	ldrh	r2, [r4, #8]
 8001034:	f361 1204 	bfi	r2, r1, #4, #1
 8001038:	8122      	strh	r2, [r4, #8]
		switch(device.CurrentEndpoint) {
 800103a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800103e:	2b00      	cmp	r3, #0
 8001040:	f47f af7f 	bne.w	8000f42 <USBD_SignalEndpointEvent_Handler+0x26>
			USBD_HandleEP0_IN();
 8001044:	f7ff fe50 	bl	8000ce8 <USBD_HandleEP0_IN>
			break;
 8001048:	e77b      	b.n	8000f42 <USBD_SignalEndpointEvent_Handler+0x26>
 800104a:	bf00      	nop
 800104c:	20000ba8 	.word	0x20000ba8
 8001050:	20000ef8 	.word	0x20000ef8

08001054 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4605      	mov	r5, r0
	int32_t status = 0;
	memset(&device,0x0,sizeof(USB_Device_t));
 8001058:	4c16      	ldr	r4, [pc, #88]	; (80010b4 <USBD_Initialize+0x60>)
 800105a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800105e:	2100      	movs	r1, #0
 8001060:	4620      	mov	r0, r4
 8001062:	f003 fae1 	bl	8004628 <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <USBD_Initialize+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <USBD_Initialize+0x68>)
 800106e:	6023      	str	r3, [r4, #0]
	device.EP0_State = IDLE;
 8001070:	2201      	movs	r2, #1
 8001072:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <USBD_Initialize+0x6c>)
 8001078:	6222      	str	r2, [r4, #32]
	device.Endpoints[0].InBufferLength = 256;
 800107a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107e:	6262      	str	r2, [r4, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8001080:	4910      	ldr	r1, [pc, #64]	; (80010c4 <USBD_Initialize+0x70>)
 8001082:	6161      	str	r1, [r4, #20]
	device.Endpoints[0].OutBufferLength = 256;
 8001084:	61a2      	str	r2, [r4, #24]
	device.Endpoints[0].Direction = 0;
	device.Endpoints[0].IsConfigured = 1;
	device.Endpoints[0].IsEnabled = 1;
 8001086:	2203      	movs	r2, #3
 8001088:	7222      	strb	r2, [r4, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 800108a:	8922      	ldrh	r2, [r4, #8]
 800108c:	2140      	movs	r1, #64	; 0x40
 800108e:	f361 128c 	bfi	r2, r1, #6, #7
 8001092:	8122      	strh	r2, [r4, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4628      	mov	r0, r5
 8001098:	4798      	blx	r3
	if (status != XMC_USBD_STATUS_OK)
 800109a:	b938      	cbnz	r0, 80010ac <USBD_Initialize+0x58>
		return -1;

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	2100      	movs	r1, #0
 80010a4:	4608      	mov	r0, r1
 80010a6:	4798      	blx	r3
	if (status != XMC_USBD_STATUS_OK) {
		device.Driver->Uninitialize();
		return -1;
	}

	return 0;
 80010a8:	2000      	movs	r0, #0
}
 80010aa:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b0:	e7fb      	b.n	80010aa <USBD_Initialize+0x56>
 80010b2:	bf00      	nop
 80010b4:	20000ba8 	.word	0x20000ba8
 80010b8:	20000ef5 	.word	0x20000ef5
 80010bc:	08004de0 	.word	0x08004de0
 80010c0:	200009a8 	.word	0x200009a8
 80010c4:	20000aa8 	.word	0x20000aa8

080010c8 <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 80010c8:	b508      	push	{r3, lr}
	if (device.Driver->IsEnumDone())
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <USB_IsEnumDone+0x14>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d0:	4798      	blx	r3
		return 1;
	else
		return 0;
 }
 80010d2:	3000      	adds	r0, #0
 80010d4:	bf18      	it	ne
 80010d6:	2001      	movne	r0, #1
 80010d8:	bd08      	pop	{r3, pc}
 80010da:	bf00      	nop
 80010dc:	20000ba8 	.word	0x20000ba8

080010e0 <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 80010e0:	b410      	push	{r4}
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 80010e2:	f000 030f 	and.w	r3, r0, #15
	if (addr & ENDPOINT_DIR_MASK) {
 80010e6:	f010 0f80 	tst.w	r0, #128	; 0x80
		device.Endpoints[number].InBuffer = buf;
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <USBD_SetEndpointBuffer+0x24>)
 80010ec:	f04f 042c 	mov.w	r4, #44	; 0x2c
 80010f0:	fb04 0303 	mla	r3, r4, r3, r0
 80010f4:	bf19      	ittee	ne
 80010f6:	6219      	strne	r1, [r3, #32]
		device.Endpoints[number].InBufferLength = len;
 80010f8:	625a      	strne	r2, [r3, #36]	; 0x24
	} else {
		device.Endpoints[number].OutBuffer = buf;
 80010fa:	6159      	streq	r1, [r3, #20]
		device.Endpoints[number].OutBufferLength = len;
 80010fc:	619a      	streq	r2, [r3, #24]
	}
}
 80010fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	20000ba8 	.word	0x20000ba8

08001108 <XMC_USBD_lReadFifo>:
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <XMC_USBD_lReadFifo+0x94>)
 800110a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800110e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001112:	681b      	ldr	r3, [r3, #0]
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8001114:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001118:	d100      	bne.n	800111c <XMC_USBD_lReadFifo+0x14>
 800111a:	4770      	bx	lr
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 800111c:	4a1f      	ldr	r2, [pc, #124]	; (800119c <XMC_USBD_lReadFifo+0x94>)
 800111e:	2334      	movs	r3, #52	; 0x34
 8001120:	fb03 2300 	mla	r3, r3, r0, r2
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f7      	beq.n	800111a <XMC_USBD_lReadFifo+0x12>
{
 800112a:	b5f0      	push	{r4, r5, r6, r7, lr}
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 800112c:	f8d2 71e0 	ldr.w	r7, [r2, #480]	; 0x1e0
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001130:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 8001134:	d00a      	beq.n	800114c <XMC_USBD_lReadFifo+0x44>
 8001136:	2300      	movs	r3, #0
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8001138:	2534      	movs	r5, #52	; 0x34
 800113a:	fb05 2500 	mla	r5, r5, r0, r2
 800113e:	683c      	ldr	r4, [r7, #0]
 8001140:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001142:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    for (i = 0U;i < word_count; i++)
 8001146:	3301      	adds	r3, #1
 8001148:	459c      	cmp	ip, r3
 800114a:	d1f8      	bne.n	800113e <XMC_USBD_lReadFifo+0x36>
  temp_word_count = (word_count << 2U);
 800114c:	f021 0603 	bic.w	r6, r1, #3
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8001150:	42b1      	cmp	r1, r6
 8001152:	d017      	beq.n	8001184 <XMC_USBD_lReadFifo+0x7c>
    {
      temp_data = *fifo;
 8001154:	683d      	ldr	r5, [r7, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001156:	d915      	bls.n	8001184 <XMC_USBD_lReadFifo+0x7c>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001158:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800115c:	1b9e      	subs	r6, r3, r6
 800115e:	eb06 0e01 	add.w	lr, r6, r1
 8001162:	2400      	movs	r4, #0
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <XMC_USBD_lReadFifo+0x94>)
 8001166:	2734      	movs	r7, #52	; 0x34
 8001168:	fb07 2700 	mla	r7, r7, r0, r2
 800116c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001170:	fa0c f204 	lsl.w	r2, ip, r4
 8001174:	402a      	ands	r2, r5
 8001176:	40e2      	lsrs	r2, r4
 8001178:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800117a:	54f2      	strb	r2, [r6, r3]
 800117c:	3408      	adds	r4, #8
 800117e:	3301      	adds	r3, #1
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001180:	4573      	cmp	r3, lr
 8001182:	d1f5      	bne.n	8001170 <XMC_USBD_lReadFifo+0x68>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <XMC_USBD_lReadFifo+0x94>)
 8001186:	2234      	movs	r2, #52	; 0x34
 8001188:	fb02 3000 	mla	r0, r2, r0, r3
 800118c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800118e:	440b      	add	r3, r1
 8001190:	62c3      	str	r3, [r0, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001192:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001194:	4419      	add	r1, r3
 8001196:	6241      	str	r1, [r0, #36]	; 0x24
  }
}
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	bf00      	nop
 800119c:	20000cec 	.word	0x20000cec

080011a0 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 80011a0:	b082      	sub	sp, #8
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	9301      	str	r3, [sp, #4]
  /*flush fifo */
  data.b.txfflsh = 1U;
 80011a6:	9b01      	ldr	r3, [sp, #4]
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	9301      	str	r3, [sp, #4]
  data.b.txfnum = fifo_num;
 80011ae:	9b01      	ldr	r3, [sp, #4]
 80011b0:	f360 138a 	bfi	r3, r0, #6, #5
 80011b4:	9301      	str	r3, [sp, #4]
  xmc_device.global_register->grstctl = data.d32;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <XMC_USBD_lFlushTXFifo+0x48>)
 80011b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011bc:	9a01      	ldr	r2, [sp, #4]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  for (count = 0U;count < 1000U; count++){}
 80011c4:	3b01      	subs	r3, #1
 80011c6:	d1fd      	bne.n	80011c4 <XMC_USBD_lFlushTXFifo+0x24>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <XMC_USBD_lFlushTXFifo+0x48>)
 80011ca:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 80011ce:	6913      	ldr	r3, [r2, #16]
 80011d0:	9301      	str	r3, [sp, #4]
  } while (data.b.txfflsh);
 80011d2:	9b01      	ldr	r3, [sp, #4]
 80011d4:	f013 0f20 	tst.w	r3, #32
 80011d8:	d1f9      	bne.n	80011ce <XMC_USBD_lFlushTXFifo+0x2e>
 80011da:	f240 33e9 	movw	r3, #1001	; 0x3e9
    count = 0U;
  while (count++ < 1000U)
 80011de:	3b01      	subs	r3, #1
 80011e0:	d1fd      	bne.n	80011de <XMC_USBD_lFlushTXFifo+0x3e>
  {
    /* wait 3 phy clocks */
  }
}
 80011e2:	b002      	add	sp, #8
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000cec 	.word	0x20000cec

080011ec <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 80011ec:	b082      	sub	sp, #8
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	9301      	str	r3, [sp, #4]
  data.b.rxfflsh = 1U;
 80011f2:	9b01      	ldr	r3, [sp, #4]
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	9301      	str	r3, [sp, #4]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <XMC_USBD_lFlushRXFifo+0x3c>)
 80011fc:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 8001200:	9901      	ldr	r1, [sp, #4]
 8001202:	6111      	str	r1, [r2, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
    data.d32 = xmc_device.global_register->grstctl;
 8001204:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
{
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    for (count = 0U; count < 1000U; count++){}
 800120c:	3b01      	subs	r3, #1
 800120e:	d1fd      	bne.n	800120c <XMC_USBD_lFlushRXFifo+0x20>
    data.d32 = xmc_device.global_register->grstctl;
 8001210:	6913      	ldr	r3, [r2, #16]
 8001212:	9301      	str	r3, [sp, #4]
  } while (data.b.rxfflsh);
 8001214:	9b01      	ldr	r3, [sp, #4]
 8001216:	f013 0f10 	tst.w	r3, #16
 800121a:	d1f5      	bne.n	8001208 <XMC_USBD_lFlushRXFifo+0x1c>
 800121c:	f240 33e9 	movw	r3, #1001	; 0x3e9
  count = 0U;
  while (count++ < 1000U)
 8001220:	3b01      	subs	r3, #1
 8001222:	d1fd      	bne.n	8001220 <XMC_USBD_lFlushRXFifo+0x34>
  {
    /* wait 3 phy clocks */
  }
}
 8001224:	b002      	add	sp, #8
 8001226:	4770      	bx	lr
 8001228:	20000cec 	.word	0x20000cec

0800122c <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 800122c:	b430      	push	{r4, r5}
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 800122e:	2100      	movs	r1, #0
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001230:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001232:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001234:	6883      	ldr	r3, [r0, #8]
 8001236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800123a:	1aa5      	subs	r5, r4, r2
 800123c:	429d      	cmp	r5, r3
  {
    ep->xferLength += ep->maxTransferSize;
 800123e:	bf86      	itte	hi
 8001240:	189b      	addhi	r3, r3, r2
 8001242:	6283      	strhi	r3, [r0, #40]	; 0x28
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 8001244:	6284      	strls	r4, [r0, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 8001246:	7803      	ldrb	r3, [r0, #0]
 8001248:	f013 0f0f 	tst.w	r3, #15
 800124c:	d12a      	bne.n	80012a4 <XMC_USBD_lStartReadXfer+0x78>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
 800124e:	2301      	movs	r3, #1
 8001250:	f363 41d4 	bfi	r1, r3, #19, #2
    ep0_data->b.supcnt = 0x3U;
 8001254:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8001258:	f364 0106 	bfi	r1, r4, #0, #7
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <XMC_USBD_lStartReadXfer+0xa4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	7b5b      	ldrb	r3, [r3, #13]
 8001262:	b94b      	cbnz	r3, 8001278 <XMC_USBD_lStartReadXfer+0x4c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8001264:	7803      	ldrb	r3, [r0, #0]
 8001266:	f003 020f 	and.w	r2, r3, #15
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <XMC_USBD_lStartReadXfer+0xa8>)
 800126c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001270:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001274:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001276:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8001278:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <XMC_USBD_lStartReadXfer+0xa8>)
 800127a:	7803      	ldrb	r3, [r0, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001284:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001288:	6119      	str	r1, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800128a:	7803      	ldrb	r3, [r0, #0]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001294:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 8001298:	6813      	ldr	r3, [r2, #0]
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
 800129a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bc30      	pop	{r4, r5}
 80012a2:	4770      	bx	lr
    if (ep->xferLength == 0U)
 80012a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80012a6:	b92b      	cbnz	r3, 80012b4 <XMC_USBD_lStartReadXfer+0x88>
      data.b.xfersize = 0U;
 80012a8:	f36f 0112 	bfc	r1, #0, #19
      data.b.pktcnt = 1U;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f363 41dc 	bfi	r1, r3, #19, #10
 80012b2:	e7d3      	b.n	800125c <XMC_USBD_lStartReadXfer+0x30>
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 80012b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80012b6:	1a9b      	subs	r3, r3, r2
 80012b8:	6842      	ldr	r2, [r0, #4]
 80012ba:	f3c2 24c6 	ubfx	r4, r2, #11, #7
 80012be:	191a      	adds	r2, r3, r4
 80012c0:	3a01      	subs	r2, #1
 80012c2:	fbb2 f2f4 	udiv	r2, r2, r4
 80012c6:	f362 41dc 	bfi	r1, r2, #19, #10
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 80012ca:	f363 0112 	bfi	r1, r3, #0, #19
 80012ce:	e7c5      	b.n	800125c <XMC_USBD_lStartReadXfer+0x30>
 80012d0:	20000ce8 	.word	0x20000ce8
 80012d4:	20000cec 	.word	0x20000cec

080012d8 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 80012d8:	b470      	push	{r4, r5, r6}
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 80012da:	2100      	movs	r1, #0
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80012dc:	7803      	ldrb	r3, [r0, #0]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	336a      	adds	r3, #106	; 0x6a
 80012e4:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <XMC_USBD_lStartWriteXfer+0xd0>)
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	681a      	ldr	r2, [r3, #0]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 80012ec:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80012ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80012f0:	6883      	ldr	r3, [r0, #8]
 80012f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012f6:	1b2e      	subs	r6, r5, r4
 80012f8:	429e      	cmp	r6, r3
  {
    ep->xferLength = ep->xferTotal;
 80012fa:	bf32      	itee	cc
 80012fc:	6285      	strcc	r5, [r0, #40]	; 0x28
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 80012fe:	191b      	addcs	r3, r3, r4
 8001300:	6283      	strcs	r3, [r0, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8001302:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001304:	b333      	cbz	r3, 8001354 <XMC_USBD_lStartWriteXfer+0x7c>
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8001306:	7804      	ldrb	r4, [r0, #0]
 8001308:	f014 0f0f 	tst.w	r4, #15
 800130c:	d13a      	bne.n	8001384 <XMC_USBD_lStartWriteXfer+0xac>
    {
      size.b.pktcnt = 1U;
 800130e:	2401      	movs	r4, #1
 8001310:	f364 41dc 	bfi	r1, r4, #19, #10
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001314:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001316:	1b1b      	subs	r3, r3, r4
 8001318:	f363 0112 	bfi	r1, r3, #0, #19
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <XMC_USBD_lStartWriteXfer+0xd4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	7b5c      	ldrb	r4, [r3, #13]
 8001322:	b944      	cbnz	r4, 8001336 <XMC_USBD_lStartWriteXfer+0x5e>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8001324:	7804      	ldrb	r4, [r0, #0]
 8001326:	f004 040f 	and.w	r4, r4, #15
 800132a:	346a      	adds	r4, #106	; 0x6a
 800132c:	4d1e      	ldr	r5, [pc, #120]	; (80013a8 <XMC_USBD_lStartWriteXfer+0xd0>)
 800132e:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8001332:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001334:	6165      	str	r5, [r4, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001336:	7b5b      	ldrb	r3, [r3, #13]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d110      	bne.n	800135e <XMC_USBD_lStartWriteXfer+0x86>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <XMC_USBD_lStartWriteXfer+0xd0>)
 800133e:	f8d3 51a4 	ldr.w	r5, [r3, #420]	; 0x1a4
 8001342:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001344:	7803      	ldrb	r3, [r0, #0]
 8001346:	f003 040f 	and.w	r4, r3, #15
 800134a:	2301      	movs	r3, #1
 800134c:	40a3      	lsls	r3, r4
 800134e:	4333      	orrs	r3, r6
 8001350:	636b      	str	r3, [r5, #52]	; 0x34
 8001352:	e004      	b.n	800135e <XMC_USBD_lStartWriteXfer+0x86>
    size.b.xfersize = 0U;
 8001354:	f36f 0112 	bfc	r1, #0, #19
    size.b.pktcnt = 1U;
 8001358:	2301      	movs	r3, #1
 800135a:	f363 41dc 	bfi	r1, r3, #19, #10
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 800135e:	4c12      	ldr	r4, [pc, #72]	; (80013a8 <XMC_USBD_lStartWriteXfer+0xd0>)
 8001360:	7803      	ldrb	r3, [r0, #0]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	336a      	adds	r3, #106	; 0x6a
 8001368:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800136c:	6119      	str	r1, [r3, #16]
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 800136e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001372:	7803      	ldrb	r3, [r0, #0]
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	336a      	adds	r3, #106	; 0x6a
 800137a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bc70      	pop	{r4, r5, r6}
 8001382:	4770      	bx	lr
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001384:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8001386:	1b5c      	subs	r4, r3, r5
 8001388:	f364 0112 	bfi	r1, r4, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 800138c:	6844      	ldr	r4, [r0, #4]
 800138e:	f3c4 24c6 	ubfx	r4, r4, #11, #7
 8001392:	1b5b      	subs	r3, r3, r5
 8001394:	1e65      	subs	r5, r4, #1
 8001396:	b2ad      	uxth	r5, r5
 8001398:	fa15 f383 	uxtah	r3, r5, r3
 800139c:	fb93 f3f4 	sdiv	r3, r3, r4
 80013a0:	f363 41dc 	bfi	r1, r3, #19, #10
 80013a4:	e7ba      	b.n	800131c <XMC_USBD_lStartWriteXfer+0x44>
 80013a6:	bf00      	nop
 80013a8:	20000cec 	.word	0x20000cec
 80013ac:	20000ce8 	.word	0x20000ce8

080013b0 <XMC_USBD_GetCapabilities>:
  cap.event_remote_wakeup = 1U;
  cap.event_reset = 1U;
  cap.event_resume = 1U;
  cap.event_suspend = 1U;
  cap.reserved = 0U;
  return cap;
 80013b0:	201f      	movs	r0, #31
 80013b2:	f36f 1045 	bfc	r0, #5, #1
 80013b6:	f440 70e0 	orr.w	r0, r0, #448	; 0x1c0
}
 80013ba:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80013be:	4770      	bx	lr

080013c0 <XMC_USBD_DeviceConnect>:
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <XMC_USBD_DeviceConnect+0x14>)
 80013c2:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80013c6:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 0U;
 80013c8:	f36f 0341 	bfc	r3, #1, #1
  xmc_device.device_register->dctl = dctl.d32;
 80013cc:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 80013ce:	2000      	movs	r0, #0
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000cec 	.word	0x20000cec

080013d8 <XMC_USBD_DeviceDisconnect>:
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <XMC_USBD_DeviceDisconnect+0x14>)
 80013da:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80013de:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 80013e0:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 80013e4:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 80013e6:	2000      	movs	r0, #0
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000cec 	.word	0x20000cec

080013f0 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 80013f0:	f000 000f 	and.w	r0, r0, #15
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <XMC_USBD_EndpointReadStart+0x54>)
 80013f6:	2334      	movs	r3, #52	; 0x34
 80013f8:	fb03 2300 	mla	r3, r3, r0, r2
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f013 0f10 	tst.w	r3, #16
 8001402:	d11a      	bne.n	800143a <XMC_USBD_EndpointReadStart+0x4a>
 8001404:	2334      	movs	r3, #52	; 0x34
 8001406:	fb03 2300 	mla	r3, r3, r0, r2
 800140a:	791b      	ldrb	r3, [r3, #4]
 800140c:	f013 0f04 	tst.w	r3, #4
 8001410:	d015      	beq.n	800143e <XMC_USBD_EndpointReadStart+0x4e>
{
 8001412:	b570      	push	{r4, r5, r6, lr}
    if (size > ep->outBufferSize)
    {
      size = ep->outBufferSize;
    }
    /* set ep values */
    ep->xferTotal = size;
 8001414:	2634      	movs	r6, #52	; 0x34
 8001416:	fb06 2300 	mla	r3, r6, r0, r2
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	4291      	cmp	r1, r2
 800141e:	bf28      	it	cs
 8001420:	4611      	movcs	r1, r2
 8001422:	6319      	str	r1, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 8001424:	2400      	movs	r4, #0
 8001426:	62dc      	str	r4, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 8001428:	629c      	str	r4, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 800142e:	611c      	str	r4, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fefb 	bl	800122c <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 8001436:	4620      	mov	r0, r4
  }
  return result;
}
 8001438:	bd70      	pop	{r4, r5, r6, pc}
    result = XMC_USBD_STATUS_ERROR;
 800143a:	2001      	movs	r0, #1
 800143c:	4770      	bx	lr
 800143e:	2001      	movs	r0, #1
}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000cec 	.word	0x20000cec

08001448 <XMC_USBD_DeviceSetAddress>:
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <XMC_USBD_DeviceSetAddress+0x14>)
 800144a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800144e:	681a      	ldr	r2, [r3, #0]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8001450:	b911      	cbnz	r1, 8001458 <XMC_USBD_DeviceSetAddress+0x10>
  {
    data.b.devaddr = address;
 8001452:	f360 120a 	bfi	r2, r0, #4, #7
    xmc_device.device_register->dcfg = data.d32;
 8001456:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
}
 8001458:	2000      	movs	r0, #0
 800145a:	4770      	bx	lr
 800145c:	20000cec 	.word	0x20000cec

08001460 <XMC_USBD_EndpointStall>:
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8001460:	f000 020f 	and.w	r2, r0, #15
  if (stall)
 8001464:	b351      	cbz	r1, 80014bc <XMC_USBD_EndpointStall+0x5c>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8001466:	f010 0f80 	tst.w	r0, #128	; 0x80
 800146a:	d118      	bne.n	800149e <XMC_USBD_EndpointStall+0x3e>
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <XMC_USBD_EndpointStall+0xb8>)
 800146e:	2134      	movs	r1, #52	; 0x34
 8001470:	fb01 f102 	mul.w	r1, r1, r2
 8001474:	5c59      	ldrb	r1, [r3, r1]
 8001476:	f001 010f 	and.w	r1, r1, #15
 800147a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800147e:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
 8001482:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8001488:	600b      	str	r3, [r1, #0]
    }
    ep->isStalled = 1U;
 800148a:	4923      	ldr	r1, [pc, #140]	; (8001518 <XMC_USBD_EndpointStall+0xb8>)
 800148c:	2334      	movs	r3, #52	; 0x34
 800148e:	fb03 1202 	mla	r2, r3, r2, r1
 8001492:	7913      	ldrb	r3, [r2, #4]
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	7113      	strb	r3, [r2, #4]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
	}
	return XMC_USBD_STATUS_OK;
}
 800149a:	2000      	movs	r0, #0
 800149c:	4770      	bx	lr
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800149e:	491e      	ldr	r1, [pc, #120]	; (8001518 <XMC_USBD_EndpointStall+0xb8>)
 80014a0:	2334      	movs	r3, #52	; 0x34
 80014a2:	fb03 f302 	mul.w	r3, r3, r2
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	336a      	adds	r3, #106	; 0x6a
 80014ae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80014b2:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80014b8:	600b      	str	r3, [r1, #0]
 80014ba:	e7e6      	b.n	800148a <XMC_USBD_EndpointStall+0x2a>
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80014bc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80014c0:	d119      	bne.n	80014f6 <XMC_USBD_EndpointStall+0x96>
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <XMC_USBD_EndpointStall+0xb8>)
 80014c4:	2134      	movs	r1, #52	; 0x34
 80014c6:	fb01 f102 	mul.w	r1, r1, r2
 80014ca:	5c59      	ldrb	r1, [r3, r1]
 80014cc:	f001 010f 	and.w	r1, r1, #15
 80014d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80014d4:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
 80014d8:	680b      	ldr	r3, [r1, #0]
			data.b.stall = 0U;
 80014da:	f023 5381 	bic.w	r3, r3, #270532608	; 0x10200000
			data.b.setd0pid = 1U; /* reset pid to 0 */
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80014e2:	600b      	str	r3, [r1, #0]
		ep->isStalled = 0U;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <XMC_USBD_EndpointStall+0xb8>)
 80014e6:	2134      	movs	r1, #52	; 0x34
 80014e8:	fb01 3202 	mla	r2, r1, r2, r3
 80014ec:	7913      	ldrb	r3, [r2, #4]
 80014ee:	f36f 1345 	bfc	r3, #5, #1
 80014f2:	7113      	strb	r3, [r2, #4]
 80014f4:	e7d1      	b.n	800149a <XMC_USBD_EndpointStall+0x3a>
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <XMC_USBD_EndpointStall+0xb8>)
 80014f8:	2334      	movs	r3, #52	; 0x34
 80014fa:	fb03 f302 	mul.w	r3, r3, r2
 80014fe:	5ccb      	ldrb	r3, [r1, r3]
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	336a      	adds	r3, #106	; 0x6a
 8001506:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800150a:	680b      	ldr	r3, [r1, #0]
			data.b.stall = 0U;
 800150c:	f023 5381 	bic.w	r3, r3, #270532608	; 0x10200000
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8001514:	600b      	str	r3, [r1, #0]
 8001516:	e7e5      	b.n	80014e4 <XMC_USBD_EndpointStall+0x84>
 8001518:	20000cec 	.word	0x20000cec

0800151c <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800151c:	f000 000f 	and.w	r0, r0, #15
  if (ep->address_u.address_st.direction)
 8001520:	2334      	movs	r3, #52	; 0x34
 8001522:	fb03 f300 	mul.w	r3, r3, r0
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <XMC_USBD_EndpointAbort+0x50>)
 8001528:	56d3      	ldrsb	r3, [r2, r3]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db16      	blt.n	800155c <XMC_USBD_EndpointAbort+0x40>
  {
    ep->inInUse = 0U;
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
 800152e:	4a0f      	ldr	r2, [pc, #60]	; (800156c <XMC_USBD_EndpointAbort+0x50>)
 8001530:	2334      	movs	r3, #52	; 0x34
 8001532:	fb03 2300 	mla	r3, r3, r0, r2
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	f36f 1204 	bfc	r2, #4, #1
 800153c:	605a      	str	r2, [r3, #4]
  }
  ep->isStalled = 0U;
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <XMC_USBD_EndpointAbort+0x50>)
 8001540:	2334      	movs	r3, #52	; 0x34
 8001542:	fb03 2300 	mla	r3, r3, r0, r2
 8001546:	791a      	ldrb	r2, [r3, #4]
 8001548:	f36f 1245 	bfc	r2, #5, #1
 800154c:	711a      	strb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
 800154e:	2000      	movs	r0, #0
 8001550:	6118      	str	r0, [r3, #16]
  ep->outOffset = 0U;
 8001552:	6198      	str	r0, [r3, #24]
  ep->xferLength = 0U;
 8001554:	6298      	str	r0, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8001556:	62d8      	str	r0, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8001558:	6318      	str	r0, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
}
 800155a:	4770      	bx	lr
    ep->inInUse = 0U;
 800155c:	2334      	movs	r3, #52	; 0x34
 800155e:	fb03 2300 	mla	r3, r3, r0, r2
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	f36f 02c3 	bfc	r2, #3, #1
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	e7e8      	b.n	800153e <XMC_USBD_EndpointAbort+0x22>
 800156c:	20000cec 	.word	0x20000cec

08001570 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8001572:	f000 000f 	and.w	r0, r0, #15
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001576:	4c42      	ldr	r4, [pc, #264]	; (8001680 <XMC_USBD_EndpointUnconfigure+0x110>)
 8001578:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800157c:	69db      	ldr	r3, [r3, #28]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 800157e:	2234      	movs	r2, #52	; 0x34
 8001580:	fb02 4200 	mla	r2, r2, r0, r4
 8001584:	7912      	ldrb	r2, [r2, #4]
 8001586:	f012 0f04 	tst.w	r2, #4
 800158a:	d076      	beq.n	800167a <XMC_USBD_EndpointUnconfigure+0x10a>
 800158c:	2100      	movs	r1, #0
 800158e:	461f      	mov	r7, r3
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001590:	46a6      	mov	lr, r4
 8001592:	2534      	movs	r5, #52	; 0x34
 8001594:	fb05 f500 	mul.w	r5, r5, r0
 8001598:	1962      	adds	r2, r4, r5
 800159a:	5d64      	ldrb	r4, [r4, r5]
 800159c:	f004 040f 	and.w	r4, r4, #15
 80015a0:	f04f 0c01 	mov.w	ip, #1
 80015a4:	fa0c fc04 	lsl.w	ip, ip, r4
     result = XMC_USBD_STATUS_ERROR;
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 80015a8:	f36f 31cf 	bfc	r1, #15, #1
    data.b.epdis =  1U;
    data.b.snak =  1U;
 80015ac:	f041 4190 	orr.w	r1, r1, #1207959552	; 0x48000000
    data.b.stall =  0U;
 80015b0:	f36f 5155 	bfc	r1, #21, #1
    ep->isConfigured =  0U;
 80015b4:	7916      	ldrb	r6, [r2, #4]
    ep->isStalled =  0U;
 80015b6:	f006 06fb 	and.w	r6, r6, #251	; 0xfb
 80015ba:	f36f 1645 	bfc	r6, #5, #1
 80015be:	7116      	strb	r6, [r2, #4]
    ep->outInUse =  0U;
 80015c0:	6856      	ldr	r6, [r2, #4]
 80015c2:	f36f 1604 	bfc	r6, #4, #1
 80015c6:	6056      	str	r6, [r2, #4]
    ep->inInUse =  0U;
 80015c8:	6856      	ldr	r6, [r2, #4]
 80015ca:	f36f 06c3 	bfc	r6, #3, #1
 80015ce:	6056      	str	r6, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80015d0:	f91e 2005 	ldrsb.w	r2, [lr, r5]
 80015d4:	2a00      	cmp	r2, #0
 80015d6:	db06      	blt.n	80015e6 <XMC_USBD_EndpointUnconfigure+0x76>
 80015d8:	2234      	movs	r2, #52	; 0x34
 80015da:	fb02 e200 	mla	r2, r2, r0, lr
 80015de:	7912      	ldrb	r2, [r2, #4]
 80015e0:	f012 0f03 	tst.w	r2, #3
 80015e4:	d115      	bne.n	8001612 <XMC_USBD_EndpointUnconfigure+0xa2>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80015e6:	4d26      	ldr	r5, [pc, #152]	; (8001680 <XMC_USBD_EndpointUnconfigure+0x110>)
 80015e8:	346a      	adds	r4, #106	; 0x6a
 80015ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80015ee:	6011      	str	r1, [r2, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 80015f0:	ea23 020c 	bic.w	r2, r3, ip
 80015f4:	f362 070f 	bfi	r7, r2, #0, #16
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80015f8:	2234      	movs	r2, #52	; 0x34
 80015fa:	fb02 f200 	mul.w	r2, r2, r0
 80015fe:	56aa      	ldrsb	r2, [r5, r2]
 8001600:	2a00      	cmp	r2, #0
 8001602:	da06      	bge.n	8001612 <XMC_USBD_EndpointUnconfigure+0xa2>
 8001604:	2234      	movs	r2, #52	; 0x34
 8001606:	fb02 5200 	mla	r2, r2, r0, r5
 800160a:	7912      	ldrb	r2, [r2, #4]
 800160c:	f012 0f03 	tst.w	r2, #3
 8001610:	d116      	bne.n	8001640 <XMC_USBD_EndpointUnconfigure+0xd0>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8001612:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <XMC_USBD_EndpointUnconfigure+0x110>)
 8001614:	2434      	movs	r4, #52	; 0x34
 8001616:	fb04 f400 	mul.w	r4, r4, r0
 800161a:	5d14      	ldrb	r4, [r2, r4]
 800161c:	f004 040f 	and.w	r4, r4, #15
 8001620:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001624:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 8001628:	6011      	str	r1, [r2, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 800162a:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800162e:	ea23 030c 	bic.w	r3, r3, ip
 8001632:	f363 471f 	bfi	r7, r3, #16, #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <XMC_USBD_EndpointUnconfigure+0x114>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	7b5b      	ldrb	r3, [r3, #13]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d014      	beq.n	800166a <XMC_USBD_EndpointUnconfigure+0xfa>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <XMC_USBD_EndpointUnconfigure+0x110>)
 8001642:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001646:	61d7      	str	r7, [r2, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8001648:	2234      	movs	r2, #52	; 0x34
 800164a:	fb02 3000 	mla	r0, r2, r0, r3
 800164e:	8881      	ldrh	r1, [r0, #4]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001650:	f3c1 1183 	ubfx	r1, r1, #6, #4
 8001654:	2201      	movs	r2, #1
 8001656:	fa02 f101 	lsl.w	r1, r2, r1
 800165a:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 800165e:	ea22 0201 	bic.w	r2, r2, r1
 8001662:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result = XMC_USBD_STATUS_OK;
 8001666:	2000      	movs	r0, #0
  }
  return result;
}
 8001668:	bdf0      	pop	{r4, r5, r6, r7, pc}
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <XMC_USBD_EndpointUnconfigure+0x110>)
 800166c:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001670:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001672:	ea23 030c 	bic.w	r3, r3, ip
 8001676:	6353      	str	r3, [r2, #52]	; 0x34
 8001678:	e7e2      	b.n	8001640 <XMC_USBD_EndpointUnconfigure+0xd0>
     result = XMC_USBD_STATUS_ERROR;
 800167a:	2001      	movs	r0, #1
 800167c:	e7f4      	b.n	8001668 <XMC_USBD_EndpointUnconfigure+0xf8>
 800167e:	bf00      	nop
 8001680:	20000cec 	.word	0x20000cec
 8001684:	20000ce8 	.word	0x20000ce8

08001688 <XMC_USBD_GetFrameNumber>:
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <XMC_USBD_GetFrameNumber+0x10>)
 800168a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800168e:	6898      	ldr	r0, [r3, #8]
  result = (uint16_t)dsts.b.soffn;
  return result;
}
 8001690:	f3c0 200d 	ubfx	r0, r0, #8, #14
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000cec 	.word	0x20000cec

0800169c <XMC_USBD_IsEnumDone>:
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <XMC_USBD_IsEnumDone+0x14>)
 800169e:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
 80016a2:	f000 0005 	and.w	r0, r0, #5
}
 80016a6:	2805      	cmp	r0, #5
 80016a8:	bf14      	ite	ne
 80016aa:	2000      	movne	r0, #0
 80016ac:	2001      	moveq	r0, #1
 80016ae:	4770      	bx	lr
 80016b0:	20000cec 	.word	0x20000cec

080016b4 <XMC_USBD_Uninitialize>:
{
 80016b4:	b508      	push	{r3, lr}
	dctl.d32 = xmc_device.device_register->dctl;
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <XMC_USBD_Uninitialize+0x20>)
 80016b8:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 80016bc:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 80016be:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 80016c2:	6053      	str	r3, [r2, #4]
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 80016c4:	f44f 7202 	mov.w	r2, #520	; 0x208
 80016c8:	2100      	movs	r1, #0
 80016ca:	f002 ffad 	bl	8004628 <memset>
}
 80016ce:	2000      	movs	r0, #0
 80016d0:	bd08      	pop	{r3, pc}
 80016d2:	bf00      	nop
 80016d4:	20000cec 	.word	0x20000cec

080016d8 <XMC_USBD_EndpointConfigure>:
{
 80016d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016dc:	b083      	sub	sp, #12
 80016de:	4607      	mov	r7, r0
 80016e0:	4689      	mov	r9, r1
 80016e2:	4616      	mov	r6, r2
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80016e4:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8001958 <XMC_USBD_EndpointConfigure+0x280>
 80016e8:	f8d8 31a4 	ldr.w	r3, [r8, #420]	; 0x1a4
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	469a      	mov	sl, r3
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80016f2:	f000 050f 	and.w	r5, r0, #15
 80016f6:	2234      	movs	r2, #52	; 0x34
 80016f8:	fb02 fb05 	mul.w	fp, r2, r5
 80016fc:	eb0b 0408 	add.w	r4, fp, r8
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8001700:	2100      	movs	r1, #0
 8001702:	4620      	mov	r0, r4
 8001704:	f002 ff90 	bl	8004628 <memset>
  ep->address_u.address = ep_addr;
 8001708:	f80b 7008 	strb.w	r7, [fp, r8]
  ep->isConfigured = 1U;
 800170c:	7923      	ldrb	r3, [r4, #4]
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	7123      	strb	r3, [r4, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8001714:	6863      	ldr	r3, [r4, #4]
 8001716:	f366 23d1 	bfi	r3, r6, #11, #7
 800171a:	6063      	str	r3, [r4, #4]
  if (ep->address_u.address != 0U)
 800171c:	2f00      	cmp	r7, #0
 800171e:	d044      	beq.n	80017aa <XMC_USBD_EndpointConfigure+0xd2>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8001720:	4621      	mov	r1, r4
 8001722:	68a4      	ldr	r4, [r4, #8]
 8001724:	f64f 7cc0 	movw	ip, #65472	; 0xffc0
 8001728:	f36c 0412 	bfi	r4, ip, #0, #19
 800172c:	608c      	str	r4, [r1, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 800172e:	f818 300b 	ldrb.w	r3, [r8, fp]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	0218      	lsls	r0, r3, #8
 8001738:	4a85      	ldr	r2, [pc, #532]	; (8001950 <XMC_USBD_EndpointConfigure+0x278>)
 800173a:	1814      	adds	r4, r2, r0
 800173c:	61cc      	str	r4, [r1, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800173e:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 8001742:	4402      	add	r2, r0
 8001744:	60ca      	str	r2, [r1, #12]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001746:	4a83      	ldr	r2, [pc, #524]	; (8001954 <XMC_USBD_EndpointConfigure+0x27c>)
 8001748:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800174c:	6208      	str	r0, [r1, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 800174e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001752:	69d2      	ldr	r2, [r2, #28]
 8001754:	614a      	str	r2, [r1, #20]
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001756:	f017 0f80 	tst.w	r7, #128	; 0x80
 800175a:	d043      	beq.n	80017e4 <XMC_USBD_EndpointConfigure+0x10c>
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800175c:	336a      	adds	r3, #106	; 0x6a
 800175e:	4a7e      	ldr	r2, [pc, #504]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 8001760:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001764:	6820      	ldr	r0, [r4, #0]
		data.b.usbactep = 1U;
 8001766:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 800176a:	f369 4093 	bfi	r0, r9, #18, #2
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 800176e:	f1b9 0f00 	cmp.w	r9, #0
 8001772:	f000 80e2 	beq.w	800193a <XMC_USBD_EndpointConfigure+0x262>
			data.b.mps = ep_max_packet_size;
 8001776:	f366 000a 	bfi	r0, r6, #0, #11
		data.b.setd0pid = 1U;
 800177a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
		data.b.stall = 0U;
 800177e:	f36f 5055 	bfc	r0, #21, #1
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001782:	4b75      	ldr	r3, [pc, #468]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 8001784:	f8b3 11fc 	ldrh.w	r1, [r3, #508]	; 0x1fc
 8001788:	f011 0f01 	tst.w	r1, #1
 800178c:	d071      	beq.n	8001872 <XMC_USBD_EndpointConfigure+0x19a>
    i++;
 800178e:	2301      	movs	r3, #1
    mask = (uint16_t)(mask << 1U);
 8001790:	2202      	movs	r2, #2
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001792:	4211      	tst	r1, r2
 8001794:	d06f      	beq.n	8001876 <XMC_USBD_EndpointConfigure+0x19e>
    mask = (uint16_t)(mask << 1U);
 8001796:	0052      	lsls	r2, r2, #1
 8001798:	b292      	uxth	r2, r2
    i++;
 800179a:	3301      	adds	r3, #1
 800179c:	b2db      	uxtb	r3, r3
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 800179e:	2b07      	cmp	r3, #7
 80017a0:	d1f7      	bne.n	8001792 <XMC_USBD_EndpointConfigure+0xba>
  if ((xmc_device.txfifomsk & mask) == 0U)
 80017a2:	4211      	tst	r1, r2
 80017a4:	d067      	beq.n	8001876 <XMC_USBD_EndpointConfigure+0x19e>
  uint8_t result = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e069      	b.n	800187e <XMC_USBD_EndpointConfigure+0x1a6>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 80017aa:	4a6b      	ldr	r2, [pc, #428]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 80017ac:	2334      	movs	r3, #52	; 0x34
 80017ae:	fb03 f305 	mul.w	r3, r3, r5
 80017b2:	18d1      	adds	r1, r2, r3
 80017b4:	688c      	ldr	r4, [r1, #8]
 80017b6:	2740      	movs	r7, #64	; 0x40
 80017b8:	f367 0412 	bfi	r4, r7, #0, #19
 80017bc:	608c      	str	r4, [r1, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	0218      	lsls	r0, r3, #8
 80017c6:	4a62      	ldr	r2, [pc, #392]	; (8001950 <XMC_USBD_EndpointConfigure+0x278>)
 80017c8:	1814      	adds	r4, r2, r0
 80017ca:	61cc      	str	r4, [r1, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 80017cc:	f502 62e0 	add.w	r2, r2, #1792	; 0x700
 80017d0:	4402      	add	r2, r0
 80017d2:	60ca      	str	r2, [r1, #12]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 80017d4:	4a5f      	ldr	r2, [pc, #380]	; (8001954 <XMC_USBD_EndpointConfigure+0x27c>)
 80017d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017da:	6208      	str	r0, [r1, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 80017dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80017e0:	69d2      	ldr	r2, [r2, #28]
 80017e2:	614a      	str	r2, [r1, #20]
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80017e4:	f1b9 0f00 	cmp.w	r9, #0
 80017e8:	f000 809e 	beq.w	8001928 <XMC_USBD_EndpointConfigure+0x250>
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80017ec:	2334      	movs	r3, #52	; 0x34
 80017ee:	fb03 f305 	mul.w	r3, r3, r5
 80017f2:	4a59      	ldr	r2, [pc, #356]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 80017f4:	56d3      	ldrsb	r3, [r2, r3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db24      	blt.n	8001844 <XMC_USBD_EndpointConfigure+0x16c>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80017fa:	4b57      	ldr	r3, [pc, #348]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 80017fc:	2234      	movs	r2, #52	; 0x34
 80017fe:	fb02 f205 	mul.w	r2, r2, r5
 8001802:	5c9a      	ldrb	r2, [r3, r2]
 8001804:	f002 020f 	and.w	r2, r2, #15
 8001808:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800180c:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8001810:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 8001812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001816:	f369 4393 	bfi	r3, r9, #18, #2
			data.b.mps = ep_max_packet_size;
 800181a:	f366 030a 	bfi	r3, r6, #0, #11
		data.b.setd0pid = 1U;
 800181e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		data.b.stall =(uint8_t) 0U;
 8001822:	f36f 5355 	bfc	r3, #21, #1
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 8001826:	6013      	str	r3, [r2, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8001828:	2334      	movs	r3, #52	; 0x34
 800182a:	fb03 f505 	mul.w	r5, r3, r5
 800182e:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 8001830:	5d5b      	ldrb	r3, [r3, r5]
 8001832:	f003 020f 	and.w	r2, r3, #15
 8001836:	2301      	movs	r3, #1
 8001838:	4093      	lsls	r3, r2
 800183a:	9a01      	ldr	r2, [sp, #4]
 800183c:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8001840:	f363 4a1f 	bfi	sl, r3, #16, #16
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8001844:	4b44      	ldr	r3, [pc, #272]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 8001846:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800184a:	f8c3 a01c 	str.w	sl, [r3, #28]
}
 800184e:	2000      	movs	r0, #0
 8001850:	b003      	add	sp, #12
 8001852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch(ep_max_packet_size)
 8001856:	2e08      	cmp	r6, #8
 8001858:	d18f      	bne.n	800177a <XMC_USBD_EndpointConfigure+0xa2>
				data.b.mps = 0x3U;
 800185a:	2303      	movs	r3, #3
 800185c:	f363 000a 	bfi	r0, r3, #0, #11
				break;
 8001860:	e78b      	b.n	800177a <XMC_USBD_EndpointConfigure+0xa2>
				data.b.mps = 0x1U;
 8001862:	2301      	movs	r3, #1
 8001864:	f363 000a 	bfi	r0, r3, #0, #11
				break;
 8001868:	e787      	b.n	800177a <XMC_USBD_EndpointConfigure+0xa2>
				data.b.mps = 0x2U;
 800186a:	2302      	movs	r3, #2
 800186c:	f363 000a 	bfi	r0, r3, #0, #11
				break;
 8001870:	e783      	b.n	800177a <XMC_USBD_EndpointConfigure+0xa2>
  uint8_t i = 0U;
 8001872:	2300      	movs	r3, #0
  uint16_t mask = 1U;
 8001874:	2201      	movs	r2, #1
    xmc_device.txfifomsk |= mask;
 8001876:	430a      	orrs	r2, r1
 8001878:	4937      	ldr	r1, [pc, #220]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 800187a:	f8a1 21fc 	strh.w	r2, [r1, #508]	; 0x1fc
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4f35      	ldr	r7, [pc, #212]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 8001884:	2234      	movs	r2, #52	; 0x34
 8001886:	fb02 f205 	mul.w	r2, r2, r5
 800188a:	18b9      	adds	r1, r7, r2
 800188c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8001890:	f363 1c89 	bfi	ip, r3, #6, #4
 8001894:	f8a1 c004 	strh.w	ip, [r1, #4]
		data.b.txfnum = ep->txFifoNum;
 8001898:	f363 5099 	bfi	r0, r3, #22, #4
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 800189c:	6020      	str	r0, [r4, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800189e:	5cb9      	ldrb	r1, [r7, r2]
 80018a0:	f001 010f 	and.w	r1, r1, #15
 80018a4:	2301      	movs	r3, #1
 80018a6:	408b      	lsls	r3, r1
 80018a8:	9801      	ldr	r0, [sp, #4]
 80018aa:	4303      	orrs	r3, r0
 80018ac:	f363 0a0f 	bfi	sl, r3, #0, #16
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80018b0:	56bb      	ldrsb	r3, [r7, r2]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db16      	blt.n	80018e4 <XMC_USBD_EndpointConfigure+0x20c>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 80018b8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80018bc:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 80018c0:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 80018c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 80018c6:	f369 4393 	bfi	r3, r9, #18, #2
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80018ca:	f1b9 0f00 	cmp.w	r9, #0
 80018ce:	d1a4      	bne.n	800181a <XMC_USBD_EndpointConfigure+0x142>
			switch(ep_max_packet_size)
 80018d0:	2e10      	cmp	r6, #16
 80018d2:	d025      	beq.n	8001920 <XMC_USBD_EndpointConfigure+0x248>
 80018d4:	d91a      	bls.n	800190c <XMC_USBD_EndpointConfigure+0x234>
 80018d6:	2e20      	cmp	r6, #32
 80018d8:	d01e      	beq.n	8001918 <XMC_USBD_EndpointConfigure+0x240>
 80018da:	2e40      	cmp	r6, #64	; 0x40
 80018dc:	d19f      	bne.n	800181e <XMC_USBD_EndpointConfigure+0x146>
					data.b.mps = 0x0U;
 80018de:	f36f 030a 	bfc	r3, #0, #11
					break;
 80018e2:	e79c      	b.n	800181e <XMC_USBD_EndpointConfigure+0x146>
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80018e4:	f1b9 0f00 	cmp.w	r9, #0
 80018e8:	d1ac      	bne.n	8001844 <XMC_USBD_EndpointConfigure+0x16c>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 80018ec:	2234      	movs	r2, #52	; 0x34
 80018ee:	fb02 f205 	mul.w	r2, r2, r5
 80018f2:	5c9a      	ldrb	r2, [r3, r2]
 80018f4:	f002 020f 	and.w	r2, r2, #15
 80018f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80018fc:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8001900:	6813      	ldr	r3, [r2, #0]
		data.b.usbactep = 1U;
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001906:	f36f 4393 	bfc	r3, #18, #2
 800190a:	e7e1      	b.n	80018d0 <XMC_USBD_EndpointConfigure+0x1f8>
			switch(ep_max_packet_size)
 800190c:	2e08      	cmp	r6, #8
 800190e:	d186      	bne.n	800181e <XMC_USBD_EndpointConfigure+0x146>
					data.b.mps = 0x3U;
 8001910:	2103      	movs	r1, #3
 8001912:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001916:	e782      	b.n	800181e <XMC_USBD_EndpointConfigure+0x146>
					data.b.mps = 0x1U;
 8001918:	2101      	movs	r1, #1
 800191a:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 800191e:	e77e      	b.n	800181e <XMC_USBD_EndpointConfigure+0x146>
					data.b.mps = 0x2U;
 8001920:	2102      	movs	r1, #2
 8001922:	f361 030a 	bfi	r3, r1, #0, #11
					break;
 8001926:	e77a      	b.n	800181e <XMC_USBD_EndpointConfigure+0x146>
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001928:	336a      	adds	r3, #106	; 0x6a
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <XMC_USBD_EndpointConfigure+0x280>)
 800192c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001930:	6820      	ldr	r0, [r4, #0]
		data.b.usbactep = 1U;
 8001932:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
		data.b.eptype = (uint8_t)ep_type;
 8001936:	f36f 4093 	bfc	r0, #18, #2
			switch(ep_max_packet_size)
 800193a:	2e10      	cmp	r6, #16
 800193c:	d095      	beq.n	800186a <XMC_USBD_EndpointConfigure+0x192>
 800193e:	d98a      	bls.n	8001856 <XMC_USBD_EndpointConfigure+0x17e>
 8001940:	2e20      	cmp	r6, #32
 8001942:	d08e      	beq.n	8001862 <XMC_USBD_EndpointConfigure+0x18a>
 8001944:	2e40      	cmp	r6, #64	; 0x40
 8001946:	f47f af18 	bne.w	800177a <XMC_USBD_EndpointConfigure+0xa2>
				data.b.mps = 0x0U;
 800194a:	f36f 000a 	bfc	r0, #0, #11
				break;
 800194e:	e714      	b.n	800177a <XMC_USBD_EndpointConfigure+0xa2>
 8001950:	30000000 	.word	0x30000000
 8001954:	20000870 	.word	0x20000870
 8001958:	20000cec 	.word	0x20000cec

0800195c <XMC_USBD_EndpointRead>:
{
 800195c:	b570      	push	{r4, r5, r6, lr}
 800195e:	4606      	mov	r6, r0
 8001960:	4608      	mov	r0, r1
  if (length > ep->outBytesAvailable)
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <XMC_USBD_EndpointRead+0x44>)
 8001964:	2434      	movs	r4, #52	; 0x34
 8001966:	fb04 3406 	mla	r4, r4, r6, r3
 800196a:	6925      	ldr	r5, [r4, #16]
 800196c:	4295      	cmp	r5, r2
 800196e:	bf28      	it	cs
 8001970:	4615      	movcs	r5, r2
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8001972:	68e1      	ldr	r1, [r4, #12]
 8001974:	69a3      	ldr	r3, [r4, #24]
 8001976:	462a      	mov	r2, r5
 8001978:	4419      	add	r1, r3
 800197a:	f002 fdbb 	bl	80044f4 <memcpy>
  ep->outBytesAvailable -= length;
 800197e:	6923      	ldr	r3, [r4, #16]
 8001980:	1b5b      	subs	r3, r3, r5
 8001982:	6123      	str	r3, [r4, #16]
  if (ep->outBytesAvailable)
 8001984:	b93b      	cbnz	r3, 8001996 <XMC_USBD_EndpointRead+0x3a>
    ep->outOffset = 0U;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <XMC_USBD_EndpointRead+0x44>)
 8001988:	2234      	movs	r2, #52	; 0x34
 800198a:	fb02 3606 	mla	r6, r2, r6, r3
 800198e:	2300      	movs	r3, #0
 8001990:	61b3      	str	r3, [r6, #24]
}
 8001992:	4628      	mov	r0, r5
 8001994:	bd70      	pop	{r4, r5, r6, pc}
    ep->outOffset += length;
 8001996:	69a3      	ldr	r3, [r4, #24]
 8001998:	442b      	add	r3, r5
 800199a:	61a3      	str	r3, [r4, #24]
 800199c:	e7f9      	b.n	8001992 <XMC_USBD_EndpointRead+0x36>
 800199e:	bf00      	nop
 80019a0:	20000cec 	.word	0x20000cec

080019a4 <XMC_USBD_EndpointWrite>:
{
 80019a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a8:	f000 050f 	and.w	r5, r0, #15
  if (!ep->isConfigured)
 80019ac:	4817      	ldr	r0, [pc, #92]	; (8001a0c <XMC_USBD_EndpointWrite+0x68>)
 80019ae:	2334      	movs	r3, #52	; 0x34
 80019b0:	fb03 0305 	mla	r3, r3, r5, r0
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	f013 0f04 	tst.w	r3, #4
 80019ba:	d021      	beq.n	8001a00 <XMC_USBD_EndpointWrite+0x5c>
  else if (ep->inInUse == 1U)
 80019bc:	2334      	movs	r3, #52	; 0x34
 80019be:	fb03 0305 	mla	r3, r3, r5, r0
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f013 0f08 	tst.w	r3, #8
 80019c8:	d11d      	bne.n	8001a06 <XMC_USBD_EndpointWrite+0x62>
    if (length > ep->inBufferSize)
 80019ca:	f04f 0834 	mov.w	r8, #52	; 0x34
 80019ce:	fb08 0405 	mla	r4, r8, r5, r0
 80019d2:	6a26      	ldr	r6, [r4, #32]
 80019d4:	4296      	cmp	r6, r2
 80019d6:	bf28      	it	cs
 80019d8:	4616      	movcs	r6, r2
		memcpy(ep->inBuffer,(const void *)buffer,length);
 80019da:	4632      	mov	r2, r6
 80019dc:	69e0      	ldr	r0, [r4, #28]
 80019de:	f002 fd89 	bl	80044f4 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 80019e2:	69e3      	ldr	r3, [r4, #28]
 80019e4:	6263      	str	r3, [r4, #36]	; 0x24
    ep->xferTotal = length;
 80019e6:	6326      	str	r6, [r4, #48]	; 0x30
    ep->xferLength = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62a3      	str	r3, [r4, #40]	; 0x28
    ep->xferCount = 0U;
 80019ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    ep->inInUse = 1U;
 80019ee:	6863      	ldr	r3, [r4, #4]
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6063      	str	r3, [r4, #4]
    XMC_USBD_lStartWriteXfer(ep);
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff fc6e 	bl	80012d8 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 80019fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80019fe:	e000      	b.n	8001a02 <XMC_USBD_EndpointWrite+0x5e>
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8001a00:	2001      	movs	r0, #1
}
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result=(int32_t)0;
 8001a06:	2000      	movs	r0, #0
  return result;
 8001a08:	e7fb      	b.n	8001a02 <XMC_USBD_EndpointWrite+0x5e>
 8001a0a:	bf00      	nop
 8001a0c:	20000cec 	.word	0x20000cec

08001a10 <XMC_USBD_lDeviceActive>:
{
 8001a10:	b430      	push	{r4, r5}
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001a12:	7b05      	ldrb	r5, [r0, #12]
 8001a14:	b1c5      	cbz	r5, 8001a48 <XMC_USBD_lDeviceActive+0x38>
 8001a16:	2300      	movs	r3, #0
  uint8_t result = 0U;
 8001a18:	4618      	mov	r0, r3
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001a1a:	4c0d      	ldr	r4, [pc, #52]	; (8001a50 <XMC_USBD_lDeviceActive+0x40>)
 8001a1c:	2134      	movs	r1, #52	; 0x34
 8001a1e:	e004      	b.n	8001a2a <XMC_USBD_lDeviceActive+0x1a>
      result = 1U;
 8001a20:	2001      	movs	r0, #1
 8001a22:	3301      	adds	r3, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	42aa      	cmp	r2, r5
 8001a28:	d20f      	bcs.n	8001a4a <XMC_USBD_lDeviceActive+0x3a>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001a2a:	fb01 4203 	mla	r2, r1, r3, r4
 8001a2e:	6852      	ldr	r2, [r2, #4]
 8001a30:	f012 0f08 	tst.w	r2, #8
 8001a34:	d1f4      	bne.n	8001a20 <XMC_USBD_lDeviceActive+0x10>
 8001a36:	fb01 4203 	mla	r2, r1, r3, r4
 8001a3a:	6852      	ldr	r2, [r2, #4]
 8001a3c:	f3c2 1200 	ubfx	r2, r2, #4, #1
      result = 1U;
 8001a40:	2a00      	cmp	r2, #0
 8001a42:	bf18      	it	ne
 8001a44:	2001      	movne	r0, #1
 8001a46:	e7ec      	b.n	8001a22 <XMC_USBD_lDeviceActive+0x12>
  uint8_t result = 0U;
 8001a48:	4628      	mov	r0, r5
}
 8001a4a:	bc30      	pop	{r4, r5}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000cec 	.word	0x20000cec

08001a54 <XMC_USBD_DeviceGetState>:
{
 8001a54:	b570      	push	{r4, r5, r6, lr}
  XMC_USBD_STATE_t state={0U};
 8001a56:	2400      	movs	r4, #0
  state.connected = xmc_device.IsConnected;
 8001a58:	4e0a      	ldr	r6, [pc, #40]	; (8001a84 <XMC_USBD_DeviceGetState+0x30>)
 8001a5a:	f896 51fe 	ldrb.w	r5, [r6, #510]	; 0x1fe
 8001a5e:	f005 0501 	and.w	r5, r5, #1
  state.active = XMC_USBD_lDeviceActive(obj);
 8001a62:	f7ff ffd5 	bl	8001a10 <XMC_USBD_lDeviceActive>
  state.powered = xmc_device.IsPowered;
 8001a66:	f896 31fe 	ldrb.w	r3, [r6, #510]	; 0x1fe
 8001a6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
  return state;
 8001a6e:	f363 0400 	bfi	r4, r3, #0, #1
 8001a72:	f365 0441 	bfi	r4, r5, #1, #1
 8001a76:	f360 0482 	bfi	r4, r0, #2, #1
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f363 04c4 	bfi	r4, r3, #3, #2
}
 8001a80:	4620      	mov	r0, r4
 8001a82:	bd70      	pop	{r4, r5, r6, pc}
 8001a84:	20000cec 	.word	0x20000cec

08001a88 <XMC_USBD_Enable>:
{
 8001a88:	b508      	push	{r3, lr}
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <XMC_USBD_Enable+0x10>)
 8001a8c:	f001 f90a 	bl	8002ca4 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8001a90:	f001 fb48 	bl	8003124 <XMC_SCU_POWER_EnableUsb>
}
 8001a94:	bd08      	pop	{r3, pc}
 8001a96:	bf00      	nop
 8001a98:	20000080 	.word	0x20000080

08001a9c <XMC_USBD_Init>:
{
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 8001a9e:	4604      	mov	r4, r0
  XMC_USBD_Enable();
 8001aa0:	f7ff fff2 	bl	8001a88 <XMC_USBD_Enable>
  usbd_init = obj;
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <XMC_USBD_Init+0x10c>)
 8001aa6:	601c      	str	r4, [r3, #0]
 8001aa8:	4840      	ldr	r0, [pc, #256]	; (8001bac <XMC_USBD_Init+0x110>)
 8001aaa:	f100 0318 	add.w	r3, r0, #24
 8001aae:	1f01      	subs	r1, r0, #4
 8001ab0:	3034      	adds	r0, #52	; 0x34
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8001ab2:	2240      	movs	r2, #64	; 0x40
 8001ab4:	f843 2f04 	str.w	r2, [r3, #4]!
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8001ab8:	f841 2f04 	str.w	r2, [r1, #4]!
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001abc:	4283      	cmp	r3, r0
 8001abe:	d1f9      	bne.n	8001ab4 <XMC_USBD_Init+0x18>
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8001ac0:	4d3b      	ldr	r5, [pc, #236]	; (8001bb0 <XMC_USBD_Init+0x114>)
 8001ac2:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4628      	mov	r0, r5
 8001aca:	f002 fdad 	bl	8004628 <memset>
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8001ace:	6863      	ldr	r3, [r4, #4]
 8001ad0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8001ad4:	68a3      	ldr	r3, [r4, #8]
 8001ad6:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8001ada:	6820      	ldr	r0, [r4, #0]
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8001adc:	f8c5 01a0 	str.w	r0, [r5, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8001ae0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8001ae4:	f8c5 31a4 	str.w	r3, [r5, #420]	; 0x1a4
 8001ae8:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8001aec:	f505 73d4 	add.w	r3, r5, #424	; 0x1a8
 8001af0:	f505 71e2 	add.w	r1, r5, #452	; 0x1c4
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001af4:	f843 2b04 	str.w	r2, [r3], #4
 8001af8:	3220      	adds	r2, #32
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001afa:	428b      	cmp	r3, r1
 8001afc:	d1fa      	bne.n	8001af4 <XMC_USBD_Init+0x58>
 8001afe:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001b02:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <XMC_USBD_Init+0x118>)
 8001b04:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8001b08:	f843 2b04 	str.w	r2, [r3], #4
 8001b0c:	3220      	adds	r2, #32
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001b0e:	428b      	cmp	r3, r1
 8001b10:	d1fa      	bne.n	8001b08 <XMC_USBD_Init+0x6c>
 8001b12:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <XMC_USBD_Init+0x11c>)
 8001b18:	f505 75fe 	add.w	r5, r5, #508	; 0x1fc
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8001b1c:	f843 2b04 	str.w	r2, [r3], #4
 8001b20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001b24:	42ab      	cmp	r3, r5
 8001b26:	d1f9      	bne.n	8001b1c <XMC_USBD_Init+0x80>
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8001b28:	6883      	ldr	r3, [r0, #8]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8001b2a:	f043 0381 	orr.w	r3, r3, #129	; 0x81
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001b2e:	7b62      	ldrb	r2, [r4, #13]
 8001b30:	2a00      	cmp	r2, #0
 8001b32:	d135      	bne.n	8001ba0 <XMC_USBD_Init+0x104>
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 8001b34:	f043 0320 	orr.w	r3, r3, #32
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8001b38:	6083      	str	r3, [r0, #8]
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8001b3a:	4d1d      	ldr	r5, [pc, #116]	; (8001bb0 <XMC_USBD_Init+0x114>)
 8001b3c:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
 8001b40:	68d3      	ldr	r3, [r2, #12]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8001b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001b4a:	60d3      	str	r3, [r2, #12]
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001b4c:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001b50:	6813      	ldr	r3, [r2, #0]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8001b52:	f043 0303 	orr.w	r3, r3, #3
  dcfg.b.descdma = 0U;
 8001b56:	f36f 53d7 	bfc	r3, #23, #1
  xmc_device.device_register->dcfg = dcfg.d32;
 8001b5a:	6013      	str	r3, [r2, #0]
  dctl.d32 = xmc_device.device_register->dctl;
 8001b5c:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001b60:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8001b62:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001b66:	6053      	str	r3, [r2, #4]
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 8001b68:	2010      	movs	r0, #16
 8001b6a:	f7ff fb19 	bl	80011a0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001b6e:	f7ff fb3d 	bl	80011ec <XMC_USBD_lFlushRXFifo>
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8001b72:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8001b7a:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b82:	615a      	str	r2, [r3, #20]
  gintmsk.b.sofintr = 1U;
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <XMC_USBD_Init+0x120>)
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001b86:	7b62      	ldrb	r2, [r4, #13]
 8001b88:	2a01      	cmp	r2, #1
    gintmsk.b.rxstsqlvl = 1U;
 8001b8a:	bf08      	it	eq
 8001b8c:	f043 0310 	orreq.w	r3, r3, #16
  gintmsk.b.inepintr = 1U;
 8001b90:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <XMC_USBD_Init+0x114>)
 8001b96:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8001b9a:	6193      	str	r3, [r2, #24]
}
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	bd38      	pop	{r3, r4, r5, pc}
    gahbcfg.b.dmaenable = 0U;
 8001ba0:	f36f 1345 	bfc	r3, #5, #1
 8001ba4:	e7c8      	b.n	8001b38 <XMC_USBD_Init+0x9c>
 8001ba6:	bf00      	nop
 8001ba8:	20000ce8 	.word	0x20000ce8
 8001bac:	20000870 	.word	0x20000870
 8001bb0:	20000cec 	.word	0x20000cec
 8001bb4:	20000eb0 	.word	0x20000eb0
 8001bb8:	20000ecc 	.word	0x20000ecc
 8001bbc:	c0003c0e 	.word	0xc0003c0e

08001bc0 <XMC_USBD_Disable>:
{
 8001bc0:	b508      	push	{r3, lr}
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001bc2:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <XMC_USBD_Disable+0x10>)
 8001bc4:	f001 f862 	bl	8002c8c <XMC_SCU_RESET_AssertPeripheralReset>
  XMC_SCU_POWER_DisableUsb();
 8001bc8:	f001 fab4 	bl	8003134 <XMC_SCU_POWER_DisableUsb>
}
 8001bcc:	bd08      	pop	{r3, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000080 	.word	0x20000080

08001bd4 <XMC_USBD_ClearEvent>:
  clear.d32 = 0U;
 8001bd4:	2300      	movs	r3, #0
  switch(event)
 8001bd6:	280d      	cmp	r0, #13
 8001bd8:	d80a      	bhi.n	8001bf0 <XMC_USBD_ClearEvent+0x1c>
 8001bda:	e8df f000 	tbb	[pc, r0]
 8001bde:	0907      	.short	0x0907
 8001be0:	090e0909 	.word	0x090e0909
 8001be4:	1a171411 	.word	0x1a171411
 8001be8:	22091f1c 	.word	0x22091f1c
	  clear.b.sessreqintr = 1U;
 8001bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	xmc_device.global_register->gintsts = clear.d32;
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <XMC_USBD_ClearEvent+0x54>)
 8001bf2:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8001bf6:	6153      	str	r3, [r2, #20]
}
 8001bf8:	4770      	bx	lr
	  clear.b.usbreset = 1U;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  break;
 8001bfe:	e7f7      	b.n	8001bf0 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.usbsuspend = 1U;
 8001c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
	  break;
 8001c04:	e7f4      	b.n	8001bf0 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.wkupintr = 1U;
 8001c06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	  break;
 8001c0a:	e7f1      	b.n	8001bf0 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.wkupintr = 1U;
 8001c0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	  break;
 8001c10:	e7ee      	b.n	8001bf0 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.sofintr = 1U;
 8001c12:	2308      	movs	r3, #8
	  break;
 8001c14:	e7ec      	b.n	8001bf0 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.erlysuspend = 1U;
 8001c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
	  break;
 8001c1a:	e7e9      	b.n	8001bf0 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.enumdone = 1U;
 8001c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  break;
 8001c20:	e7e6      	b.n	8001bf0 <XMC_USBD_ClearEvent+0x1c>
	  clear.b.outepintr = 1U;
 8001c22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	  break;
 8001c26:	e7e3      	b.n	8001bf0 <XMC_USBD_ClearEvent+0x1c>
 8001c28:	20000cec 	.word	0x20000cec

08001c2c <XMC_USBD_ClearEventINEP>:
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001c2c:	316a      	adds	r1, #106	; 0x6a
 8001c2e:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <XMC_USBD_ClearEventINEP+0xc>)
 8001c30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c34:	6098      	str	r0, [r3, #8]
}
 8001c36:	4770      	bx	lr
 8001c38:	20000cec 	.word	0x20000cec

08001c3c <XMC_USBD_ClearEventOUTEP>:
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <XMC_USBD_ClearEventOUTEP+0x10>)
 8001c3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001c42:	f8d1 31c4 	ldr.w	r3, [r1, #452]	; 0x1c4
 8001c46:	6098      	str	r0, [r3, #8]
}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000cec 	.word	0x20000cec

08001c50 <XMC_USBD_EnableEventOUTEP>:
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <XMC_USBD_EnableEventOUTEP+0x10>)
 8001c52:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001c56:	6953      	ldr	r3, [r2, #20]
 8001c58:	4318      	orrs	r0, r3
 8001c5a:	6150      	str	r0, [r2, #20]
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000cec 	.word	0x20000cec

08001c64 <XMC_USBD_EnableEventINEP>:
	xmc_device.device_register->diepmsk |= diepint.d32;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <XMC_USBD_EnableEventINEP+0x10>)
 8001c66:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001c6a:	6913      	ldr	r3, [r2, #16]
 8001c6c:	4318      	orrs	r0, r3
 8001c6e:	6110      	str	r0, [r2, #16]
}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000cec 	.word	0x20000cec

08001c78 <XMC_USBD_IRQHandler>:
{
 8001c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c7c:	b085      	sub	sp, #20
 8001c7e:	4683      	mov	fp, r0
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8001c80:	4bc3      	ldr	r3, [pc, #780]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001c82:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001c86:	699c      	ldr	r4, [r3, #24]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001c88:	695e      	ldr	r6, [r3, #20]
 8001c8a:	4026      	ands	r6, r4
 8001c8c:	b2f3      	uxtb	r3, r6
 8001c8e:	9301      	str	r3, [sp, #4]
  if (data.b.sofintr)
 8001c90:	f013 0f08 	tst.w	r3, #8
 8001c94:	d007      	beq.n	8001ca6 <XMC_USBD_IRQHandler+0x2e>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8001c96:	4bbe      	ldr	r3, [pc, #760]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001c98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c9c:	2009      	movs	r0, #9
 8001c9e:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8001ca0:	2009      	movs	r0, #9
 8001ca2:	f7ff ff97 	bl	8001bd4 <XMC_USBD_ClearEvent>
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001ca6:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d047      	beq.n	8001d3e <XMC_USBD_IRQHandler+0xc6>
 8001cae:	f3c6 2407 	ubfx	r4, r6, #8, #8
  if (data.b.erlysuspend)
 8001cb2:	f014 0f04 	tst.w	r4, #4
 8001cb6:	d16a      	bne.n	8001d8e <XMC_USBD_IRQHandler+0x116>
  if (data.b.usbsuspend)
 8001cb8:	f014 0f08 	tst.w	r4, #8
 8001cbc:	d007      	beq.n	8001cce <XMC_USBD_IRQHandler+0x56>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8001cbe:	4bb4      	ldr	r3, [pc, #720]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001cc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8001cc8:	2006      	movs	r0, #6
 8001cca:	f7ff ff83 	bl	8001bd4 <XMC_USBD_ClearEvent>
 8001cce:	f3c6 6307 	ubfx	r3, r6, #24, #8
 8001cd2:	b2dd      	uxtb	r5, r3
  if (data.b.wkupintr)
 8001cd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cd8:	d007      	beq.n	8001cea <XMC_USBD_IRQHandler+0x72>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001cda:	4bad      	ldr	r3, [pc, #692]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ce0:	2008      	movs	r0, #8
 8001ce2:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001ce4:	2008      	movs	r0, #8
 8001ce6:	f7ff ff75 	bl	8001bd4 <XMC_USBD_ClearEvent>
  if (data.b.sessreqintr)
 8001cea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001cee:	d00d      	beq.n	8001d0c <XMC_USBD_IRQHandler+0x94>
    xmc_device.IsPowered = 1U;
 8001cf0:	4ba7      	ldr	r3, [pc, #668]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001cf2:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe
 8001cf6:	f042 0204 	orr.w	r2, r2, #4
 8001cfa:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8001cfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d02:	2000      	movs	r0, #0
 8001d04:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff ff64 	bl	8001bd4 <XMC_USBD_ClearEvent>
  if (data.b.usbreset)
 8001d0c:	f014 0f10 	tst.w	r4, #16
 8001d10:	d141      	bne.n	8001d96 <XMC_USBD_IRQHandler+0x11e>
  if (data.b.enumdone)
 8001d12:	f014 0f20 	tst.w	r4, #32
 8001d16:	f040 80b1 	bne.w	8001e7c <XMC_USBD_IRQHandler+0x204>
 8001d1a:	f3c6 4607 	ubfx	r6, r6, #16, #8
  if (data.b.inepint)
 8001d1e:	f016 0f04 	tst.w	r6, #4
 8001d22:	f040 80c7 	bne.w	8001eb4 <XMC_USBD_IRQHandler+0x23c>
  if (data.b.outepintr)
 8001d26:	f016 0f08 	tst.w	r6, #8
 8001d2a:	f040 817f 	bne.w	800202c <XMC_USBD_IRQHandler+0x3b4>
	if (data.b.otgintr)
 8001d2e:	9b01      	ldr	r3, [sp, #4]
 8001d30:	f013 0f04 	tst.w	r3, #4
 8001d34:	f040 8211 	bne.w	800215a <XMC_USBD_IRQHandler+0x4e2>
}
 8001d38:	b005      	add	sp, #20
 8001d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (data.b.rxstsqlvl)
 8001d3e:	9b01      	ldr	r3, [sp, #4]
 8001d40:	f013 0f10 	tst.w	r3, #16
 8001d44:	d0b3      	beq.n	8001cae <XMC_USBD_IRQHandler+0x36>
      gintmsk.b.rxstsqlvl = 0U;
 8001d46:	f36f 1404 	bfc	r4, #4, #1
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001d4a:	4b91      	ldr	r3, [pc, #580]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001d4c:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 8001d50:	6194      	str	r4, [r2, #24]
  data.d32 = xmc_device.global_register->grxstsp;
 8001d52:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001d56:	6a18      	ldr	r0, [r3, #32]
  switch (data.b.pktsts)
 8001d58:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d008      	beq.n	8001d72 <XMC_USBD_IRQHandler+0xfa>
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d00d      	beq.n	8001d80 <XMC_USBD_IRQHandler+0x108>
      gintmsk.b.rxstsqlvl = 1U;
 8001d64:	f044 0410 	orr.w	r4, r4, #16
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001d68:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001d6a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001d6e:	619c      	str	r4, [r3, #24]
 8001d70:	e79d      	b.n	8001cae <XMC_USBD_IRQHandler+0x36>
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001d72:	f3c0 110a 	ubfx	r1, r0, #4, #11
 8001d76:	f000 000f 	and.w	r0, r0, #15
 8001d7a:	f7ff f9c5 	bl	8001108 <XMC_USBD_lReadFifo>
 8001d7e:	e7f1      	b.n	8001d64 <XMC_USBD_IRQHandler+0xec>
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001d80:	f3c0 110a 	ubfx	r1, r0, #4, #11
 8001d84:	f000 000f 	and.w	r0, r0, #15
 8001d88:	f7ff f9be 	bl	8001108 <XMC_USBD_lReadFifo>
 8001d8c:	e7ea      	b.n	8001d64 <XMC_USBD_IRQHandler+0xec>
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f7ff ff20 	bl	8001bd4 <XMC_USBD_ClearEvent>
 8001d94:	e790      	b.n	8001cb8 <XMC_USBD_IRQHandler+0x40>
  dctl.d32 = xmc_device.device_register->dctl;
 8001d96:	487e      	ldr	r0, [pc, #504]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001d98:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 8001d9c:	6853      	ldr	r3, [r2, #4]
  dctl.b.rmtwkupsig = 1U;
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
  xmc_device.device_register->dctl = dctl.d32;
 8001da2:	6053      	str	r3, [r2, #4]
 8001da4:	f500 72e2 	add.w	r2, r0, #452	; 0x1c4
 8001da8:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001dac:	f852 1b04 	ldr.w	r1, [r2], #4
 8001db0:	680b      	ldr	r3, [r1, #0]
		epctl.b.snak = 1U;
 8001db2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001db6:	f36f 5355 	bfc	r3, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001dba:	600b      	str	r3, [r1, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001dbc:	4282      	cmp	r2, r0
 8001dbe:	d1f5      	bne.n	8001dac <XMC_USBD_IRQHandler+0x134>
  xmc_device.global_register->grxfsiz = 64U;
 8001dc0:	4d73      	ldr	r5, [pc, #460]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001dc2:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24
  gnptxfsiz.b.depth = 16U;
 8001dca:	2010      	movs	r0, #16
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f360 431f 	bfi	r3, r0, #16, #16
  gnptxfsiz.b.startaddr = 64U;
 8001dd2:	f362 030f 	bfi	r3, r2, #0, #16
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8001dd6:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
 8001dda:	6293      	str	r3, [r2, #40]	; 0x28
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001ddc:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001de0:	4a6c      	ldr	r2, [pc, #432]	; (8001f94 <XMC_USBD_IRQHandler+0x31c>)
 8001de2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8001de6:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001dea:	3210      	adds	r2, #16
 8001dec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8001df0:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001df4:	3210      	adds	r2, #16
 8001df6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8001dfa:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001dfe:	3210      	adds	r2, #16
 8001e00:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001e04:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001e08:	3210      	adds	r2, #16
 8001e0a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001e0e:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
 8001e12:	3210      	adds	r2, #16
 8001e14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8001e18:	f7ff f9c2 	bl	80011a0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff f9bf 	bl	80011a0 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001e22:	f7ff f9e3 	bl	80011ec <XMC_USBD_lFlushRXFifo>
  xmc_device.device_register->daintmsk = daint.d32;
 8001e26:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
 8001e2a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001e2e:	61da      	str	r2, [r3, #28]
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8001e30:	200f      	movs	r0, #15
 8001e32:	f7ff ff0d 	bl	8001c50 <XMC_USBD_EnableEventOUTEP>
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8001e36:	200f      	movs	r0, #15
 8001e38:	f7ff ff14 	bl	8001c64 <XMC_USBD_EnableEventINEP>
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001e3c:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001e40:	6813      	ldr	r3, [r2, #0]
  dcfg.b.devaddr = 0U;
 8001e42:	f36f 130a 	bfc	r3, #4, #7
  xmc_device.device_register->dcfg = dcfg.d32;
 8001e46:	6013      	str	r3, [r2, #0]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001e48:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d010      	beq.n	8001e72 <XMC_USBD_IRQHandler+0x1fa>
  xmc_device.ep[0U].outInUse = 0U;
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	f36f 1204 	bfc	r2, #4, #1
 8001e58:	605a      	str	r2, [r3, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	f36f 02c3 	bfc	r2, #3, #1
 8001e60:	605a      	str	r2, [r3, #4]
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001e62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e66:	2004      	movs	r0, #4
 8001e68:	4798      	blx	r3
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8001e6a:	2004      	movs	r0, #4
 8001e6c:	f7ff feb2 	bl	8001bd4 <XMC_USBD_ClearEvent>
 8001e70:	e74f      	b.n	8001d12 <XMC_USBD_IRQHandler+0x9a>
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001e72:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
 8001e76:	2200      	movs	r2, #0
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34
 8001e7a:	e7e9      	b.n	8001e50 <XMC_USBD_IRQHandler+0x1d8>
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001e7c:	4c44      	ldr	r4, [pc, #272]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001e7e:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
 8001e82:	6813      	ldr	r3, [r2, #0]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001e84:	f36f 030a 	bfc	r3, #0, #11
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8001e88:	6013      	str	r3, [r2, #0]
  xmc_device.IsConnected = 1U;
 8001e8a:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8001e8e:	f043 0305 	orr.w	r3, r3, #5
 8001e92:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001e96:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	4798      	blx	r3
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001e9e:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 8001ea2:	68d3      	ldr	r3, [r2, #12]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001ea4:	2109      	movs	r1, #9
 8001ea6:	f361 238d 	bfi	r3, r1, #10, #4
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001eaa:	60d3      	str	r3, [r2, #12]
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8001eac:	200b      	movs	r0, #11
 8001eae:	f7ff fe91 	bl	8001bd4 <XMC_USBD_ClearEvent>
 8001eb2:	e732      	b.n	8001d1a <XMC_USBD_IRQHandler+0xa2>
  daint.d32 = xmc_device.device_register->daint;
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <XMC_USBD_IRQHandler+0x318>)
 8001eb6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001eba:	699a      	ldr	r2, [r3, #24]
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8001ebc:	6919      	ldr	r1, [r3, #16]
  while ((uint16_t)mask >> ep_num)
 8001ebe:	fa1f f982 	uxth.w	r9, r2
 8001ec2:	f1b9 0f00 	cmp.w	r9, #0
 8001ec6:	f000 80ad 	beq.w	8002024 <XMC_USBD_IRQHandler+0x3ac>
 8001eca:	464b      	mov	r3, r9
  dieptsiz.d32 = 0U;
 8001ecc:	2200      	movs	r2, #0
 8001ece:	9202      	str	r2, [sp, #8]
  ep_num = 0U;
 8001ed0:	4615      	mov	r5, r2
  while ((uint16_t)mask >> ep_num)
 8001ed2:	4617      	mov	r7, r2
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001ed4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001f90 <XMC_USBD_IRQHandler+0x318>
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001ed8:	f04f 0a34 	mov.w	sl, #52	; 0x34
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8001edc:	9603      	str	r6, [sp, #12]
 8001ede:	460e      	mov	r6, r1
 8001ee0:	e029      	b.n	8001f36 <XMC_USBD_IRQHandler+0x2be>
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001ee2:	2901      	cmp	r1, #1
 8001ee4:	f040 8150 	bne.w	8002188 <XMC_USBD_IRQHandler+0x510>
        if (diepint.b.emptyintr)
 8001ee8:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001eec:	d154      	bne.n	8001f98 <XMC_USBD_IRQHandler+0x320>
      if (diepint.b.xfercompl)
 8001eee:	f014 0f01 	tst.w	r4, #1
 8001ef2:	d016      	beq.n	8001f22 <XMC_USBD_IRQHandler+0x2aa>
        if (ep->xferTotal==ep->xferLength)
 8001ef4:	fb0a 8307 	mla	r3, sl, r7, r8
 8001ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f040 808b 	bne.w	8002018 <XMC_USBD_IRQHandler+0x3a0>
          ep->inInUse = 0U;
 8001f02:	fb0a 8307 	mla	r3, sl, r7, r8
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	f36f 02c3 	bfc	r2, #3, #1
 8001f0c:	605a      	str	r2, [r3, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001f0e:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d077      	beq.n	8002006 <XMC_USBD_IRQHandler+0x38e>
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8001f16:	f8d8 3204 	ldr.w	r3, [r8, #516]	; 0x204
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8001f20:	4798      	blx	r3
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001f22:	376a      	adds	r7, #106	; 0x6a
 8001f24:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
 8001f28:	609c      	str	r4, [r3, #8]
    ep_num++;
 8001f2a:	3501      	adds	r5, #1
 8001f2c:	b2ed      	uxtb	r5, r5
  while ((uint16_t)mask >> ep_num)
 8001f2e:	462f      	mov	r7, r5
 8001f30:	fa59 f305 	asrs.w	r3, r9, r5
 8001f34:	d075      	beq.n	8002022 <XMC_USBD_IRQHandler+0x3aa>
    if ((uint16_t)temp)
 8001f36:	f013 0f01 	tst.w	r3, #1
 8001f3a:	d0f6      	beq.n	8001f2a <XMC_USBD_IRQHandler+0x2b2>
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001f3c:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8001f40:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 8001f44:	6891      	ldr	r1, [r2, #8]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001f46:	f8d8 31a4 	ldr.w	r3, [r8, #420]	; 0x1a4
 8001f4a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001f4c:	fb0a f307 	mul.w	r3, sl, r7
 8001f50:	f818 3003 	ldrb.w	r3, [r8, r3]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	40dc      	lsrs	r4, r3
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001f5a:	01e4      	lsls	r4, r4, #7
 8001f5c:	b2e4      	uxtb	r4, r4
 8001f5e:	4334      	orrs	r4, r6
      diepint.d32 = inepint &
 8001f60:	400c      	ands	r4, r1
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001f62:	f89b 100d 	ldrb.w	r1, [fp, #13]
 8001f66:	2900      	cmp	r1, #0
 8001f68:	d1bb      	bne.n	8001ee2 <XMC_USBD_IRQHandler+0x26a>
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8001f6a:	6913      	ldr	r3, [r2, #16]
 8001f6c:	9302      	str	r3, [sp, #8]
      if (diepint.b.xfercompl)
 8001f6e:	f014 0f01 	tst.w	r4, #1
 8001f72:	d0d6      	beq.n	8001f22 <XMC_USBD_IRQHandler+0x2aa>
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8001f74:	9b02      	ldr	r3, [sp, #8]
 8001f76:	f033 4360 	bics.w	r3, r3, #3758096384	; 0xe0000000
 8001f7a:	d1bb      	bne.n	8001ef4 <XMC_USBD_IRQHandler+0x27c>
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001f7c:	fb0a 8307 	mla	r3, sl, r7, r8
 8001f80:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f84:	1a81      	subs	r1, r0, r2
            ep->xferCount += Bytes;
 8001f86:	62d8      	str	r0, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8001f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8a:	440a      	add	r2, r1
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f8e:	e7b1      	b.n	8001ef4 <XMC_USBD_IRQHandler+0x27c>
 8001f90:	20000cec 	.word	0x20000cec
 8001f94:	00100050 	.word	0x00100050
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001f98:	f103 026a 	add.w	r2, r3, #106	; 0x6a
 8001f9c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8001fa0:	6992      	ldr	r2, [r2, #24]
  byte_count = ep->xferLength - ep->xferCount;
 8001fa2:	fb0a 8107 	mla	r1, sl, r7, r8
 8001fa6:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8001fa8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  if (!byte_count)
 8001faa:	ebb0 0e01 	subs.w	lr, r0, r1
 8001fae:	d019      	beq.n	8001fe4 <XMC_USBD_IRQHandler+0x36c>
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001fb0:	f10e 0003 	add.w	r0, lr, #3
 8001fb4:	0880      	lsrs	r0, r0, #2
 8001fb6:	b292      	uxth	r2, r2
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8001fb8:	4282      	cmp	r2, r0
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8001fba:	bf3c      	itt	cc
 8001fbc:	ea4f 0e82 	movcc.w	lr, r2, lsl #2
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8001fc0:	4610      	movcc	r0, r2
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001fc2:	b178      	cbz	r0, 8001fe4 <XMC_USBD_IRQHandler+0x36c>
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001fc4:	3378      	adds	r3, #120	; 0x78
 8001fc6:	f858 c023 	ldr.w	ip, [r8, r3, lsl #2]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001fca:	2100      	movs	r1, #0
      *fifo = *(uint32_t*)ep->xferBuffer;
 8001fcc:	fb0a 8207 	mla	r2, sl, r7, r8
 8001fd0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8cc 3000 	str.w	r3, [ip]
      i++;
 8001fd8:	3101      	adds	r1, #1
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001fda:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001fdc:	3304      	adds	r3, #4
 8001fde:	6253      	str	r3, [r2, #36]	; 0x24
 8001fe0:	4281      	cmp	r1, r0
 8001fe2:	d1f5      	bne.n	8001fd0 <XMC_USBD_IRQHandler+0x358>
          ep->xferCount += bytes;
 8001fe4:	fb0a 8307 	mla	r3, sl, r7, r8
 8001fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fea:	4472      	add	r2, lr
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff0:	4472      	add	r2, lr
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
      if (diepint.b.xfercompl)
 8001ff4:	f014 0f01 	tst.w	r4, #1
 8001ff8:	d093      	beq.n	8001f22 <XMC_USBD_IRQHandler+0x2aa>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001ffa:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f47f af78 	bne.w	8001ef4 <XMC_USBD_IRQHandler+0x27c>
 8002004:	e7b6      	b.n	8001f74 <XMC_USBD_IRQHandler+0x2fc>
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8002006:	f8d8 11a4 	ldr.w	r1, [r8, #420]	; 0x1a4
 800200a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800200c:	2201      	movs	r2, #1
 800200e:	40ba      	lsls	r2, r7
 8002010:	ea23 0302 	bic.w	r3, r3, r2
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8002014:	634b      	str	r3, [r1, #52]	; 0x34
 8002016:	e77e      	b.n	8001f16 <XMC_USBD_IRQHandler+0x29e>
          XMC_USBD_lStartWriteXfer(ep);
 8002018:	fb0a 8007 	mla	r0, sl, r7, r8
 800201c:	f7ff f95c 	bl	80012d8 <XMC_USBD_lStartWriteXfer>
 8002020:	e77f      	b.n	8001f22 <XMC_USBD_IRQHandler+0x2aa>
 8002022:	9e03      	ldr	r6, [sp, #12]
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 8002024:	200e      	movs	r0, #14
 8002026:	f7ff fdd5 	bl	8001bd4 <XMC_USBD_ClearEvent>
 800202a:	e67c      	b.n	8001d26 <XMC_USBD_IRQHandler+0xae>
  daint.d32 = xmc_device.device_register->daint;
 800202c:	4b59      	ldr	r3, [pc, #356]	; (8002194 <XMC_USBD_IRQHandler+0x51c>)
 800202e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002032:	699a      	ldr	r2, [r3, #24]
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8002034:	69de      	ldr	r6, [r3, #28]
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	9302      	str	r3, [sp, #8]
  doeptsiz.d32 = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	9303      	str	r3, [sp, #12]
  mask = daint.ep.out & daintmsk.ep.out;
 800203e:	f3c6 460f 	ubfx	r6, r6, #16, #16
  while ((uint16_t)mask >> ep_num)
 8002042:	ea16 4612 	ands.w	r6, r6, r2, lsr #16
 8002046:	f000 8084 	beq.w	8002152 <XMC_USBD_IRQHandler+0x4da>
 800204a:	4633      	mov	r3, r6
  ep_num = 0U;
 800204c:	2400      	movs	r4, #0
  while ((uint16_t)mask >> ep_num)
 800204e:	4625      	mov	r5, r4
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8002050:	4f50      	ldr	r7, [pc, #320]	; (8002194 <XMC_USBD_IRQHandler+0x51c>)
        if (ep->xferTotal == ep->xferLength)
 8002052:	f04f 0a34 	mov.w	sl, #52	; 0x34
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8002056:	46b0      	mov	r8, r6
 8002058:	e024      	b.n	80020a4 <XMC_USBD_IRQHandler+0x42c>
			ep->outBytesAvailable += ep->xferCount;
 800205a:	fb0a 7305 	mla	r3, sl, r5, r7
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002062:	440a      	add	r2, r1
 8002064:	611a      	str	r2, [r3, #16]
 8002066:	e048      	b.n	80020fa <XMC_USBD_IRQHandler+0x482>
        if (ep->xferTotal == ep->xferLength)
 8002068:	fb0a 7305 	mla	r3, sl, r5, r7
 800206c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	429a      	cmp	r2, r3
 8002072:	d169      	bne.n	8002148 <XMC_USBD_IRQHandler+0x4d0>
          ep->outBytesAvailable = ep->xferCount;
 8002074:	fb0a 7305 	mla	r3, sl, r5, r7
 8002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207a:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	f36f 1204 	bfc	r2, #4, #1
 8002082:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8002084:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002088:	2101      	movs	r1, #1
 800208a:	4620      	mov	r0, r4
 800208c:	4798      	blx	r3
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 800208e:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002092:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 8002096:	609e      	str	r6, [r3, #8]
    ep_num++;
 8002098:	3401      	adds	r4, #1
 800209a:	b2e4      	uxtb	r4, r4
  while ((uint16_t)mask >> ep_num)
 800209c:	4625      	mov	r5, r4
 800209e:	fa58 f304 	asrs.w	r3, r8, r4
 80020a2:	d056      	beq.n	8002152 <XMC_USBD_IRQHandler+0x4da>
    if (temp)
 80020a4:	f013 0f01 	tst.w	r3, #1
 80020a8:	d0f6      	beq.n	8002098 <XMC_USBD_IRQHandler+0x420>
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 80020aa:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80020ae:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80020b2:	689e      	ldr	r6, [r3, #8]
 80020b4:	9a02      	ldr	r2, [sp, #8]
 80020b6:	4016      	ands	r6, r2
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80020b8:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80020bc:	b90a      	cbnz	r2, 80020c2 <XMC_USBD_IRQHandler+0x44a>
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	9303      	str	r3, [sp, #12]
 80020c2:	fa5f f986 	uxtb.w	r9, r6
      if (doepint.b.setup)
 80020c6:	f019 0f08 	tst.w	r9, #8
 80020ca:	d027      	beq.n	800211c <XMC_USBD_IRQHandler+0x4a4>
        ep->isStalled = 0U;
 80020cc:	fb0a 7305 	mla	r3, sl, r5, r7
 80020d0:	791a      	ldrb	r2, [r3, #4]
 80020d2:	f36f 1245 	bfc	r2, #5, #1
 80020d6:	711a      	strb	r2, [r3, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80020d8:	f89b 300d 	ldrb.w	r3, [fp, #13]
 80020dc:	b94b      	cbnz	r3, 80020f2 <XMC_USBD_IRQHandler+0x47a>
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 80020de:	fb0a 7205 	mla	r2, sl, r5, r7
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 80020e2:	9b03      	ldr	r3, [sp, #12]
 80020e4:	f3c3 7341 	ubfx	r3, r3, #29, #2
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 80020e8:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	3318      	adds	r3, #24
 80020f0:	6113      	str	r3, [r2, #16]
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80020f2:	f89b 300d 	ldrb.w	r3, [fp, #13]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d0af      	beq.n	800205a <XMC_USBD_IRQHandler+0x3e2>
		ep->outInUse = 0U;
 80020fa:	fb0a 7305 	mla	r3, sl, r5, r7
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	f36f 1204 	bfc	r2, #4, #1
 8002104:	605a      	str	r2, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 8002106:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800210a:	2100      	movs	r1, #0
 800210c:	4608      	mov	r0, r1
 800210e:	4798      	blx	r3
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8002110:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8002114:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002118:	2208      	movs	r2, #8
 800211a:	609a      	str	r2, [r3, #8]
      if (doepint.b.xfercompl)
 800211c:	f019 0f01 	tst.w	r9, #1
 8002120:	d0b5      	beq.n	800208e <XMC_USBD_IRQHandler+0x416>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8002122:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d19e      	bne.n	8002068 <XMC_USBD_IRQHandler+0x3f0>
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 800212a:	fb0a 7205 	mla	r2, sl, r5, r7
 800212e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002130:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002132:	1a5b      	subs	r3, r3, r1
 8002134:	9803      	ldr	r0, [sp, #12]
 8002136:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800213a:	1a1b      	subs	r3, r3, r0
          ep->xferCount += bytes;
 800213c:	4419      	add	r1, r3
 800213e:	62d1      	str	r1, [r2, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8002140:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002142:	440b      	add	r3, r1
 8002144:	6253      	str	r3, [r2, #36]	; 0x24
 8002146:	e78f      	b.n	8002068 <XMC_USBD_IRQHandler+0x3f0>
          XMC_USBD_lStartReadXfer(ep);
 8002148:	fb0a 7005 	mla	r0, sl, r5, r7
 800214c:	f7ff f86e 	bl	800122c <XMC_USBD_lStartReadXfer>
 8002150:	e79d      	b.n	800208e <XMC_USBD_IRQHandler+0x416>
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8002152:	200d      	movs	r0, #13
 8002154:	f7ff fd3e 	bl	8001bd4 <XMC_USBD_ClearEvent>
 8002158:	e5e9      	b.n	8001d2e <XMC_USBD_IRQHandler+0xb6>
  data.d32 = xmc_device.global_register->gotgint;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <XMC_USBD_IRQHandler+0x51c>)
 800215c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002160:	685c      	ldr	r4, [r3, #4]
  if (data.b.sesenddet)
 8002162:	f014 0f04 	tst.w	r4, #4
 8002166:	d00a      	beq.n	800217e <XMC_USBD_IRQHandler+0x506>
		xmc_device.IsPowered = 0U;
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <XMC_USBD_IRQHandler+0x51c>)
 800216a:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe
 800216e:	f36f 0282 	bfc	r2, #2, #1
 8002172:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8002176:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800217a:	2001      	movs	r0, #1
 800217c:	4798      	blx	r3
  xmc_device.global_register->gotgint = clear.d32;
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <XMC_USBD_IRQHandler+0x51c>)
 8002180:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002184:	605c      	str	r4, [r3, #4]
}
 8002186:	e5d7      	b.n	8001d38 <XMC_USBD_IRQHandler+0xc0>
      if (diepint.b.xfercompl)
 8002188:	f014 0f01 	tst.w	r4, #1
 800218c:	f47f aeb2 	bne.w	8001ef4 <XMC_USBD_IRQHandler+0x27c>
 8002190:	e6c7      	b.n	8001f22 <XMC_USBD_IRQHandler+0x2aa>
 8002192:	bf00      	nop
 8002194:	20000cec 	.word	0x20000cec

08002198 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002198:	b510      	push	{r4, lr}
 800219a:	4604      	mov	r4, r0
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 800219c:	2300      	movs	r3, #0
 800219e:	6143      	str	r3, [r0, #20]
 80021a0:	6183      	str	r3, [r0, #24]
 80021a2:	61c3      	str	r3, [r0, #28]

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 80021a4:	2302      	movs	r3, #2
 80021a6:	7183      	strb	r3, [r0, #6]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 80021a8:	7303      	strb	r3, [r0, #12]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	7483      	strb	r3, [r0, #18]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 80021ae:	2101      	movs	r1, #1
 80021b0:	3002      	adds	r0, #2
 80021b2:	f000 fbd7 	bl	8002964 <Endpoint_ConfigureEndpointTable>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b908      	cbnz	r0, 80021be <CDC_Device_ConfigureEndpoints+0x26>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd10      	pop	{r4, pc}
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 80021be:	2101      	movs	r1, #1
 80021c0:	f104 0008 	add.w	r0, r4, #8
 80021c4:	f000 fbce 	bl	8002964 <Endpoint_ConfigureEndpointTable>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2800      	cmp	r0, #0
 80021cc:	d0f5      	beq.n	80021ba <CDC_Device_ConfigureEndpoints+0x22>
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 80021ce:	2101      	movs	r1, #1
 80021d0:	f104 000e 	add.w	r0, r4, #14
 80021d4:	f000 fbc6 	bl	8002964 <Endpoint_ConfigureEndpointTable>
 80021d8:	4603      	mov	r3, r0
 80021da:	e7ee      	b.n	80021ba <CDC_Device_ConfigureEndpoints+0x22>

080021dc <CDC_Device_SendString>:
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <CDC_Device_SendString+0x40>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d116      	bne.n	8002214 <CDC_Device_SendString+0x38>
 80021e6:	6983      	ldr	r3, [r0, #24]
 80021e8:	b1b3      	cbz	r3, 8002218 <CDC_Device_SendString+0x3c>
{
 80021ea:	b510      	push	{r4, lr}
 80021ec:	460c      	mov	r4, r1
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80021ee:	7883      	ldrb	r3, [r0, #2]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80021f0:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <CDC_Device_SendString+0x44>)
 80021f2:	f003 010f 	and.w	r1, r3, #15
 80021f6:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80021fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021fe:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8002202:	4620      	mov	r0, r4
 8002204:	f002 fabc 	bl	8004780 <strlen>
 8002208:	2200      	movs	r2, #0
 800220a:	b281      	uxth	r1, r0
 800220c:	4620      	mov	r0, r4
 800220e:	f001 fac7 	bl	80037a0 <Endpoint_Write_Stream_LE>
}
 8002212:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002214:	2002      	movs	r0, #2
 8002216:	4770      	bx	lr
 8002218:	2002      	movs	r0, #2
}
 800221a:	4770      	bx	lr
 800221c:	20000ef5 	.word	0x20000ef5
 8002220:	20000ba8 	.word	0x20000ba8

08002224 <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 8002224:	b538      	push	{r3, r4, r5, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <CDC_Device_SendData+0x3c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b04      	cmp	r3, #4
 800222e:	d113      	bne.n	8002258 <CDC_Device_SendData+0x34>
 8002230:	6983      	ldr	r3, [r0, #24]
 8002232:	b19b      	cbz	r3, 800225c <CDC_Device_SendData+0x38>
 8002234:	4615      	mov	r5, r2
 8002236:	460c      	mov	r4, r1
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002238:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <CDC_Device_SendData+0x40>)
 800223c:	f003 010f 	and.w	r1, r3, #15
 8002240:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002244:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002248:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 800224c:	2200      	movs	r2, #0
 800224e:	4629      	mov	r1, r5
 8002250:	4620      	mov	r0, r4
 8002252:	f001 faa5 	bl	80037a0 <Endpoint_Write_Stream_LE>
 8002256:	e000      	b.n	800225a <CDC_Device_SendData+0x36>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002258:	2002      	movs	r0, #2
}
 800225a:	bd38      	pop	{r3, r4, r5, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800225c:	2002      	movs	r0, #2
 800225e:	e7fc      	b.n	800225a <CDC_Device_SendData+0x36>
 8002260:	20000ef5 	.word	0x20000ef5
 8002264:	20000ba8 	.word	0x20000ba8

08002268 <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <CDC_Device_SendByte+0x50>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b04      	cmp	r3, #4
 8002270:	d11c      	bne.n	80022ac <CDC_Device_SendByte+0x44>
 8002272:	6983      	ldr	r3, [r0, #24]
 8002274:	b1eb      	cbz	r3, 80022b2 <CDC_Device_SendByte+0x4a>
{
 8002276:	b510      	push	{r4, lr}
 8002278:	460c      	mov	r4, r1
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 800227a:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800227c:	4a0f      	ldr	r2, [pc, #60]	; (80022bc <CDC_Device_SendByte+0x54>)
 800227e:	f003 010f 	and.w	r1, r3, #15
 8002282:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002286:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800228a:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d

	if (!(Endpoint_IsReadWriteAllowed()))
 800228e:	f000 fae5 	bl	800285c <Endpoint_IsReadWriteAllowed>
 8002292:	b928      	cbnz	r0, 80022a0 <CDC_Device_SendByte+0x38>
	{
		Endpoint_ClearIN();
 8002294:	f000 fa86 	bl	80027a4 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8002298:	f000 fa06 	bl	80026a8 <Endpoint_WaitUntilReady>
 800229c:	4603      	mov	r3, r0
 800229e:	b918      	cbnz	r0, 80022a8 <CDC_Device_SendByte+0x40>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
 80022a0:	4620      	mov	r0, r4
 80022a2:	f000 fafb 	bl	800289c <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80022ac:	2302      	movs	r3, #2
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	4770      	bx	lr
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 80022b2:	2302      	movs	r3, #2
 80022b4:	e7fb      	b.n	80022ae <CDC_Device_SendByte+0x46>
 80022b6:	bf00      	nop
 80022b8:	20000ef5 	.word	0x20000ef5
 80022bc:	20000ba8 	.word	0x20000ba8

080022c0 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80022c0:	b510      	push	{r4, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <CDC_Device_Flush+0x78>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d12f      	bne.n	800232c <CDC_Device_Flush+0x6c>
 80022cc:	6983      	ldr	r3, [r0, #24]
 80022ce:	b383      	cbz	r3, 8002332 <CDC_Device_Flush+0x72>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80022d0:	7882      	ldrb	r2, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80022d2:	f002 030f 	and.w	r3, r2, #15
 80022d6:	4919      	ldr	r1, [pc, #100]	; (800233c <CDC_Device_Flush+0x7c>)
 80022d8:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80022dc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80022e0:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 80022e4:	222c      	movs	r2, #44	; 0x2c
 80022e6:	fb02 1203 	mla	r2, r2, r3, r1
 80022ea:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80022ee:	2a00      	cmp	r2, #0
 80022f0:	db07      	blt.n	8002302 <CDC_Device_Flush+0x42>
			return ep->InBytesAvailable;
		else
			return ep->OutBytesAvailable;
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <CDC_Device_Flush+0x7c>)
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 2303 	mla	r3, r1, r3, r2
 80022fa:	899b      	ldrh	r3, [r3, #12]

	if (!(Endpoint_BytesInEndpoint()))
 80022fc:	b93b      	cbnz	r3, 800230e <CDC_Device_Flush+0x4e>
	  return ENDPOINT_READYWAIT_NoError;
 80022fe:	2400      	movs	r4, #0
 8002300:	e015      	b.n	800232e <CDC_Device_Flush+0x6e>
			return ep->InBytesAvailable;
 8002302:	460a      	mov	r2, r1
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 2303 	mla	r3, r1, r3, r2
 800230a:	8b9b      	ldrh	r3, [r3, #28]
 800230c:	e7f6      	b.n	80022fc <CDC_Device_Flush+0x3c>

	bool BankFull = !(Endpoint_IsReadWriteAllowed());
 800230e:	f000 faa5 	bl	800285c <Endpoint_IsReadWriteAllowed>
 8002312:	4604      	mov	r4, r0

	Endpoint_ClearIN();
 8002314:	f000 fa46 	bl	80027a4 <Endpoint_ClearIN>

	if (BankFull)
 8002318:	b10c      	cbz	r4, 800231e <CDC_Device_Flush+0x5e>
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
 800231a:	2400      	movs	r4, #0
 800231c:	e007      	b.n	800232e <CDC_Device_Flush+0x6e>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 800231e:	f000 f9c3 	bl	80026a8 <Endpoint_WaitUntilReady>
 8002322:	4604      	mov	r4, r0
 8002324:	b918      	cbnz	r0, 800232e <CDC_Device_Flush+0x6e>
		Endpoint_ClearIN();
 8002326:	f000 fa3d 	bl	80027a4 <Endpoint_ClearIN>
 800232a:	e000      	b.n	800232e <CDC_Device_Flush+0x6e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 800232c:	2402      	movs	r4, #2
}
 800232e:	4620      	mov	r0, r4
 8002330:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002332:	2402      	movs	r4, #2
 8002334:	e7fb      	b.n	800232e <CDC_Device_Flush+0x6e>
 8002336:	bf00      	nop
 8002338:	20000ef5 	.word	0x20000ef5
 800233c:	20000ba8 	.word	0x20000ba8

08002340 <CDC_Device_USBTask>:
{
 8002340:	b508      	push	{r3, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <CDC_Device_USBTask+0x4c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b04      	cmp	r3, #4
 800234a:	d000      	beq.n	800234e <CDC_Device_USBTask+0xe>
}
 800234c:	bd08      	pop	{r3, pc}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800234e:	6983      	ldr	r3, [r0, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0fb      	beq.n	800234c <CDC_Device_USBTask+0xc>
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002354:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002356:	f003 020f 	and.w	r2, r3, #15
 800235a:	490d      	ldr	r1, [pc, #52]	; (8002390 <CDC_Device_USBTask+0x50>)
 800235c:	f881 213c 	strb.w	r2, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002360:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002364:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
		return ep->InInUse == 0 && ep->IsEnabled;
 8002368:	232c      	movs	r3, #44	; 0x2c
 800236a:	fb03 1302 	mla	r3, r3, r2, r1
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f013 0f10 	tst.w	r3, #16
 8002374:	d1ea      	bne.n	800234c <CDC_Device_USBTask+0xc>
 8002376:	460b      	mov	r3, r1
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 3202 	mla	r2, r1, r2, r3
 800237e:	7a13      	ldrb	r3, [r2, #8]
 8002380:	f013 0f02 	tst.w	r3, #2
 8002384:	d0e2      	beq.n	800234c <CDC_Device_USBTask+0xc>
	  CDC_Device_Flush(CDCInterfaceInfo);
 8002386:	f7ff ff9b 	bl	80022c0 <CDC_Device_Flush>
 800238a:	e7df      	b.n	800234c <CDC_Device_USBTask+0xc>
 800238c:	20000ef5 	.word	0x20000ef5
 8002390:	20000ba8 	.word	0x20000ba8

08002394 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002394:	b510      	push	{r4, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8002396:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <CDC_Device_BytesReceived+0x6c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b04      	cmp	r3, #4
 800239e:	d002      	beq.n	80023a6 <CDC_Device_BytesReceived+0x12>
	  return 0;
 80023a0:	2400      	movs	r4, #0
	}
	else
	{
		return 0;
	}
}
 80023a2:	4620      	mov	r0, r4
 80023a4:	bd10      	pop	{r4, pc}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80023a6:	6983      	ldr	r3, [r0, #24]
 80023a8:	b333      	cbz	r3, 80023f8 <CDC_Device_BytesReceived+0x64>
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 80023aa:	7a03      	ldrb	r3, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80023ac:	f003 020f 	and.w	r2, r3, #15
 80023b0:	4914      	ldr	r1, [pc, #80]	; (8002404 <CDC_Device_BytesReceived+0x70>)
 80023b2:	f881 213c 	strb.w	r2, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80023b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023ba:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
		return ep->IsOutRecieved;
 80023be:	232c      	movs	r3, #44	; 0x2c
 80023c0:	fb03 1302 	mla	r3, r3, r2, r1
 80023c4:	689b      	ldr	r3, [r3, #8]
	if (Endpoint_IsOUTReceived())
 80023c6:	f013 0f20 	tst.w	r3, #32
 80023ca:	d017      	beq.n	80023fc <CDC_Device_BytesReceived+0x68>
		if (ep->Direction)
 80023cc:	232c      	movs	r3, #44	; 0x2c
 80023ce:	fb03 1302 	mla	r3, r3, r2, r1
 80023d2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db09      	blt.n	80023ee <CDC_Device_BytesReceived+0x5a>
			return ep->OutBytesAvailable;
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <CDC_Device_BytesReceived+0x70>)
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 3202 	mla	r2, r1, r2, r3
 80023e2:	8994      	ldrh	r4, [r2, #12]
		if (!(Endpoint_BytesInEndpoint()))
 80023e4:	2c00      	cmp	r4, #0
 80023e6:	d1dc      	bne.n	80023a2 <CDC_Device_BytesReceived+0xe>
			Endpoint_ClearOUT();
 80023e8:	f000 f9ae 	bl	8002748 <Endpoint_ClearOUT>
			return 0;
 80023ec:	e7d9      	b.n	80023a2 <CDC_Device_BytesReceived+0xe>
			return ep->InBytesAvailable;
 80023ee:	232c      	movs	r3, #44	; 0x2c
 80023f0:	fb03 1202 	mla	r2, r3, r2, r1
 80023f4:	8b94      	ldrh	r4, [r2, #28]
 80023f6:	e7f5      	b.n	80023e4 <CDC_Device_BytesReceived+0x50>
	  return 0;
 80023f8:	2400      	movs	r4, #0
 80023fa:	e7d2      	b.n	80023a2 <CDC_Device_BytesReceived+0xe>
		return 0;
 80023fc:	2400      	movs	r4, #0
 80023fe:	e7d0      	b.n	80023a2 <CDC_Device_BytesReceived+0xe>
 8002400:	20000ef5 	.word	0x20000ef5
 8002404:	20000ba8 	.word	0x20000ba8

08002408 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002408:	b510      	push	{r4, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <CDC_Device_ReceiveByte+0xb0>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b04      	cmp	r3, #4
 8002412:	d148      	bne.n	80024a6 <CDC_Device_ReceiveByte+0x9e>
 8002414:	6983      	ldr	r3, [r0, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d048      	beq.n	80024ac <CDC_Device_ReceiveByte+0xa4>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 800241a:	7a02      	ldrb	r2, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800241c:	f002 030f 	and.w	r3, r2, #15
 8002420:	4926      	ldr	r1, [pc, #152]	; (80024bc <CDC_Device_ReceiveByte+0xb4>)
 8002422:	f881 313c 	strb.w	r3, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002426:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800242a:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800242e:	4618      	mov	r0, r3
		return ep->IsOutRecieved;
 8002430:	222c      	movs	r2, #44	; 0x2c
 8002432:	fb02 1203 	mla	r2, r2, r3, r1
 8002436:	6892      	ldr	r2, [r2, #8]

	if (Endpoint_IsOUTReceived())
 8002438:	f012 0f20 	tst.w	r2, #32
 800243c:	d039      	beq.n	80024b2 <CDC_Device_ReceiveByte+0xaa>
		if (ep->Direction)
 800243e:	222c      	movs	r2, #44	; 0x2c
 8002440:	fb02 1203 	mla	r2, r2, r3, r1
 8002444:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8002448:	2a00      	cmp	r2, #0
 800244a:	db0f      	blt.n	800246c <CDC_Device_ReceiveByte+0x64>
			return ep->OutBytesAvailable;
 800244c:	4a1b      	ldr	r2, [pc, #108]	; (80024bc <CDC_Device_ReceiveByte+0xb4>)
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 2303 	mla	r3, r1, r3, r2
	{
		if (Endpoint_BytesInEndpoint())
 8002454:	899b      	ldrh	r3, [r3, #12]
	int16_t ReceivedByte = -1;
 8002456:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		if (Endpoint_BytesInEndpoint())
 800245a:	b973      	cbnz	r3, 800247a <CDC_Device_ReceiveByte+0x72>
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <CDC_Device_ReceiveByte+0xb4>)
 800245e:	222c      	movs	r2, #44	; 0x2c
 8002460:	fb02 3000 	mla	r0, r2, r0, r3
 8002464:	8983      	ldrh	r3, [r0, #12]
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 8002466:	b1db      	cbz	r3, 80024a0 <CDC_Device_ReceiveByte+0x98>
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 8002468:	4620      	mov	r0, r4
 800246a:	bd10      	pop	{r4, pc}
			return ep->InBytesAvailable;
 800246c:	222c      	movs	r2, #44	; 0x2c
 800246e:	fb02 1303 	mla	r3, r2, r3, r1
		if (Endpoint_BytesInEndpoint())
 8002472:	8b9b      	ldrh	r3, [r3, #28]
	int16_t ReceivedByte = -1;
 8002474:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		if (Endpoint_BytesInEndpoint())
 8002478:	b163      	cbz	r3, 8002494 <CDC_Device_ReceiveByte+0x8c>
		  ReceivedByte = Endpoint_Read_8();
 800247a:	f000 fa29 	bl	80028d0 <Endpoint_Read_8>
 800247e:	b204      	sxth	r4, r0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <CDC_Device_ReceiveByte+0xb4>)
 8002482:	f892 013c 	ldrb.w	r0, [r2, #316]	; 0x13c
		if (ep->Direction)
 8002486:	232c      	movs	r3, #44	; 0x2c
 8002488:	fb03 2300 	mla	r3, r3, r0, r2
 800248c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	dae3      	bge.n	800245c <CDC_Device_ReceiveByte+0x54>
			return ep->InBytesAvailable;
 8002494:	4a09      	ldr	r2, [pc, #36]	; (80024bc <CDC_Device_ReceiveByte+0xb4>)
 8002496:	232c      	movs	r3, #44	; 0x2c
 8002498:	fb03 2000 	mla	r0, r3, r0, r2
 800249c:	8b83      	ldrh	r3, [r0, #28]
 800249e:	e7e2      	b.n	8002466 <CDC_Device_ReceiveByte+0x5e>
		  Endpoint_ClearOUT();
 80024a0:	f000 f952 	bl	8002748 <Endpoint_ClearOUT>
 80024a4:	e7e0      	b.n	8002468 <CDC_Device_ReceiveByte+0x60>
	  return -1;
 80024a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024aa:	e7dd      	b.n	8002468 <CDC_Device_ReceiveByte+0x60>
 80024ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024b0:	e7da      	b.n	8002468 <CDC_Device_ReceiveByte+0x60>
	int16_t ReceivedByte = -1;
 80024b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024b6:	e7d7      	b.n	8002468 <CDC_Device_ReceiveByte+0x60>
 80024b8:	20000ef5 	.word	0x20000ef5
 80024bc:	20000ba8 	.word	0x20000ba8

080024c0 <CDC_Device_SendControlLineStateChange>:

void CDC_Device_SendControlLineStateChange(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <CDC_Device_SendControlLineStateChange+0x58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d000      	beq.n	80024cc <CDC_Device_SendControlLineStateChange+0xc>
 80024ca:	4770      	bx	lr
 80024cc:	6983      	ldr	r3, [r0, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0fb      	beq.n	80024ca <CDC_Device_SendControlLineStateChange+0xa>
{
 80024d2:	b510      	push	{r4, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	4604      	mov	r4, r0
	  return;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);
 80024d8:	7b83      	ldrb	r3, [r0, #14]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <CDC_Device_SendControlLineStateChange+0x5c>)
 80024dc:	f003 010f 	and.w	r1, r3, #15
 80024e0:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80024e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80024e8:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d

	USB_Request_Header_t Notification = (USB_Request_Header_t)
 80024ec:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <CDC_Device_SendControlLineStateChange+0x60>)
 80024ee:	466b      	mov	r3, sp
 80024f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024f4:	e883 0003 	stmia.w	r3, {r0, r1}
			.wValue        = CPU_TO_LE16(0),
			.wIndex        = CPU_TO_LE16(0),
			.wLength       = CPU_TO_LE16(sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost)),
		};

	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2108      	movs	r1, #8
 80024fc:	4618      	mov	r0, r3
 80024fe:	f001 f94f 	bl	80037a0 <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
 8002502:	2200      	movs	r2, #0
 8002504:	2102      	movs	r1, #2
 8002506:	f104 0016 	add.w	r0, r4, #22
 800250a:	f001 f949 	bl	80037a0 <Endpoint_Write_Stream_LE>
	                         sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
	                         NULL);
	Endpoint_ClearIN();
 800250e:	f000 f949 	bl	80027a4 <Endpoint_ClearIN>
}
 8002512:	b002      	add	sp, #8
 8002514:	bd10      	pop	{r4, pc}
 8002516:	bf00      	nop
 8002518:	20000ef5 	.word	0x20000ef5
 800251c:	20000ba8 	.word	0x20000ba8
 8002520:	08004e20 	.word	0x08004e20

08002524 <EVENT_CDC_Device_LineEncodingChanged>:
}
#endif

__WEAK void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
}
 8002524:	4770      	bx	lr

08002526 <EVENT_CDC_Device_ControLineStateChanged>:

__WEAK void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
}
 8002526:	4770      	bx	lr

08002528 <EVENT_CDC_Device_BreakSent>:

__WEAK void EVENT_CDC_Device_BreakSent(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
				                               const uint8_t Duration)
{
}
 8002528:	4770      	bx	lr
	...

0800252c <CDC_Device_ProcessControlRequest>:
		return device.IsSetupRecieved;
 800252c:	4b48      	ldr	r3, [pc, #288]	; (8002650 <CDC_Device_ProcessControlRequest+0x124>)
 800252e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
	if (!(Endpoint_IsSETUPReceived()))
 8002532:	f013 0f02 	tst.w	r3, #2
 8002536:	d004      	beq.n	8002542 <CDC_Device_ProcessControlRequest+0x16>
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <CDC_Device_ProcessControlRequest+0x128>)
 800253a:	889a      	ldrh	r2, [r3, #4]
 800253c:	7803      	ldrb	r3, [r0, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d000      	beq.n	8002544 <CDC_Device_ProcessControlRequest+0x18>
 8002542:	4770      	bx	lr
{
 8002544:	b510      	push	{r4, lr}
 8002546:	4604      	mov	r4, r0
	switch (USB_ControlRequest.bRequest)
 8002548:	4b42      	ldr	r3, [pc, #264]	; (8002654 <CDC_Device_ProcessControlRequest+0x128>)
 800254a:	785b      	ldrb	r3, [r3, #1]
 800254c:	3b20      	subs	r3, #32
 800254e:	2b03      	cmp	r3, #3
 8002550:	d85b      	bhi.n	800260a <CDC_Device_ProcessControlRequest+0xde>
 8002552:	e8df f003 	tbb	[pc, r3]
 8002556:	022a      	.short	0x022a
 8002558:	6b56      	.short	0x6b56
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 800255a:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <CDC_Device_ProcessControlRequest+0x128>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2ba1      	cmp	r3, #161	; 0xa1
 8002560:	d153      	bne.n	800260a <CDC_Device_ProcessControlRequest+0xde>
		device.IsSetupRecieved = 0;
 8002562:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <CDC_Device_ProcessControlRequest+0x124>)
 8002564:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002568:	f36f 0341 	bfc	r3, #1, #1
 800256c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002570:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
		return ep->InInUse == 0 && ep->IsEnabled;
 8002574:	4b36      	ldr	r3, [pc, #216]	; (8002650 <CDC_Device_ProcessControlRequest+0x124>)
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 3202 	mla	r2, r1, r2, r3
 800257c:	6893      	ldr	r3, [r2, #8]
 800257e:	f013 0f10 	tst.w	r3, #16
 8002582:	d1fb      	bne.n	800257c <CDC_Device_ProcessControlRequest+0x50>
 8002584:	7a13      	ldrb	r3, [r2, #8]
 8002586:	f013 0f02 	tst.w	r3, #2
 800258a:	d0f7      	beq.n	800257c <CDC_Device_ProcessControlRequest+0x50>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 800258c:	69a0      	ldr	r0, [r4, #24]
 800258e:	f000 f9b7 	bl	8002900 <Endpoint_Write_32_LE>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8002592:	7f20      	ldrb	r0, [r4, #28]
 8002594:	f000 f982 	bl	800289c <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8002598:	7f60      	ldrb	r0, [r4, #29]
 800259a:	f000 f97f 	bl	800289c <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 800259e:	7fa0      	ldrb	r0, [r4, #30]
 80025a0:	f000 f97c 	bl	800289c <Endpoint_Write_8>
				Endpoint_ClearIN();
 80025a4:	f000 f8fe 	bl	80027a4 <Endpoint_ClearIN>
 80025a8:	e02f      	b.n	800260a <CDC_Device_ProcessControlRequest+0xde>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <CDC_Device_ProcessControlRequest+0x128>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b21      	cmp	r3, #33	; 0x21
 80025b0:	d12b      	bne.n	800260a <CDC_Device_ProcessControlRequest+0xde>
		device.IsSetupRecieved = 0;
 80025b2:	4a27      	ldr	r2, [pc, #156]	; (8002650 <CDC_Device_ProcessControlRequest+0x124>)
 80025b4:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80025b8:	f36f 0341 	bfc	r3, #1, #1
 80025bc:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80025c0:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
		return ep->IsOutRecieved;
 80025c4:	4b22      	ldr	r3, [pc, #136]	; (8002650 <CDC_Device_ProcessControlRequest+0x124>)
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 3202 	mla	r2, r1, r2, r3
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 80025cc:	4922      	ldr	r1, [pc, #136]	; (8002658 <CDC_Device_ProcessControlRequest+0x12c>)
 80025ce:	6893      	ldr	r3, [r2, #8]
				while (!(Endpoint_IsOUTReceived()))
 80025d0:	f013 0f20 	tst.w	r3, #32
 80025d4:	d103      	bne.n	80025de <CDC_Device_ProcessControlRequest+0xb2>
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 80025d6:	780b      	ldrb	r3, [r1, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f8      	bne.n	80025ce <CDC_Device_ProcessControlRequest+0xa2>
 80025dc:	e015      	b.n	800260a <CDC_Device_ProcessControlRequest+0xde>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 80025de:	f000 f9a9 	bl	8002934 <Endpoint_Read_32_LE>
 80025e2:	61a0      	str	r0, [r4, #24]
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 80025e4:	f000 f974 	bl	80028d0 <Endpoint_Read_8>
 80025e8:	7720      	strb	r0, [r4, #28]
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 80025ea:	f000 f971 	bl	80028d0 <Endpoint_Read_8>
 80025ee:	7760      	strb	r0, [r4, #29]
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 80025f0:	f000 f96e 	bl	80028d0 <Endpoint_Read_8>
 80025f4:	77a0      	strb	r0, [r4, #30]
				Endpoint_ClearOUT();
 80025f6:	f000 f8a7 	bl	8002748 <Endpoint_ClearOUT>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 80025fa:	4620      	mov	r0, r4
 80025fc:	f7ff ff92 	bl	8002524 <EVENT_CDC_Device_LineEncodingChanged>
 8002600:	e003      	b.n	800260a <CDC_Device_ProcessControlRequest+0xde>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <CDC_Device_ProcessControlRequest+0x128>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b21      	cmp	r3, #33	; 0x21
 8002608:	d000      	beq.n	800260c <CDC_Device_ProcessControlRequest+0xe0>
}
 800260a:	bd10      	pop	{r4, pc}
		device.IsSetupRecieved = 0;
 800260c:	4a10      	ldr	r2, [pc, #64]	; (8002650 <CDC_Device_ProcessControlRequest+0x124>)
 800260e:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002612:	f36f 0341 	bfc	r3, #1, #1
 8002616:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 800261a:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <CDC_Device_ProcessControlRequest+0x128>)
 800261c:	7893      	ldrb	r3, [r2, #2]
 800261e:	78d2      	ldrb	r2, [r2, #3]
 8002620:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002624:	8283      	strh	r3, [r0, #20]
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 8002626:	f7ff ff7e 	bl	8002526 <EVENT_CDC_Device_ControLineStateChanged>
 800262a:	e7ee      	b.n	800260a <CDC_Device_ProcessControlRequest+0xde>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <CDC_Device_ProcessControlRequest+0x128>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b21      	cmp	r3, #33	; 0x21
 8002632:	d1ea      	bne.n	800260a <CDC_Device_ProcessControlRequest+0xde>
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <CDC_Device_ProcessControlRequest+0x124>)
 8002636:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800263a:	f36f 0341 	bfc	r3, #1, #1
 800263e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <CDC_Device_ProcessControlRequest+0x128>)
 8002644:	8859      	ldrh	r1, [r3, #2]
 8002646:	b2c9      	uxtb	r1, r1
 8002648:	f7ff ff6e 	bl	8002528 <EVENT_CDC_Device_BreakSent>
 800264c:	e7dd      	b.n	800260a <CDC_Device_ProcessControlRequest+0xde>
 800264e:	bf00      	nop
 8002650:	20000ba8 	.word	0x20000ba8
 8002654:	20000ef8 	.word	0x20000ef8
 8002658:	20000ef5 	.word	0x20000ef5

0800265c <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <USB_USBTask+0x44>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b1eb      	cbz	r3, 800269e <USB_USBTask+0x42>
{
 8002662:	b510      	push	{r4, lr}
	 *  \return Index of the currently selected endpoint.
	 */
	static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetCurrentEndpoint(void)
	{
		return device.CurrentDirection | device.CurrentEndpoint;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <USB_USBTask+0x48>)
 8002666:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
 800266a:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 800266e:	4314      	orrs	r4, r2
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002670:	2200      	movs	r2, #0
 8002672:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002676:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 800267a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 800267e:	f013 0f02 	tst.w	r3, #2
 8002682:	d109      	bne.n	8002698 <USB_USBTask+0x3c>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <USB_USBTask+0x48>)
 8002686:	f004 020f 	and.w	r2, r4, #15
 800268a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800268e:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
 8002692:	f883 413d 	strb.w	r4, [r3, #317]	; 0x13d
}
 8002696:	bd10      	pop	{r4, pc}
	  USB_Device_ProcessControlRequest();
 8002698:	f7fe f996 	bl	80009c8 <USB_Device_ProcessControlRequest>
 800269c:	e7f2      	b.n	8002684 <USB_USBTask+0x28>
 800269e:	4770      	bx	lr
 80026a0:	20000ef5 	.word	0x20000ef5
 80026a4:	20000ba8 	.word	0x20000ba8

080026a8 <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 80026a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <Endpoint_WaitUntilReady+0x98>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	4798      	blx	r3
 80026b4:	4606      	mov	r6, r0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 80026b6:	2764      	movs	r7, #100	; 0x64
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80026b8:	4c21      	ldr	r4, [pc, #132]	; (8002740 <Endpoint_WaitUntilReady+0x98>)
		return ep->Address & ENDPOINT_DIR_MASK;
 80026ba:	252c      	movs	r5, #44	; 0x2c
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 80026bc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8002744 <Endpoint_WaitUntilReady+0x9c>
 80026c0:	e001      	b.n	80026c6 <Endpoint_WaitUntilReady+0x1e>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 80026c2:	461f      	mov	r7, r3
 80026c4:	4606      	mov	r6, r0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80026c6:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 80026ca:	fb05 4203 	mla	r2, r5, r3, r4
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 80026ce:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80026d2:	2a00      	cmp	r2, #0
 80026d4:	db1d      	blt.n	8002712 <Endpoint_WaitUntilReady+0x6a>
		return ep->IsOutRecieved;
 80026d6:	fb05 4203 	mla	r2, r5, r3, r4
 80026da:	6892      	ldr	r2, [r2, #8]
			if (Endpoint_IsOUTReceived())
 80026dc:	f012 0f20 	tst.w	r2, #32
 80026e0:	d126      	bne.n	8002730 <Endpoint_WaitUntilReady+0x88>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 80026e2:	f898 2000 	ldrb.w	r2, [r8]
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 80026e6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80026ea:	b31a      	cbz	r2, 8002734 <Endpoint_WaitUntilReady+0x8c>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 80026ec:	2905      	cmp	r1, #5
 80026ee:	d023      	beq.n	8002738 <Endpoint_WaitUntilReady+0x90>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 80026f0:	fb05 4303 	mla	r3, r5, r3, r4
 80026f4:	7a1b      	ldrb	r3, [r3, #8]
		else if (Endpoint_IsStalled())
 80026f6:	f013 0f04 	tst.w	r3, #4
 80026fa:	d11f      	bne.n	800273c <Endpoint_WaitUntilReady+0x94>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002700:	4798      	blx	r3
		if (CurrentFrameNumber != PreviousFrameNumber)
 8002702:	4286      	cmp	r6, r0
 8002704:	d0de      	beq.n	80026c4 <Endpoint_WaitUntilReady+0x1c>
			if (!(TimeoutMSRem--))
 8002706:	1e7b      	subs	r3, r7, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2f00      	cmp	r7, #0
 800270c:	d1d9      	bne.n	80026c2 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_Timeout;
 800270e:	2004      	movs	r0, #4
 8002710:	e00c      	b.n	800272c <Endpoint_WaitUntilReady+0x84>
		return ep->InInUse == 0 && ep->IsEnabled;
 8002712:	fb05 4203 	mla	r2, r5, r3, r4
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	f012 0f10 	tst.w	r2, #16
 800271c:	d1e1      	bne.n	80026e2 <Endpoint_WaitUntilReady+0x3a>
 800271e:	fb05 4203 	mla	r2, r5, r3, r4
 8002722:	7a12      	ldrb	r2, [r2, #8]
 8002724:	f012 0f02 	tst.w	r2, #2
 8002728:	d0db      	beq.n	80026e2 <Endpoint_WaitUntilReady+0x3a>
			  return ENDPOINT_READYWAIT_NoError;
 800272a:	2000      	movs	r0, #0
		}
	}
}
 800272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  return ENDPOINT_READYWAIT_NoError;
 8002730:	2000      	movs	r0, #0
 8002732:	e7fb      	b.n	800272c <Endpoint_WaitUntilReady+0x84>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8002734:	2002      	movs	r0, #2
 8002736:	e7f9      	b.n	800272c <Endpoint_WaitUntilReady+0x84>
		  return ENDPOINT_READYWAIT_BusSuspended;
 8002738:	2003      	movs	r0, #3
 800273a:	e7f7      	b.n	800272c <Endpoint_WaitUntilReady+0x84>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 800273c:	2001      	movs	r0, #1
 800273e:	e7f5      	b.n	800272c <Endpoint_WaitUntilReady+0x84>
 8002740:	20000ba8 	.word	0x20000ba8
 8002744:	20000ef5 	.word	0x20000ef5

08002748 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 8002748:	b538      	push	{r3, r4, r5, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800274a:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <Endpoint_ClearOUT+0x58>)
 800274c:	f892 513c 	ldrb.w	r5, [r2, #316]	; 0x13c
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 8002750:	232c      	movs	r3, #44	; 0x2c
 8002752:	fb03 2305 	mla	r3, r3, r5, r2
 8002756:	7a1b      	ldrb	r3, [r3, #8]
 8002758:	f013 0f02 	tst.w	r3, #2
 800275c:	d01e      	beq.n	800279c <Endpoint_ClearOUT+0x54>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 800275e:	242c      	movs	r4, #44	; 0x2c
 8002760:	fb04 2405 	mla	r4, r4, r5, r2
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	69a2      	ldr	r2, [r4, #24]
 800276a:	6961      	ldr	r1, [r4, #20]
 800276c:	7920      	ldrb	r0, [r4, #4]
 800276e:	4798      	blx	r3
 8002770:	60e0      	str	r0, [r4, #12]
	ep->OutOffset = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	6123      	str	r3, [r4, #16]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8002776:	68a3      	ldr	r3, [r4, #8]
 8002778:	f013 0f08 	tst.w	r3, #8
 800277c:	d10e      	bne.n	800279c <Endpoint_ClearOUT+0x54>
 800277e:	b968      	cbnz	r0, 800279c <Endpoint_ClearOUT+0x54>
		ep->OutInUse = true;
 8002780:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <Endpoint_ClearOUT+0x58>)
 8002782:	8923      	ldrh	r3, [r4, #8]
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	8123      	strh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
 800278a:	8923      	ldrh	r3, [r4, #8]
 800278c:	f36f 1345 	bfc	r3, #5, #1
 8002790:	8123      	strh	r3, [r4, #8]
		device.Driver->EndpointReadStart(ep->Address,
 8002792:	6813      	ldr	r3, [r2, #0]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	69a1      	ldr	r1, [r4, #24]
 8002798:	7920      	ldrb	r0, [r4, #4]
 800279a:	4798      	blx	r3
				ep->OutBufferLength);
	}
}
 800279c:	bd38      	pop	{r3, r4, r5, pc}
 800279e:	bf00      	nop
 80027a0:	20000ba8 	.word	0x20000ba8

080027a4 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80027a6:	4a2a      	ldr	r2, [pc, #168]	; (8002850 <Endpoint_ClearIN+0xac>)
 80027a8:	f892 513c 	ldrb.w	r5, [r2, #316]	; 0x13c
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 80027ac:	232c      	movs	r3, #44	; 0x2c
 80027ae:	fb03 2305 	mla	r3, r3, r5, r2
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f013 0f10 	tst.w	r3, #16
 80027b8:	d12e      	bne.n	8002818 <Endpoint_ClearIN+0x74>
 80027ba:	232c      	movs	r3, #44	; 0x2c
 80027bc:	fb03 2305 	mla	r3, r3, r5, r2
 80027c0:	7a1b      	ldrb	r3, [r3, #8]
 80027c2:	f013 0f02 	tst.w	r3, #2
 80027c6:	d027      	beq.n	8002818 <Endpoint_ClearIN+0x74>
		return;
	ep->InInUse = true;
 80027c8:	242c      	movs	r4, #44	; 0x2c
 80027ca:	fb04 2405 	mla	r4, r4, r5, r2
 80027ce:	8923      	ldrh	r3, [r4, #8]
 80027d0:	f043 0310 	orr.w	r3, r3, #16
 80027d4:	8123      	strh	r3, [r4, #8]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 80027d6:	6a23      	ldr	r3, [r4, #32]
 80027d8:	62e3      	str	r3, [r4, #44]	; 0x2c
	ep->InDataLeft = ep->InBytesAvailable;
 80027da:	69e3      	ldr	r3, [r4, #28]
 80027dc:	62a3      	str	r3, [r4, #40]	; 0x28
	ep->InBytesAvailable = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	61e3      	str	r3, [r4, #28]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80027e2:	4e1c      	ldr	r6, [pc, #112]	; (8002854 <Endpoint_ClearIN+0xb0>)
 80027e4:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80027e8:	f8c6 708c 	str.w	r7, [r6, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027f0:	f3bf 8f6f 	isb	sy
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 80027f4:	6813      	ldr	r3, [r2, #0]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80027fc:	7920      	ldrb	r0, [r4, #4]
 80027fe:	4798      	blx	r3
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002800:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002802:	4402      	add	r2, r0
 8002804:	62e2      	str	r2, [r4, #44]	; 0x2c
	ep->InDataLeft -= data_count;
 8002806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002808:	1a1b      	subs	r3, r3, r0
 800280a:	62a3      	str	r3, [r4, #40]	; 0x28
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800280c:	60f7      	str	r7, [r6, #12]
	NVIC_EnableIRQ(USB0_0_IRQn);
	if((zlp_flag == true) && (ep->Number != 0))
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <Endpoint_ClearIN+0xb4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d000      	beq.n	800281a <Endpoint_ClearIN+0x76>
	  ep->InInUse = true;
	  device.Driver->EndpointWrite(ep->Address,
	  			ep->InDataBuffer,0);
	  zlp_flag = false;
	}
}
 8002818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((zlp_flag == true) && (ep->Number != 0))
 800281a:	7920      	ldrb	r0, [r4, #4]
 800281c:	f010 0f0f 	tst.w	r0, #15
 8002820:	d0fa      	beq.n	8002818 <Endpoint_ClearIN+0x74>
	  while(ep->InInUse)
 8002822:	4622      	mov	r2, r4
 8002824:	6893      	ldr	r3, [r2, #8]
 8002826:	f013 0f10 	tst.w	r3, #16
 800282a:	d1fb      	bne.n	8002824 <Endpoint_ClearIN+0x80>
	  ep->InInUse = true;
 800282c:	4a08      	ldr	r2, [pc, #32]	; (8002850 <Endpoint_ClearIN+0xac>)
 800282e:	232c      	movs	r3, #44	; 0x2c
 8002830:	fb03 2505 	mla	r5, r3, r5, r2
 8002834:	892b      	ldrh	r3, [r5, #8]
 8002836:	f043 0310 	orr.w	r3, r3, #16
 800283a:	812b      	strh	r3, [r5, #8]
	  device.Driver->EndpointWrite(ep->Address,
 800283c:	6813      	ldr	r3, [r2, #0]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	2200      	movs	r2, #0
 8002842:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002844:	4798      	blx	r3
	  zlp_flag = false;
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <Endpoint_ClearIN+0xb4>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e7e4      	b.n	8002818 <Endpoint_ClearIN+0x74>
 800284e:	bf00      	nop
 8002850:	20000ba8 	.word	0x20000ba8
 8002854:	e000e100 	.word	0xe000e100
 8002858:	200008a8 	.word	0x200008a8

0800285c <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800285c:	490e      	ldr	r1, [pc, #56]	; (8002898 <Endpoint_IsReadWriteAllowed+0x3c>)
 800285e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Retval = false;

	if(EndPoint->Direction)
 8002862:	222c      	movs	r2, #44	; 0x2c
 8002864:	fb02 1203 	mla	r2, r2, r3, r1
 8002868:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800286c:	2a00      	cmp	r2, #0
 800286e:	db08      	blt.n	8002882 <Endpoint_IsReadWriteAllowed+0x26>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <Endpoint_IsReadWriteAllowed+0x3c>)
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 2303 	mla	r3, r1, r3, r2
 8002878:	68d8      	ldr	r0, [r3, #12]
 800287a:	3000      	adds	r0, #0
 800287c:	bf18      	it	ne
 800287e:	2001      	movne	r0, #1
	}
	return Retval;
}
 8002880:	4770      	bx	lr
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 8002882:	460a      	mov	r2, r1
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 2303 	mla	r3, r1, r3, r2
 800288a:	69d8      	ldr	r0, [r3, #28]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	4298      	cmp	r0, r3
 8002890:	bf2c      	ite	cs
 8002892:	2000      	movcs	r0, #0
 8002894:	2001      	movcc	r0, #1
 8002896:	4770      	bx	lr
 8002898:	20000ba8 	.word	0x20000ba8

0800289c <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 800289c:	b410      	push	{r4}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <Endpoint_Write_8+0x30>)
 80028a0:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	bool Success = false;

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 80028a4:	222c      	movs	r2, #44	; 0x2c
 80028a6:	fb02 3201 	mla	r2, r2, r1, r3
 80028aa:	69d3      	ldr	r3, [r2, #28]
 80028ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d2fd      	bcs.n	80028ae <Endpoint_Write_8+0x12>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 80028b2:	4a06      	ldr	r2, [pc, #24]	; (80028cc <Endpoint_Write_8+0x30>)
 80028b4:	242c      	movs	r4, #44	; 0x2c
 80028b6:	fb04 2201 	mla	r2, r4, r1, r2
 80028ba:	6a11      	ldr	r1, [r2, #32]
 80028bc:	54c8      	strb	r0, [r1, r3]
	      EndPoint->InBytesAvailable++;
 80028be:	69d3      	ldr	r3, [r2, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61d3      	str	r3, [r2, #28]

	      Success = true;
	    }
	  }while(!Success);
}
 80028c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000ba8 	.word	0x20000ba8

080028d0 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80028d0:	490a      	ldr	r1, [pc, #40]	; (80028fc <Endpoint_Read_8+0x2c>)
 80028d2:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Success = false;
	uint8_t data = 0;
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 80028d6:	222c      	movs	r2, #44	; 0x2c
 80028d8:	fb02 1203 	mla	r2, r2, r3, r1
 80028dc:	68d2      	ldr	r2, [r2, #12]
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d0fd      	beq.n	80028de <Endpoint_Read_8+0xe>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 80028e2:	4906      	ldr	r1, [pc, #24]	; (80028fc <Endpoint_Read_8+0x2c>)
 80028e4:	202c      	movs	r0, #44	; 0x2c
 80028e6:	fb00 1303 	mla	r3, r0, r3, r1
 80028ea:	6919      	ldr	r1, [r3, #16]
 80028ec:	6958      	ldr	r0, [r3, #20]
 80028ee:	5c40      	ldrb	r0, [r0, r1]
          EndPoint->OutOffset++;
 80028f0:	3101      	adds	r1, #1
 80028f2:	6119      	str	r1, [r3, #16]
          EndPoint->OutBytesAvailable--;
 80028f4:	3a01      	subs	r2, #1
 80028f6:	60da      	str	r2, [r3, #12]
		  Success = true;
		}
	  }while(!Success);
	 return data;
}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000ba8 	.word	0x20000ba8

08002900 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8002900:	b410      	push	{r4}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <Endpoint_Write_32_LE+0x30>)
 8002904:	f892 113c 	ldrb.w	r1, [r2, #316]	; 0x13c
	bool Success = false;

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8002908:	232c      	movs	r3, #44	; 0x2c
 800290a:	fb03 2301 	mla	r3, r3, r1, r2
 800290e:	69da      	ldr	r2, [r3, #28]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	3b03      	subs	r3, #3
 8002914:	429a      	cmp	r2, r3
 8002916:	d2fd      	bcs.n	8002914 <Endpoint_Write_32_LE+0x14>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <Endpoint_Write_32_LE+0x30>)
 800291a:	242c      	movs	r4, #44	; 0x2c
 800291c:	fb04 3301 	mla	r3, r4, r1, r3
 8002920:	6a19      	ldr	r1, [r3, #32]
 8002922:	5088      	str	r0, [r1, r2]
			EndPoint->InBytesAvailable+=4;
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	3204      	adds	r2, #4
 8002928:	61da      	str	r2, [r3, #28]

			Success = true;
		}
	}while(!Success);
}
 800292a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	20000ba8 	.word	0x20000ba8

08002934 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002934:	490a      	ldr	r1, [pc, #40]	; (8002960 <Endpoint_Read_32_LE+0x2c>)
 8002936:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 800293a:	222c      	movs	r2, #44	; 0x2c
 800293c:	fb02 1203 	mla	r2, r2, r3, r1
 8002940:	68d2      	ldr	r2, [r2, #12]
 8002942:	2a03      	cmp	r2, #3
 8002944:	d9fd      	bls.n	8002942 <Endpoint_Read_32_LE+0xe>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8002946:	4906      	ldr	r1, [pc, #24]	; (8002960 <Endpoint_Read_32_LE+0x2c>)
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 1303 	mla	r3, r0, r3, r1
 800294e:	6919      	ldr	r1, [r3, #16]
 8002950:	6958      	ldr	r0, [r3, #20]
 8002952:	5840      	ldr	r0, [r0, r1]
			EndPoint->OutOffset+=4;
 8002954:	3104      	adds	r1, #4
 8002956:	6119      	str	r1, [r3, #16]
			EndPoint->OutBytesAvailable-=4;
 8002958:	3a04      	subs	r2, #4
 800295a:	60da      	str	r2, [r3, #12]

			Success = true;
		}
	} while(!Success);
	return data;
}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000ba8 	.word	0x20000ba8

08002964 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8002964:	2900      	cmp	r1, #0
 8002966:	d030      	beq.n	80029ca <Endpoint_ConfigureEndpointTable+0x66>
			                                     const uint8_t Entries) {
 8002968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296c:	4604      	mov	r4, r0
 800296e:	1e4f      	subs	r7, r1, #1
 8002970:	b2ff      	uxtb	r7, r7
 8002972:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002976:	3006      	adds	r0, #6
 8002978:	eb00 0747 	add.w	r7, r0, r7, lsl #1
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 800297c:	4e15      	ldr	r6, [pc, #84]	; (80029d4 <Endpoint_ConfigureEndpointTable+0x70>)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 800297e:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8002982:	e002      	b.n	800298a <Endpoint_ConfigureEndpointTable+0x26>
 8002984:	3406      	adds	r4, #6
	for (i=0;i<Entries;i++) {
 8002986:	42bc      	cmp	r4, r7
 8002988:	d01d      	beq.n	80029c6 <Endpoint_ConfigureEndpointTable+0x62>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 800298a:	7820      	ldrb	r0, [r4, #0]
 800298c:	f000 050f 	and.w	r5, r0, #15
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8002990:	6833      	ldr	r3, [r6, #0]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	8862      	ldrh	r2, [r4, #2]
 8002996:	7921      	ldrb	r1, [r4, #4]
 8002998:	4798      	blx	r3
 800299a:	b9c0      	cbnz	r0, 80029ce <Endpoint_ConfigureEndpointTable+0x6a>
		device.Endpoints[Number].Address = Table[i].Address;
 800299c:	7823      	ldrb	r3, [r4, #0]
 800299e:	fb08 6205 	mla	r2, r8, r5, r6
 80029a2:	7113      	strb	r3, [r2, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 80029a4:	8913      	ldrh	r3, [r2, #8]
 80029a6:	8861      	ldrh	r1, [r4, #2]
 80029a8:	f361 138c 	bfi	r3, r1, #6, #7
 80029ac:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
		device.Endpoints[Number].IsEnabled = 1;
 80029ae:	f043 0303 	orr.w	r3, r3, #3
 80029b2:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 80029b4:	7820      	ldrb	r0, [r4, #0]
 80029b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80029ba:	d1e3      	bne.n	8002984 <Endpoint_ConfigureEndpointTable+0x20>
			device.Driver->EndpointReadStart(Table[i].Address,
 80029bc:	6833      	ldr	r3, [r6, #0]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	6991      	ldr	r1, [r2, #24]
 80029c2:	4798      	blx	r3
 80029c4:	e7de      	b.n	8002984 <Endpoint_ConfigureEndpointTable+0x20>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 80029c6:	2001      	movs	r0, #1
 80029c8:	e002      	b.n	80029d0 <Endpoint_ConfigureEndpointTable+0x6c>
 80029ca:	2001      	movs	r0, #1
}
 80029cc:	4770      	bx	lr
			return false;
 80029ce:	2000      	movs	r0, #0
}
 80029d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029d4:	20000ba8 	.word	0x20000ba8

080029d8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80029d8:	b510      	push	{r4, lr}
 80029da:	4604      	mov	r4, r0
  uint32_t i;

  SystemCoreClockUpdate();
 80029dc:	f001 f928 	bl	8003c30 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <XMC_SCU_lDelay+0x28>)
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <XMC_SCU_lDelay+0x2c>)
 80029e6:	fba3 3000 	umull	r3, r0, r3, r0
 80029ea:	0c80      	lsrs	r0, r0, #18
 80029ec:	fb04 f000 	mul.w	r0, r4, r0

  for (i = 0U; i < delay; ++i)
 80029f0:	b120      	cbz	r0, 80029fc <XMC_SCU_lDelay+0x24>
 80029f2:	2300      	movs	r3, #0
  {
    __NOP();
 80029f4:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 80029f6:	3301      	adds	r3, #1
 80029f8:	4298      	cmp	r0, r3
 80029fa:	d1fb      	bne.n	80029f4 <XMC_SCU_lDelay+0x1c>
  }
}
 80029fc:	bd10      	pop	{r4, pc}
 80029fe:	bf00      	nop
 8002a00:	2000ffc0 	.word	0x2000ffc0
 8002a04:	431bde83 	.word	0x431bde83

08002a08 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8002a08:	4a02      	ldr	r2, [pc, #8]	; (8002a14 <XMC_SCU_INTERRUPT_EnableEvent+0xc>)
 8002a0a:	6893      	ldr	r3, [r2, #8]
 8002a0c:	4318      	orrs	r0, r3
 8002a0e:	6090      	str	r0, [r2, #8]
}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	50004074 	.word	0x50004074

08002a18 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8002a18:	4a02      	ldr	r2, [pc, #8]	; (8002a24 <XMC_SCU_INTERRUPT_DisableEvent+0xc>)
 8002a1a:	6893      	ldr	r3, [r2, #8]
 8002a1c:	ea23 0000 	bic.w	r0, r3, r0
 8002a20:	6090      	str	r0, [r2, #8]
}
 8002a22:	4770      	bx	lr
 8002a24:	50004074 	.word	0x50004074

08002a28 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8002a28:	4a02      	ldr	r2, [pc, #8]	; (8002a34 <XMC_SCU_INTERRUPT_TriggerEvent+0xc>)
 8002a2a:	6913      	ldr	r3, [r2, #16]
 8002a2c:	4318      	orrs	r0, r3
 8002a2e:	6110      	str	r0, [r2, #16]
}
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	50004074 	.word	0x50004074

08002a38 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8002a38:	4b01      	ldr	r3, [pc, #4]	; (8002a40 <XMC_SCU_INTERUPT_GetEventStatus+0x8>)
 8002a3a:	6858      	ldr	r0, [r3, #4]
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	50004074 	.word	0x50004074

08002a44 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8002a44:	4b01      	ldr	r3, [pc, #4]	; (8002a4c <XMC_SCU_INTERRUPT_ClearEventStatus+0x8>)
 8002a46:	60d8      	str	r0, [r3, #12]
}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	50004074 	.word	0x50004074

08002a50 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8002a50:	4b02      	ldr	r3, [pc, #8]	; (8002a5c <XMC_SCU_GetBootMode+0xc>)
 8002a52:	6918      	ldr	r0, [r3, #16]
}
 8002a54:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	50004000 	.word	0x50004000

08002a60 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8002a60:	4b01      	ldr	r3, [pc, #4]	; (8002a68 <XMC_SCU_SetBootMode+0x8>)
 8002a62:	6118      	str	r0, [r3, #16]
}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	50004000 	.word	0x50004000

08002a6c <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
  return (SCU_GENERAL->GPR[index]);
 8002a6c:	0080      	lsls	r0, r0, #2
 8002a6e:	4b01      	ldr	r3, [pc, #4]	; (8002a74 <XMC_SCU_ReadGPR+0x8>)
 8002a70:	5818      	ldr	r0, [r3, r0]
}
 8002a72:	4770      	bx	lr
 8002a74:	5000402c 	.word	0x5000402c

08002a78 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
  SCU_GENERAL->GPR[index] = data;
 8002a78:	0080      	lsls	r0, r0, #2
 8002a7a:	4b01      	ldr	r3, [pc, #4]	; (8002a80 <XMC_SCU_WriteGPR+0x8>)
 8002a7c:	5019      	str	r1, [r3, r0]
}
 8002a7e:	4770      	bx	lr
 8002a80:	5000402c 	.word	0x5000402c

08002a84 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8002a84:	0080      	lsls	r0, r0, #2
 8002a86:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 8002a8a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8002a8e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8002a92:	2301      	movs	r3, #1
 8002a94:	fa03 f101 	lsl.w	r1, r3, r1
 8002a98:	4311      	orrs	r1, r2
 8002a9a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
 8002a9e:	4770      	bx	lr

08002aa0 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8002aa0:	0080      	lsls	r0, r0, #2
 8002aa2:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 8002aa6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8002aaa:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8002aae:	2201      	movs	r2, #1
 8002ab0:	fa02 f101 	lsl.w	r1, r2, r1
 8002ab4:	ea23 0301 	bic.w	r3, r3, r1
 8002ab8:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 8002abc:	4770      	bx	lr
	...

08002ac0 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8002ac0:	02c9      	lsls	r1, r1, #11
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8002ac2:	f441 0108 	orr.w	r1, r1, #8912896	; 0x880000
 8002ac6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8002aca:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <XMC_SCU_CalibrateTemperatureSensor+0x14>)
 8002acc:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	50004000 	.word	0x50004000

08002ad8 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8002ad8:	4a03      	ldr	r2, [pc, #12]	; (8002ae8 <XMC_SCU_EnableTemperatureSensor+0x10>)
 8002ada:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002ae6:	4770      	bx	lr
 8002ae8:	50004000 	.word	0x50004000

08002aec <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <XMC_SCU_DisableTemperatureSensor+0x10>)
 8002aee:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002afa:	4770      	bx	lr
 8002afc:	50004000 	.word	0x50004000

08002b00 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <XMC_SCU_IsTemperatureSensorEnabled+0x10>)
 8002b02:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8002b06:	f080 0001 	eor.w	r0, r0, #1
}
 8002b0a:	f000 0001 	and.w	r0, r0, #1
 8002b0e:	4770      	bx	lr
 8002b10:	50004000 	.word	0x50004000

08002b14 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8002b14:	4b02      	ldr	r3, [pc, #8]	; (8002b20 <XMC_SCU_IsTemperatureSensorReady+0xc>)
 8002b16:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002b1a:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002b1e:	4770      	bx	lr
 8002b20:	50004000 	.word	0x50004000

08002b24 <XMC_SCU_GetTemperatureMeasurement>:
  return (status);
}

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8002b24:	b508      	push	{r3, lr}
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002b26:	f7ff ffeb 	bl	8002b00 <XMC_SCU_IsTemperatureSensorEnabled>
 8002b2a:	b128      	cbz	r0, 8002b38 <XMC_SCU_GetTemperatureMeasurement+0x14>
  {
    temperature = 0x7FFFFFFFUL;
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <XMC_SCU_GetTemperatureMeasurement+0x1c>)
 8002b2e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8002b32:	f3c0 0009 	ubfx	r0, r0, #0, #10
  }
  
  return ((uint32_t)temperature);
}
 8002b36:	bd08      	pop	{r3, pc}
    temperature = 0x7FFFFFFFUL;
 8002b38:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  return ((uint32_t)temperature);
 8002b3c:	e7fb      	b.n	8002b36 <XMC_SCU_GetTemperatureMeasurement+0x12>
 8002b3e:	bf00      	nop
 8002b40:	50004000 	.word	0x50004000

08002b44 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8002b44:	4b02      	ldr	r3, [pc, #8]	; (8002b50 <XMC_SCU_IsTemperatureSensorBusy+0xc>)
 8002b46:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002b4a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8002b4e:	4770      	bx	lr
 8002b50:	50004000 	.word	0x50004000

08002b54 <XMC_SCU_StartTemperatureMeasurement>:
{
 8002b54:	b510      	push	{r4, lr}
  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002b56:	f7ff ffd3 	bl	8002b00 <XMC_SCU_IsTemperatureSensorEnabled>
 8002b5a:	4604      	mov	r4, r0
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8002b5c:	f7ff fff2 	bl	8002b44 <XMC_SCU_IsTemperatureSensorBusy>
 8002b60:	b950      	cbnz	r0, 8002b78 <XMC_SCU_StartTemperatureMeasurement+0x24>
  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002b62:	f084 0001 	eor.w	r0, r4, #1
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8002b66:	b2c0      	uxtb	r0, r0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <XMC_SCU_StartTemperatureMeasurement+0x28>)
 8002b6a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8002b76:	bd10      	pop	{r4, pc}
    status = XMC_SCU_STATUS_BUSY;
 8002b78:	2002      	movs	r0, #2
 8002b7a:	e7f5      	b.n	8002b68 <XMC_SCU_StartTemperatureMeasurement+0x14>
 8002b7c:	50004000 	.word	0x50004000

08002b80 <XMC_SCU_WriteToRetentionMemory>:
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8002b80:	0400      	lsls	r0, r0, #16
 8002b82:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8002b86:	f040 0001 	orr.w	r0, r0, #1
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <XMC_SCU_WriteToRetentionMemory+0x24>)
 8002b8c:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8002b90:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8002b94:	461a      	mov	r2, r3
 8002b96:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b9a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002b9e:	d1fa      	bne.n	8002b96 <XMC_SCU_WriteToRetentionMemory+0x16>
  {
  }
}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	50004000 	.word	0x50004000

08002ba8 <XMC_SCU_ReadFromRetentionMemory>:
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8002ba8:	0400      	lsls	r0, r0, #16
 8002baa:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <XMC_SCU_ReadFromRetentionMemory+0x20>)
 8002bb0:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002bba:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002bbe:	d1fa      	bne.n	8002bb6 <XMC_SCU_ReadFromRetentionMemory+0xe>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8002bc0:	4b01      	ldr	r3, [pc, #4]	; (8002bc8 <XMC_SCU_ReadFromRetentionMemory+0x20>)
 8002bc2:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
}
 8002bc6:	4770      	bx	lr
 8002bc8:	50004000 	.word	0x50004000

08002bcc <XMC_SCU_TRAP_Enable>:
}

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8002bcc:	4a02      	ldr	r2, [pc, #8]	; (8002bd8 <XMC_SCU_TRAP_Enable+0xc>)
 8002bce:	6893      	ldr	r3, [r2, #8]
 8002bd0:	ea23 0000 	bic.w	r0, r3, r0
 8002bd4:	6090      	str	r0, [r2, #8]
}
 8002bd6:	4770      	bx	lr
 8002bd8:	50004160 	.word	0x50004160

08002bdc <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 8002bdc:	4a02      	ldr	r2, [pc, #8]	; (8002be8 <XMC_SCU_TRAP_Disable+0xc>)
 8002bde:	6893      	ldr	r3, [r2, #8]
 8002be0:	4318      	orrs	r0, r3
 8002be2:	6090      	str	r0, [r2, #8]
}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	50004160 	.word	0x50004160

08002bec <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
  return (SCU_TRAP->TRAPRAW);
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <XMC_SCU_TRAP_GetStatus+0x8>)
 8002bee:	6858      	ldr	r0, [r3, #4]
}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	50004160 	.word	0x50004160

08002bf8 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8002bf8:	4b01      	ldr	r3, [pc, #4]	; (8002c00 <XMC_SCU_TRAP_Trigger+0x8>)
 8002bfa:	6118      	str	r0, [r3, #16]
}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	50004160 	.word	0x50004160

08002c04 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8002c04:	4b01      	ldr	r3, [pc, #4]	; (8002c0c <XMC_SCU_TRAP_ClearStatus+0x8>)
 8002c06:	60d8      	str	r0, [r3, #12]
}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	50004160 	.word	0x50004160

08002c10 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8002c10:	4a02      	ldr	r2, [pc, #8]	; (8002c1c <XMC_SCU_PARITY_ClearStatus+0xc>)
 8002c12:	6953      	ldr	r3, [r2, #20]
 8002c14:	4318      	orrs	r0, r3
 8002c16:	6150      	str	r0, [r2, #20]
}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	5000413c 	.word	0x5000413c

08002c20 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
  return (SCU_PARITY->PEFLAG);
 8002c20:	4b01      	ldr	r3, [pc, #4]	; (8002c28 <XMC_SCU_PARITY_GetStatus+0x8>)
 8002c22:	6958      	ldr	r0, [r3, #20]
} 
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	5000413c 	.word	0x5000413c

08002c2c <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8002c2c:	4a02      	ldr	r2, [pc, #8]	; (8002c38 <XMC_SCU_PARITY_Enable+0xc>)
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	4318      	orrs	r0, r3
 8002c32:	6010      	str	r0, [r2, #0]
}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	5000413c 	.word	0x5000413c

08002c3c <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8002c3c:	4a02      	ldr	r2, [pc, #8]	; (8002c48 <XMC_SCU_PARITY_Disable+0xc>)
 8002c3e:	6813      	ldr	r3, [r2, #0]
 8002c40:	ea23 0000 	bic.w	r0, r3, r0
 8002c44:	6010      	str	r0, [r2, #0]
}
 8002c46:	4770      	bx	lr
 8002c48:	5000413c 	.word	0x5000413c

08002c4c <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8002c4c:	4a02      	ldr	r2, [pc, #8]	; (8002c58 <XMC_SCU_PARITY_EnableTrapGeneration+0xc>)
 8002c4e:	6893      	ldr	r3, [r2, #8]
 8002c50:	4318      	orrs	r0, r3
 8002c52:	6090      	str	r0, [r2, #8]
}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	5000413c 	.word	0x5000413c

08002c5c <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8002c5c:	4a02      	ldr	r2, [pc, #8]	; (8002c68 <XMC_SCU_PARITY_DisableTrapGeneration+0xc>)
 8002c5e:	6893      	ldr	r3, [r2, #8]
 8002c60:	ea23 0000 	bic.w	r0, r3, r0
 8002c64:	6090      	str	r0, [r2, #8]
}
 8002c66:	4770      	bx	lr
 8002c68:	5000413c 	.word	0x5000413c

08002c6c <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8002c6c:	4a02      	ldr	r2, [pc, #8]	; (8002c78 <XMC_SCU_INTERRUPT_EnableNmiRequest+0xc>)
 8002c6e:	6953      	ldr	r3, [r2, #20]
 8002c70:	4318      	orrs	r0, r3
 8002c72:	6150      	str	r0, [r2, #20]
}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	50004074 	.word	0x50004074

08002c7c <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8002c7c:	4a02      	ldr	r2, [pc, #8]	; (8002c88 <XMC_SCU_INTERRUPT_DisableNmiRequest+0xc>)
 8002c7e:	6953      	ldr	r3, [r2, #20]
 8002c80:	ea23 0000 	bic.w	r0, r3, r0
 8002c84:	6150      	str	r0, [r2, #20]
}
 8002c86:	4770      	bx	lr
 8002c88:	50004074 	.word	0x50004074

08002c8c <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002c8c:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8002c8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002c92:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8002c96:	4a02      	ldr	r2, [pc, #8]	; (8002ca0 <XMC_SCU_RESET_AssertPeripheralReset+0x14>)
 8002c98:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	50004410 	.word	0x50004410

08002ca4 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002ca4:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8002ca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002caa:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8002cae:	4a02      	ldr	r2, [pc, #8]	; (8002cb8 <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)
 8002cb0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	50004414 	.word	0x50004414

08002cbc <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002cbc:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8002cbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002cc2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x1c>)
 8002cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ccc:	4218      	tst	r0, r3
}
 8002cce:	bf14      	ite	ne
 8002cd0:	2001      	movne	r0, #1
 8002cd2:	2000      	moveq	r0, #0
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	5000440c 	.word	0x5000440c

08002cdc <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8002cdc:	b508      	push	{r3, lr}
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x18>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f013 0f01 	tst.w	r3, #1
 8002ce6:	d102      	bne.n	8002cee <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x12>
  {
    clock_frequency = OSCHP_GetFrequency();
 8002ce8:	f000 ff9e 	bl	8003c28 <OSCHP_GetFrequency>
  {
    clock_frequency = OFI_FREQUENCY;
  }
  
  return (clock_frequency);
}
 8002cec:	bd08      	pop	{r3, pc}
    clock_frequency = OFI_FREQUENCY;
 8002cee:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1c>)
  return (clock_frequency);
 8002cf0:	e7fc      	b.n	8002cec <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x10>
 8002cf2:	bf00      	nop
 8002cf4:	50004710 	.word	0x50004710
 8002cf8:	016e3600 	.word	0x016e3600

08002cfc <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:
{
 8002cfc:	b508      	push	{r3, lr}
  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8002cfe:	f7ff ffed 	bl	8002cdc <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f013 0f01 	tst.w	r3, #1
 8002d0a:	d111      	bne.n	8002d30 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x34>
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>)
 8002d0e:	689a      	ldr	r2, [r3, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8002d10:	6899      	ldr	r1, [r3, #8]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8002d12:	689b      	ldr	r3, [r3, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8002d14:	f3c1 2106 	ubfx	r1, r1, #8, #7
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8002d18:	fb01 0000 	mla	r0, r1, r0, r0
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8002d1c:	f3c2 6203 	ubfx	r2, r2, #24, #4
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8002d20:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002d24:	3301      	adds	r3, #1
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8002d26:	fb02 3303 	mla	r3, r2, r3, r3
 8002d2a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002d2e:	bd08      	pop	{r3, pc}
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d38:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8002d3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d3e:	e7f6      	b.n	8002d2e <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x32>
 8002d40:	50004710 	.word	0x50004710

08002d44 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8002d44:	b508      	push	{r3, lr}
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 8002d46:	f000 ff6f 	bl	8003c28 <OSCHP_GetFrequency>
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x2c>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f013 0f01 	tst.w	r3, #1
 8002d52:	d10c      	bne.n	8002d6e <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x2a>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x2c>)
 8002d56:	695a      	ldr	r2, [r3, #20]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8002d58:	695b      	ldr	r3, [r3, #20]
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8002d5a:	f3c2 2206 	ubfx	r2, r2, #8, #7
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8002d5e:	fb02 0000 	mla	r0, r2, r0, r0
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8002d62:	f3c3 6303 	ubfx	r3, r3, #24, #4
 8002d66:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fbb0 f0f3 	udiv	r0, r0, r3
  }
  return (clock_frequency);
}
 8002d6e:	bd08      	pop	{r3, pc}
 8002d70:	50004710 	.word	0x50004710

08002d74 <XMC_SCU_CLOCK_GetCcuClockFrequency>:
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <XMC_SCU_CLOCK_GetCcuClockFrequency+0x18>)
 8002d76:	691a      	ldr	r2, [r3, #16]
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
  uint32_t frequency = 0UL;
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f002 0201 	and.w	r2, r2, #1
 8002d7e:	4904      	ldr	r1, [pc, #16]	; (8002d90 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x1c>)
 8002d80:	6808      	ldr	r0, [r1, #0]
 8002d82:	4090      	lsls	r0, r2
 8002d84:	f003 0301 	and.w	r3, r3, #1
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8002d88:	40d8      	lsrs	r0, r3
 8002d8a:	4770      	bx	lr
 8002d8c:	50004600 	.word	0x50004600
 8002d90:	2000ffc0 	.word	0x2000ffc0

08002d94 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8002d94:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <XMC_SCU_CLOCK_GetUsbClockFrequency+0x28>)
 8002d98:	699b      	ldr	r3, [r3, #24]
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8002d9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d9e:	d109      	bne.n	8002db4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8002da0:	f7ff ffd0 	bl	8002d44 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <XMC_SCU_CLOCK_GetUsbClockFrequency+0x28>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8002dac:	3301      	adds	r3, #1
}
 8002dae:	fbb0 f0f3 	udiv	r0, r0, r3
 8002db2:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002db4:	f7ff ffa2 	bl	8002cfc <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8002db8:	e7f4      	b.n	8002da4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x10>
 8002dba:	bf00      	nop
 8002dbc:	50004600 	.word	0x50004600

08002dc0 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 8002dc0:	b508      	push	{r3, lr}
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002dc2:	f7ff ff9b 	bl	8002cfc <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x18>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8002dce:	3301      	adds	r3, #1
}
 8002dd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002dd4:	bd08      	pop	{r3, pc}
 8002dd6:	bf00      	nop
 8002dd8:	50004600 	.word	0x50004600

08002ddc <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8002ddc:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8002de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dea:	d00d      	beq.n	8002e08 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8002dec:	b17b      	cbz	r3, 8002e0e <XMC_SCU_CLOCK_GetWdtClockFrequency+0x32>
  {
    frequency = OFI_FREQUENCY;
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
  {
    frequency = OSI_FREQUENCY;
 8002dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df2:	bf14      	ite	ne
 8002df4:	2000      	movne	r0, #0
 8002df6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8002e00:	3301      	adds	r3, #1
}
 8002e02:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e06:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002e08:	f7ff ff78 	bl	8002cfc <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8002e0c:	e7f5      	b.n	8002dfa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
    frequency = OFI_FREQUENCY;
 8002e0e:	4802      	ldr	r0, [pc, #8]	; (8002e18 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3c>)
 8002e10:	e7f3      	b.n	8002dfa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
 8002e12:	bf00      	nop
 8002e14:	50004600 	.word	0x50004600
 8002e18:	016e3600 	.word	0x016e3600

08002e1c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8002e1c:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	f003 0303 	and.w	r3, r3, #3
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d004      	beq.n	8002e34 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x18>
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8002e2a:	b16b      	cbz	r3, 8002e48 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d013      	beq.n	8002e58 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x3c>
  uint32_t frequency = 0UL;
 8002e30:	2000      	movs	r0, #0
  else
  {

  }

  return (frequency);
 8002e32:	e010      	b.n	8002e56 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x3a>
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002e34:	f7ff ff62 	bl	8002cfc <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8002e40:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002e42:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e46:	e006      	b.n	8002e56 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x3a>
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x54>)
 8002e52:	6810      	ldr	r0, [r2, #0]
 8002e54:	4098      	lsls	r0, r3
}
 8002e56:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8002e58:	f7ff ff74 	bl	8002d44 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8002e64:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002e66:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e6a:	e7f4      	b.n	8002e56 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x3a>
 8002e6c:	50004600 	.word	0x50004600
 8002e70:	2000ffc0 	.word	0x2000ffc0

08002e74 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002e7c:	4a02      	ldr	r2, [pc, #8]	; (8002e88 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
 8002e7e:	6810      	ldr	r0, [r2, #0]
}
 8002e80:	40d8      	lsrs	r0, r3
 8002e82:	4770      	bx	lr
 8002e84:	50004600 	.word	0x50004600
 8002e88:	2000ffc0 	.word	0x2000ffc0

08002e8c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8002e8c:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <XMC_SCU_CLOCK_SetSystemClockSource+0x10>)
 8002e8e:	68d3      	ldr	r3, [r2, #12]
 8002e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e94:	4318      	orrs	r0, r3
 8002e96:	60d0      	str	r0, [r2, #12]
                      ((uint32_t)source);
}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	50004600 	.word	0x50004600

08002ea0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8002ea0:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 8002ea2:	6993      	ldr	r3, [r2, #24]
 8002ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea8:	4318      	orrs	r0, r3
 8002eaa:	6190      	str	r0, [r2, #24]
                      ((uint32_t)source);
}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	50004600 	.word	0x50004600

08002eb4 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8002eb4:	4a03      	ldr	r2, [pc, #12]	; (8002ec4 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 8002eb6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002eb8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ebc:	4318      	orrs	r0, r3
 8002ebe:	6250      	str	r0, [r2, #36]	; 0x24
                      ((uint32_t)source);
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	50004600 	.word	0x50004600

08002ec8 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8002ec8:	4a03      	ldr	r2, [pc, #12]	; (8002ed8 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x10>)
 8002eca:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002ecc:	f023 0303 	bic.w	r3, r3, #3
 8002ed0:	4318      	orrs	r0, r3
 8002ed2:	6290      	str	r0, [r2, #40]	; 0x28
                      ((uint32_t)source);
}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	50004600 	.word	0x50004600

08002edc <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8002edc:	b138      	cbz	r0, 8002eee <XMC_SCU_CLOCK_SetSystemPllClockSource+0x12>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x24>)
 8002ee0:	68d3      	ldr	r3, [r2, #12]
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	60d3      	str	r3, [r2, #12]
  }
}
 8002eec:	4770      	bx	lr
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002eee:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x24>)
 8002ef0:	68d3      	ldr	r3, [r2, #12]
 8002ef2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	60d3      	str	r3, [r2, #12]
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	50004710 	.word	0x50004710

08002f04 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002f04:	4a06      	ldr	r2, [pc, #24]	; (8002f20 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 8002f06:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002f0a:	f013 0f08 	tst.w	r3, #8
 8002f0e:	d1fa      	bne.n	8002f06 <XMC_SCU_HIB_SetRtcClockSource+0x2>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <XMC_SCU_HIB_SetRtcClockSource+0x20>)
 8002f12:	68d3      	ldr	r3, [r2, #12]
 8002f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f18:	4318      	orrs	r0, r3
 8002f1a:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	50004000 	.word	0x50004000
 8002f24:	50004300 	.word	0x50004300

08002f28 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <XMC_SCU_HIB_SetStandbyClockSource+0x1c>)
 8002f2a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002f2e:	f013 0f08 	tst.w	r3, #8
 8002f32:	d1fa      	bne.n	8002f2a <XMC_SCU_HIB_SetStandbyClockSource+0x2>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <XMC_SCU_HIB_SetStandbyClockSource+0x20>)
 8002f36:	68d3      	ldr	r3, [r2, #12]
 8002f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f3c:	4318      	orrs	r0, r3
 8002f3e:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	50004000 	.word	0x50004000
 8002f48:	50004300 	.word	0x50004300

08002f4c <XMC_SCU_CLOCK_SetSystemClockDivider>:
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8002f4c:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <XMC_SCU_CLOCK_SetSystemClockDivider+0x10>)
 8002f4e:	68d3      	ldr	r3, [r2, #12]
 8002f50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8002f54:	3801      	subs	r0, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8002f56:	4303      	orrs	r3, r0
 8002f58:	60d3      	str	r3, [r2, #12]
}
 8002f5a:	4770      	bx	lr
 8002f5c:	50004600 	.word	0x50004600

08002f60 <XMC_SCU_CLOCK_SetCcuClockDivider>:
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002f60:	4a03      	ldr	r2, [pc, #12]	; (8002f70 <XMC_SCU_CLOCK_SetCcuClockDivider+0x10>)
 8002f62:	6a13      	ldr	r3, [r2, #32]
 8002f64:	f023 0301 	bic.w	r3, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8002f68:	3801      	subs	r0, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002f6a:	4303      	orrs	r3, r0
 8002f6c:	6213      	str	r3, [r2, #32]
}
 8002f6e:	4770      	bx	lr
 8002f70:	50004600 	.word	0x50004600

08002f74 <XMC_SCU_CLOCK_SetCpuClockDivider>:
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8002f74:	4a03      	ldr	r2, [pc, #12]	; (8002f84 <XMC_SCU_CLOCK_SetCpuClockDivider+0x10>)
 8002f76:	6913      	ldr	r3, [r2, #16]
 8002f78:	f023 0301 	bic.w	r3, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002f7c:	3801      	subs	r0, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8002f7e:	4303      	orrs	r3, r0
 8002f80:	6113      	str	r3, [r2, #16]
}
 8002f82:	4770      	bx	lr
 8002f84:	50004600 	.word	0x50004600

08002f88 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002f88:	4a03      	ldr	r2, [pc, #12]	; (8002f98 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x10>)
 8002f8a:	6953      	ldr	r3, [r2, #20]
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8002f90:	3801      	subs	r0, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002f92:	4303      	orrs	r3, r0
 8002f94:	6153      	str	r3, [r2, #20]
}
 8002f96:	4770      	bx	lr
 8002f98:	50004600 	.word	0x50004600

08002f9c <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8002f9c:	4a03      	ldr	r2, [pc, #12]	; (8002fac <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 8002f9e:	6993      	ldr	r3, [r2, #24]
 8002fa0:	f023 0307 	bic.w	r3, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8002fa4:	3801      	subs	r0, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8002fa6:	4303      	orrs	r3, r0
 8002fa8:	6193      	str	r3, [r2, #24]
}
 8002faa:	4770      	bx	lr
 8002fac:	50004600 	.word	0x50004600

08002fb0 <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8002fb0:	4a03      	ldr	r2, [pc, #12]	; (8002fc0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 8002fb2:	69d3      	ldr	r3, [r2, #28]
 8002fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8002fb8:	3801      	subs	r0, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8002fba:	4303      	orrs	r3, r0
 8002fbc:	61d3      	str	r3, [r2, #28]
}
 8002fbe:	4770      	bx	lr
 8002fc0:	50004600 	.word	0x50004600

08002fc4 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8002fc4:	4a03      	ldr	r2, [pc, #12]	; (8002fd4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 8002fc6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002fc8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8002fcc:	3801      	subs	r0, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8002fce:	4303      	orrs	r3, r0
 8002fd0:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002fd2:	4770      	bx	lr
 8002fd4:	50004600 	.word	0x50004600

08002fd8 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8002fd8:	4a05      	ldr	r2, [pc, #20]	; (8002ff0 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x18>)
 8002fda:	6a93      	ldr	r3, [r2, #40]	; 0x28
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8002fdc:	3801      	subs	r0, #1
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8002fde:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002fea:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	50004600 	.word	0x50004600

08002ff4 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8002ff4:	4b01      	ldr	r3, [pc, #4]	; (8002ffc <XMC_SCU_CLOCK_EnableClock+0x8>)
 8002ff6:	6058      	str	r0, [r3, #4]
}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	50004600 	.word	0x50004600

08003000 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 8003000:	4b01      	ldr	r3, [pc, #4]	; (8003008 <XMC_SCU_CLOCK_DisableClock+0x8>)
 8003002:	6098      	str	r0, [r3, #8]
}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	50004600 	.word	0x50004600

0800300c <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <XMC_SCU_CLOCK_IsClockEnabled+0x10>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4218      	tst	r0, r3
}
 8003012:	bf14      	ite	ne
 8003014:	2001      	movne	r0, #1
 8003016:	2000      	moveq	r0, #0
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	50004600 	.word	0x50004600

08003020 <XMC_SCU_POWER_GetEVR13Voltage>:
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <XMC_SCU_POWER_GetEVR13Voltage+0x1c>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800302e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003040 <XMC_SCU_POWER_GetEVR13Voltage+0x20>
 8003032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003036:	ee17 0a90 	vmov	r0, s15
 800303a:	4770      	bx	lr
 800303c:	50004200 	.word	0x50004200
 8003040:	3bbe0ded 	.word	0x3bbe0ded

08003044 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8003044:	4b07      	ldr	r3, [pc, #28]	; (8003064 <XMC_SCU_POWER_GetEVR33Voltage+0x20>)
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800304c:	ee07 3a90 	vmov	s15, r3
 8003050:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8003054:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003068 <XMC_SCU_POWER_GetEVR33Voltage+0x24>
 8003058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800305c:	ee17 0a90 	vmov	r0, s15
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	50004200 	.word	0x50004200
 8003068:	3cb851ec 	.word	0x3cb851ec

0800306c <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800306c:	4a03      	ldr	r2, [pc, #12]	; (800307c <XMC_SCU_CLOCK_EnableUsbPll+0x10>)
 800306e:	6953      	ldr	r3, [r2, #20]
 8003070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003074:	f023 0302 	bic.w	r3, r3, #2
 8003078:	6153      	str	r3, [r2, #20]
}
 800307a:	4770      	bx	lr
 800307c:	50004710 	.word	0x50004710

08003080 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8003080:	4a03      	ldr	r2, [pc, #12]	; (8003090 <XMC_SCU_CLOCK_DisableUsbPll+0x10>)
 8003082:	6953      	ldr	r3, [r2, #20]
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6153      	str	r3, [r2, #20]
}
 800308e:	4770      	bx	lr
 8003090:	50004710 	.word	0x50004710

08003094 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <XMC_SCU_CLOCK_StartUsbPll+0x44>)
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	f042 0210 	orr.w	r2, r2, #16
 80030a4:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80030a6:	3901      	subs	r1, #1
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80030a8:	3801      	subs	r0, #1
 80030aa:	0600      	lsls	r0, r0, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80030ac:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
 80030b0:	6159      	str	r1, [r3, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b8:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	f022 0210 	bic.w	r2, r2, #16
 80030c0:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030c8:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80030ca:	461a      	mov	r2, r3
 80030cc:	6913      	ldr	r3, [r2, #16]
 80030ce:	f013 0f04 	tst.w	r3, #4
 80030d2:	d0fb      	beq.n	80030cc <XMC_SCU_CLOCK_StartUsbPll+0x38>
  {
    /* wait for PLL Lock */
  }

}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	50004710 	.word	0x50004710

080030dc <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 80030dc:	4b01      	ldr	r3, [pc, #4]	; (80030e4 <XMC_SCU_CLOCK_StopUsbPll+0x8>)
 80030de:	4a02      	ldr	r2, [pc, #8]	; (80030e8 <XMC_SCU_CLOCK_StopUsbPll+0xc>)
 80030e0:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 80030e2:	4770      	bx	lr
 80030e4:	50004710 	.word	0x50004710
 80030e8:	00010003 	.word	0x00010003

080030ec <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80030ec:	b510      	push	{r4, lr}
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x34>)
 80030f0:	6853      	ldr	r3, [r2, #4]
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f6:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80030f8:	2801      	cmp	r0, #1
 80030fa:	d003      	beq.n	8003104 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x18>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
  }

  XMC_SCU_lDelay(100UL);
 80030fc:	2064      	movs	r0, #100	; 0x64
 80030fe:	f7ff fc6b 	bl	80029d8 <XMC_SCU_lDelay>
}
 8003102:	bd10      	pop	{r4, pc}
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8003104:	4614      	mov	r4, r2
 8003106:	6853      	ldr	r3, [r2, #4]
 8003108:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800310c:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 800310e:	2064      	movs	r0, #100	; 0x64
 8003110:	f7ff fc62 	bl	80029d8 <XMC_SCU_lDelay>
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8003114:	6863      	ldr	r3, [r4, #4]
 8003116:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800311a:	6063      	str	r3, [r4, #4]
 800311c:	e7ee      	b.n	80030fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x10>
 800311e:	bf00      	nop
 8003120:	50004710 	.word	0x50004710

08003124 <XMC_SCU_POWER_EnableUsb>:

/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <XMC_SCU_POWER_EnableUsb+0xc>)
 8003126:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800312a:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	50004200 	.word	0x50004200

08003134 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8003134:	4b02      	ldr	r3, [pc, #8]	; (8003140 <XMC_SCU_POWER_DisableUsb+0xc>)
 8003136:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800313a:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	50004200 	.word	0x50004200

08003144 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8003144:	4b02      	ldr	r3, [pc, #8]	; (8003150 <XMC_SCU_CLOCK_IsUsbPllLocked+0xc>)
 8003146:	6918      	ldr	r0, [r3, #16]
}
 8003148:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	50004710 	.word	0x50004710

08003154 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <XMC_SCU_HIB_EnableHibernateDomain+0x38>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f013 0f01 	tst.w	r3, #1
 800315c:	d107      	bne.n	800316e <XMC_SCU_HIB_EnableHibernateDomain+0x1a>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <XMC_SCU_HIB_EnableHibernateDomain+0x38>)
 8003160:	2201      	movs	r2, #1
 8003162:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8003164:	461a      	mov	r2, r3
 8003166:	6813      	ldr	r3, [r2, #0]
 8003168:	f013 0f01 	tst.w	r3, #1
 800316c:	d0fb      	beq.n	8003166 <XMC_SCU_HIB_EnableHibernateDomain+0x12>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <XMC_SCU_HIB_EnableHibernateDomain+0x3c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003176:	d008      	beq.n	800318a <XMC_SCU_HIB_EnableHibernateDomain+0x36>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <XMC_SCU_HIB_EnableHibernateDomain+0x3c>)
 800317a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8003180:	461a      	mov	r2, r3
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003188:	d1fb      	bne.n	8003182 <XMC_SCU_HIB_EnableHibernateDomain+0x2e>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 800318a:	4770      	bx	lr
 800318c:	50004200 	.word	0x50004200
 8003190:	50004400 	.word	0x50004400

08003194 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <XMC_SCU_HIB_DisableHibernateDomain+0x14>)
 8003196:	2201      	movs	r2, #1
 8003198:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 800319a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800319e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a2:	605a      	str	r2, [r3, #4]
}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	50004200 	.word	0x50004200

080031ac <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x1c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f013 0f01 	tst.w	r3, #1
 80031b4:	d006      	beq.n	80031c4 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x18>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>)
 80031b8:	6818      	ldr	r0, [r3, #0]
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 80031ba:	f480 7000 	eor.w	r0, r0, #512	; 0x200
 80031be:	f3c0 2040 	ubfx	r0, r0, #9, #1
 80031c2:	4770      	bx	lr
 80031c4:	2000      	movs	r0, #0
}
 80031c6:	4770      	bx	lr
 80031c8:	50004200 	.word	0x50004200
 80031cc:	50004400 	.word	0x50004400

080031d0 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 80031d0:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <XMC_SCU_HIB_EnableInternalSlowClock+0x18>)
 80031d2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80031d6:	f013 0f20 	tst.w	r3, #32
 80031da:	d1fa      	bne.n	80031d2 <XMC_SCU_HIB_EnableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 80031dc:	4a03      	ldr	r2, [pc, #12]	; (80031ec <XMC_SCU_HIB_EnableInternalSlowClock+0x1c>)
 80031de:	6953      	ldr	r3, [r2, #20]
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6153      	str	r3, [r2, #20]
}
 80031e6:	4770      	bx	lr
 80031e8:	50004000 	.word	0x50004000
 80031ec:	50004300 	.word	0x50004300

080031f0 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 80031f0:	4a05      	ldr	r2, [pc, #20]	; (8003208 <XMC_SCU_HIB_DisableInternalSlowClock+0x18>)
 80031f2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80031f6:	f013 0f20 	tst.w	r3, #32
 80031fa:	d1fa      	bne.n	80031f2 <XMC_SCU_HIB_DisableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 80031fc:	4a03      	ldr	r2, [pc, #12]	; (800320c <XMC_SCU_HIB_DisableInternalSlowClock+0x1c>)
 80031fe:	6953      	ldr	r3, [r2, #20]
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6153      	str	r3, [r2, #20]
}
 8003206:	4770      	bx	lr
 8003208:	50004000 	.word	0x50004000
 800320c:	50004300 	.word	0x50004300

08003210 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <XMC_SCU_HIB_ClearEventStatus+0x14>)
 8003212:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003216:	f013 0f02 	tst.w	r3, #2
 800321a:	d1fa      	bne.n	8003212 <XMC_SCU_HIB_ClearEventStatus+0x2>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 800321c:	4b02      	ldr	r3, [pc, #8]	; (8003228 <XMC_SCU_HIB_ClearEventStatus+0x18>)
 800321e:	6058      	str	r0, [r3, #4]
}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	50004000 	.word	0x50004000
 8003228:	50004300 	.word	0x50004300

0800322c <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 800322c:	4a04      	ldr	r2, [pc, #16]	; (8003240 <XMC_SCU_HIB_TriggerEvent+0x14>)
 800322e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003232:	f013 0f04 	tst.w	r3, #4
 8003236:	d1fa      	bne.n	800322e <XMC_SCU_HIB_TriggerEvent+0x2>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8003238:	4b02      	ldr	r3, [pc, #8]	; (8003244 <XMC_SCU_HIB_TriggerEvent+0x18>)
 800323a:	6098      	str	r0, [r3, #8]
}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	50004000 	.word	0x50004000
 8003244:	50004300 	.word	0x50004300

08003248 <XMC_SCU_HIB_EnableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003248:	4a05      	ldr	r2, [pc, #20]	; (8003260 <XMC_SCU_HIB_EnableEvent+0x18>)
 800324a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800324e:	f013 0f08 	tst.w	r3, #8
 8003252:	d1fa      	bne.n	800324a <XMC_SCU_HIB_EnableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <XMC_SCU_HIB_EnableEvent+0x1c>)
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	4310      	orrs	r0, r2
 800325a:	60d8      	str	r0, [r3, #12]
}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	50004000 	.word	0x50004000
 8003264:	50004300 	.word	0x50004300

08003268 <XMC_SCU_HIB_DisableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003268:	4a05      	ldr	r2, [pc, #20]	; (8003280 <XMC_SCU_HIB_DisableEvent+0x18>)
 800326a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800326e:	f013 0f08 	tst.w	r3, #8
 8003272:	d1fa      	bne.n	800326a <XMC_SCU_HIB_DisableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8003274:	4a03      	ldr	r2, [pc, #12]	; (8003284 <XMC_SCU_HIB_DisableEvent+0x1c>)
 8003276:	68d3      	ldr	r3, [r2, #12]
 8003278:	ea23 0000 	bic.w	r0, r3, r0
 800327c:	60d0      	str	r0, [r2, #12]
}
 800327e:	4770      	bx	lr
 8003280:	50004000 	.word	0x50004000
 8003284:	50004300 	.word	0x50004300

08003288 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003288:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <XMC_SCU_HIB_EnterHibernateState+0x18>)
 800328a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800328e:	f013 0f08 	tst.w	r3, #8
 8003292:	d1fa      	bne.n	800328a <XMC_SCU_HIB_EnterHibernateState+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8003294:	4a03      	ldr	r2, [pc, #12]	; (80032a4 <XMC_SCU_HIB_EnterHibernateState+0x1c>)
 8003296:	68d3      	ldr	r3, [r2, #12]
 8003298:	f043 0310 	orr.w	r3, r3, #16
 800329c:	60d3      	str	r3, [r2, #12]
}
 800329e:	4770      	bx	lr
 80032a0:	50004000 	.word	0x50004000
 80032a4:	50004300 	.word	0x50004300

080032a8 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 80032a8:	b100      	cbz	r0, 80032ac <XMC_SCU_HIB_EnterHibernateStateEx+0x4>
 80032aa:	4770      	bx	lr
{
 80032ac:	b508      	push	{r3, lr}
  {
    XMC_SCU_HIB_EnterHibernateState();
 80032ae:	f7ff ffeb 	bl	8003288 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 80032b2:	bd08      	pop	{r3, pc}

080032b4 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80032b4:	4a09      	ldr	r2, [pc, #36]	; (80032dc <XMC_SCU_HIB_SetWakeupTriggerInput+0x28>)
 80032b6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80032ba:	f013 0f08 	tst.w	r3, #8
 80032be:	d1fa      	bne.n	80032b6 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 80032c0:	b128      	cbz	r0, 80032ce <XMC_SCU_HIB_SetWakeupTriggerInput+0x1a>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2c>)
 80032c4:	68d3      	ldr	r3, [r2, #12]
 80032c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ca:	60d3      	str	r3, [r2, #12]
  }
}
 80032cc:	4770      	bx	lr
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 80032ce:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2c>)
 80032d0:	68d3      	ldr	r3, [r2, #12]
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	60d3      	str	r3, [r2, #12]
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	50004000 	.word	0x50004000
 80032e0:	50004300 	.word	0x50004300

080032e4 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 80032e4:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <XMC_SCU_HIB_SetPinMode+0x2c>)
 80032e8:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80032ec:	f013 0f08 	tst.w	r3, #8
 80032f0:	d1fa      	bne.n	80032e8 <XMC_SCU_HIB_SetPinMode+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 80032f2:	4c08      	ldr	r4, [pc, #32]	; (8003314 <XMC_SCU_HIB_SetPinMode+0x30>)
 80032f4:	68e3      	ldr	r3, [r4, #12]
 80032f6:	0080      	lsls	r0, r0, #2
 80032f8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80032fc:	4082      	lsls	r2, r0
 80032fe:	ea23 0302 	bic.w	r3, r3, r2
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8003302:	4081      	lsls	r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8003304:	4319      	orrs	r1, r3
 8003306:	60e1      	str	r1, [r4, #12]
}
 8003308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	50004000 	.word	0x50004000
 8003314:	50004300 	.word	0x50004300

08003318 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8003318:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <XMC_SCU_HIB_SetPinOutputLevel+0x28>)
 800331c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003320:	f013 0f08 	tst.w	r3, #8
 8003324:	d1fa      	bne.n	800331c <XMC_SCU_HIB_SetPinOutputLevel+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8003326:	4c07      	ldr	r4, [pc, #28]	; (8003344 <XMC_SCU_HIB_SetPinOutputLevel+0x2c>)
 8003328:	68e3      	ldr	r3, [r4, #12]
 800332a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800332e:	4082      	lsls	r2, r0
 8003330:	ea23 0302 	bic.w	r3, r3, r2
                        (level << pin);
 8003334:	4081      	lsls	r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8003336:	4319      	orrs	r1, r3
 8003338:	60e1      	str	r1, [r4, #12]
}
 800333a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	50004000 	.word	0x50004000
 8003344:	50004300 	.word	0x50004300

08003348 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003348:	4a09      	ldr	r2, [pc, #36]	; (8003370 <XMC_SCU_HIB_SetInput0+0x28>)
 800334a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800334e:	f013 0f08 	tst.w	r3, #8
 8003352:	d1fa      	bne.n	800334a <XMC_SCU_HIB_SetInput0+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8003354:	b128      	cbz	r0, 8003362 <XMC_SCU_HIB_SetInput0+0x1a>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8003356:	4a07      	ldr	r2, [pc, #28]	; (8003374 <XMC_SCU_HIB_SetInput0+0x2c>)
 8003358:	68d3      	ldr	r3, [r2, #12]
 800335a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800335e:	60d3      	str	r3, [r2, #12]
  }
}
 8003360:	4770      	bx	lr
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8003362:	4a04      	ldr	r2, [pc, #16]	; (8003374 <XMC_SCU_HIB_SetInput0+0x2c>)
 8003364:	68d3      	ldr	r3, [r2, #12]
 8003366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336a:	60d3      	str	r3, [r2, #12]
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	50004000 	.word	0x50004000
 8003374:	50004300 	.word	0x50004300

08003378 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <XMC_SCU_HIB_SetSR0Input+0x1c>)
 800337a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800337e:	f013 0f08 	tst.w	r3, #8
 8003382:	d1fa      	bne.n	800337a <XMC_SCU_HIB_SetSR0Input+0x2>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <XMC_SCU_HIB_SetSR0Input+0x20>)
 8003386:	68d3      	ldr	r3, [r2, #12]
 8003388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800338c:	4318      	orrs	r0, r3
 800338e:	60d0      	str	r0, [r2, #12]
#endif  
                        input;
}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	50004000 	.word	0x50004000
 8003398:	50004300 	.word	0x50004300

0800339c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x10>)
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	f080 0008 	eor.w	r0, r0, #8
}
 80033a4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	50004300 	.word	0x50004300

080033b0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80033b0:	4a13      	ldr	r2, [pc, #76]	; (8003400 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x50>)
 80033b2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80033b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033ba:	d1fa      	bne.n	80033b2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x2>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80033bc:	4a11      	ldr	r2, [pc, #68]	; (8003404 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>)
 80033be:	69d3      	ldr	r3, [r2, #28]
 80033c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033c4:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80033c6:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 80033ca:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80033ce:	f013 0f08 	tst.w	r3, #8
 80033d2:	d1fa      	bne.n	80033ca <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80033d4:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>)
 80033d6:	68d3      	ldr	r3, [r2, #12]
 80033d8:	f043 0308 	orr.w	r3, r3, #8
 80033dc:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80033de:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 80033e2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80033e6:	f013 0f04 	tst.w	r3, #4
 80033ea:	d1fa      	bne.n	80033e2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x32>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>)
 80033ee:	2208      	movs	r2, #8
 80033f0:	609a      	str	r2, [r3, #8]
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 80033f2:	4a03      	ldr	r2, [pc, #12]	; (8003400 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x50>)
 80033f4:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4

  while (XMC_SCU_GetMirrorStatus() != 0)
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1fb      	bne.n	80033f4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	50004000 	.word	0x50004000
 8003404:	50004300 	.word	0x50004300

08003408 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x18>)
 800340a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800340e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003412:	d1fa      	bne.n	800340a <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8003414:	4a03      	ldr	r2, [pc, #12]	; (8003424 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x1c>)
 8003416:	69d3      	ldr	r3, [r2, #28]
 8003418:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800341c:	61d3      	str	r3, [r2, #28]
}
 800341e:	4770      	bx	lr
 8003420:	50004000 	.word	0x50004000
 8003424:	50004300 	.word	0x50004300

08003428 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8003428:	4a05      	ldr	r2, [pc, #20]	; (8003440 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x18>)
 800342a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800342e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003432:	d1fa      	bne.n	800342a <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8003434:	4a03      	ldr	r2, [pc, #12]	; (8003444 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 8003436:	69d3      	ldr	r3, [r2, #28]
 8003438:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 800343c:	61d3      	str	r3, [r2, #28]
}
 800343e:	4770      	bx	lr
 8003440:	50004000 	.word	0x50004000
 8003444:	50004300 	.word	0x50004300

08003448 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8003448:	4a06      	ldr	r2, [pc, #24]	; (8003464 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 800344a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800344e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003452:	d1fa      	bne.n	800344a <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x20>)
 8003456:	69d3      	ldr	r3, [r2, #28]
 8003458:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 800345c:	f043 0320 	orr.w	r3, r3, #32
 8003460:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8003462:	4770      	bx	lr
 8003464:	50004000 	.word	0x50004000
 8003468:	50004300 	.word	0x50004300

0800346c <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 800346c:	4b02      	ldr	r3, [pc, #8]	; (8003478 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0xc>)
 800346e:	6998      	ldr	r0, [r3, #24]
}
 8003470:	f000 0001 	and.w	r0, r0, #1
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	50004300 	.word	0x50004300

0800347c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 800347c:	b570      	push	{r4, r5, r6, lr}
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800347e:	4d0d      	ldr	r5, [pc, #52]	; (80034b4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x38>)
 8003480:	686b      	ldr	r3, [r5, #4]
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	606b      	str	r3, [r5, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8003488:	4e0b      	ldr	r6, [pc, #44]	; (80034b8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x3c>)
 800348a:	6874      	ldr	r4, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 800348c:	f000 fbcc 	bl	8003c28 <OSCHP_GetFrequency>
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x40>)
 8003492:	fba3 3000 	umull	r3, r0, r3, r0
 8003496:	0d03      	lsrs	r3, r0, #20
 8003498:	1e58      	subs	r0, r3, #1
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800349a:	f424 2370 	bic.w	r3, r4, #983040	; 0xf0000
 800349e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80034a6:	6073      	str	r3, [r6, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80034a8:	686b      	ldr	r3, [r5, #4]
 80034aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034ae:	606b      	str	r3, [r5, #4]
}
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
 80034b2:	bf00      	nop
 80034b4:	50004710 	.word	0x50004710
 80034b8:	50004700 	.word	0x50004700
 80034bc:	6b5fca6b 	.word	0x6b5fca6b

080034c0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x14>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	f400 7060 	and.w	r0, r0, #896	; 0x380
}
 80034c8:	f5b0 7f60 	cmp.w	r0, #896	; 0x380
 80034cc:	bf14      	ite	ne
 80034ce:	2000      	movne	r0, #0
 80034d0:	2001      	moveq	r0, #1
 80034d2:	4770      	bx	lr
 80034d4:	50004710 	.word	0x50004710

080034d8 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 80034d8:	4a02      	ldr	r2, [pc, #8]	; (80034e4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0xc>)
 80034da:	6853      	ldr	r3, [r2, #4]
 80034dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80034e0:	6053      	str	r3, [r2, #4]
}
 80034e2:	4770      	bx	lr
 80034e4:	50004700 	.word	0x50004700

080034e8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80034e8:	4a02      	ldr	r2, [pc, #8]	; (80034f4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 80034ea:	6853      	ldr	r3, [r2, #4]
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6053      	str	r3, [r2, #4]
}
 80034f2:	4770      	bx	lr
 80034f4:	50004700 	.word	0x50004700

080034f8 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80034f8:	4a02      	ldr	r2, [pc, #8]	; (8003504 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 80034fa:	6853      	ldr	r3, [r2, #4]
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6053      	str	r3, [r2, #4]
}
 8003502:	4770      	bx	lr
 8003504:	50004700 	.word	0x50004700

08003508 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8003508:	4b02      	ldr	r3, [pc, #8]	; (8003514 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0xc>)
 800350a:	6818      	ldr	r0, [r3, #0]
}
 800350c:	f000 0001 	and.w	r0, r0, #1
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	50004700 	.word	0x50004700

08003518 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8003518:	4a03      	ldr	r2, [pc, #12]	; (8003528 <XMC_SCU_CLOCK_EnableSystemPll+0x10>)
 800351a:	6853      	ldr	r3, [r2, #4]
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	f023 0302 	bic.w	r3, r3, #2
 8003524:	6053      	str	r3, [r2, #4]
}
 8003526:	4770      	bx	lr
 8003528:	50004710 	.word	0x50004710

0800352c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800352c:	4a03      	ldr	r2, [pc, #12]	; (800353c <XMC_SCU_CLOCK_DisableSystemPll+0x10>)
 800352e:	6853      	ldr	r3, [r2, #4]
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	f043 0302 	orr.w	r3, r3, #2
 8003538:	6053      	str	r3, [r2, #4]
}
 800353a:	4770      	bx	lr
 800353c:	50004710 	.word	0x50004710

08003540 <XMC_SCU_CLOCK_StopSystemPll>:
}

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8003540:	4a02      	ldr	r2, [pc, #8]	; (800354c <XMC_SCU_CLOCK_StopSystemPll+0xc>)
 8003542:	6853      	ldr	r3, [r2, #4]
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6053      	str	r3, [r2, #4]
}
 800354a:	4770      	bx	lr
 800354c:	50004710 	.word	0x50004710

08003550 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8003550:	b508      	push	{r3, lr}
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8003552:	4a06      	ldr	r2, [pc, #24]	; (800356c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1c>)
 8003554:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8003556:	3801      	subs	r0, #1
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8003558:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800355c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003560:	6093      	str	r3, [r2, #8]

  XMC_SCU_lDelay(50U);
 8003562:	2032      	movs	r0, #50	; 0x32
 8003564:	f7ff fa38 	bl	80029d8 <XMC_SCU_lDelay>
}
 8003568:	bd08      	pop	{r3, pc}
 800356a:	bf00      	nop
 800356c:	50004710 	.word	0x50004710

08003570 <XMC_SCU_CLOCK_StartSystemPll>:
{
 8003570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003574:	4680      	mov	r8, r0
 8003576:	460c      	mov	r4, r1
 8003578:	4617      	mov	r7, r2
 800357a:	461e      	mov	r6, r3
 800357c:	9d06      	ldr	r5, [sp, #24]
  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 800357e:	f7ff fcad 	bl	8002edc <XMC_SCU_CLOCK_SetSystemPllClockSource>
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8003582:	2c01      	cmp	r4, #1
 8003584:	d010      	beq.n	80035a8 <XMC_SCU_CLOCK_StartSystemPll+0x38>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8003586:	4a36      	ldr	r2, [pc, #216]	; (8003660 <XMC_SCU_CLOCK_StartSystemPll+0xf0>)
 8003588:	6893      	ldr	r3, [r2, #8]
 800358a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 800358e:	1e68      	subs	r0, r5, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8003590:	4318      	orrs	r0, r3
 8003592:	6090      	str	r0, [r2, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8003594:	6853      	ldr	r3, [r2, #4]
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	f013 0f01 	tst.w	r3, #1
 80035a2:	d0fb      	beq.n	800359c <XMC_SCU_CLOCK_StartSystemPll+0x2c>
}
 80035a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80035a8:	f1b8 0f00 	cmp.w	r8, #0
 80035ac:	d04a      	beq.n	8003644 <XMC_SCU_CLOCK_StartSystemPll+0xd4>
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80035ae:	f04f 64c0 	mov.w	r4, #100663296	; 0x6000000
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 80035b2:	fb06 f404 	mul.w	r4, r6, r4
 80035b6:	fbb4 f4f7 	udiv	r4, r4, r7
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80035ba:	4929      	ldr	r1, [pc, #164]	; (8003660 <XMC_SCU_CLOCK_StartSystemPll+0xf0>)
 80035bc:	684b      	ldr	r3, [r1, #4]
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 80035c4:	684b      	ldr	r3, [r1, #4]
 80035c6:	f043 0310 	orr.w	r3, r3, #16
 80035ca:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80035cc:	688a      	ldr	r2, [r1, #8]
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 80035ce:	3f01      	subs	r7, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <XMC_SCU_CLOCK_StartSystemPll+0xf4>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80035d8:	3e01      	subs	r6, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80035da:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80035de:	4a22      	ldr	r2, [pc, #136]	; (8003668 <XMC_SCU_CLOCK_StartSystemPll+0xf8>)
 80035e0:	fba2 0204 	umull	r0, r2, r2, r4
 80035e4:	0e92      	lsrs	r2, r2, #26
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80035e6:	3a01      	subs	r2, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80035e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035ec:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80035ee:	684b      	ldr	r3, [r1, #4]
 80035f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f4:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80035f6:	684b      	ldr	r3, [r1, #4]
 80035f8:	f023 0310 	bic.w	r3, r3, #16
 80035fc:	604b      	str	r3, [r1, #4]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80035fe:	684b      	ldr	r3, [r1, #4]
 8003600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003604:	604b      	str	r3, [r1, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003606:	460a      	mov	r2, r1
 8003608:	6813      	ldr	r3, [r2, #0]
 800360a:	f013 0f04 	tst.w	r3, #4
 800360e:	d0fb      	beq.n	8003608 <XMC_SCU_CLOCK_StartSystemPll+0x98>
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <XMC_SCU_CLOCK_StartSystemPll+0xf0>)
 8003612:	6853      	ldr	r3, [r2, #4]
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	f013 0f01 	tst.w	r3, #1
 8003620:	d1fb      	bne.n	800361a <XMC_SCU_CLOCK_StartSystemPll+0xaa>
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8003622:	4812      	ldr	r0, [pc, #72]	; (800366c <XMC_SCU_CLOCK_StartSystemPll+0xfc>)
 8003624:	fba0 3004 	umull	r3, r0, r0, r4
 8003628:	0ec0      	lsrs	r0, r0, #27
    if (kdiv < kdiv_temp)
 800362a:	4285      	cmp	r5, r0
 800362c:	d312      	bcc.n	8003654 <XMC_SCU_CLOCK_StartSystemPll+0xe4>
    kdiv_temp = (vco_frequency / 90UL) >> 22;
 800362e:	0860      	lsrs	r0, r4, #1
 8003630:	4c0f      	ldr	r4, [pc, #60]	; (8003670 <XMC_SCU_CLOCK_StartSystemPll+0x100>)
 8003632:	fba4 3000 	umull	r3, r0, r4, r0
 8003636:	0ec0      	lsrs	r0, r0, #27
    if (kdiv < kdiv_temp)
 8003638:	4285      	cmp	r5, r0
 800363a:	d30e      	bcc.n	800365a <XMC_SCU_CLOCK_StartSystemPll+0xea>
    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 800363c:	4628      	mov	r0, r5
 800363e:	f7ff ff87 	bl	8003550 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8003642:	e7af      	b.n	80035a4 <XMC_SCU_CLOCK_StartSystemPll+0x34>
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8003644:	f000 faf0 	bl	8003c28 <OSCHP_GetFrequency>
 8003648:	4c0a      	ldr	r4, [pc, #40]	; (8003674 <XMC_SCU_CLOCK_StartSystemPll+0x104>)
 800364a:	fba4 3400 	umull	r3, r4, r4, r0
 800364e:	0ca4      	lsrs	r4, r4, #18
 8003650:	05a4      	lsls	r4, r4, #22
 8003652:	e7ae      	b.n	80035b2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8003654:	f7ff ff7c 	bl	8003550 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8003658:	e7e9      	b.n	800362e <XMC_SCU_CLOCK_StartSystemPll+0xbe>
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 800365a:	f7ff ff79 	bl	8003550 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 800365e:	e7ed      	b.n	800363c <XMC_SCU_CLOCK_StartSystemPll+0xcc>
 8003660:	50004710 	.word	0x50004710
 8003664:	f08080ff 	.word	0xf08080ff
 8003668:	aaaaaaab 	.word	0xaaaaaaab
 800366c:	88888889 	.word	0x88888889
 8003670:	b60b60b7 	.word	0xb60b60b7
 8003674:	431bde83 	.word	0x431bde83

08003678 <XMC_SCU_CLOCK_Init>:
{
 8003678:	b530      	push	{r4, r5, lr}
 800367a:	b083      	sub	sp, #12
 800367c:	4604      	mov	r4, r0
  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800367e:	2000      	movs	r0, #0
 8003680:	f7ff fc04 	bl	8002e8c <XMC_SCU_CLOCK_SetSystemClockSource>
  XMC_SCU_HIB_EnableHibernateDomain();
 8003684:	f7ff fd66 	bl	8003154 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 8003688:	79e3      	ldrb	r3, [r4, #7]
 800368a:	bb23      	cbnz	r3, 80036d6 <XMC_SCU_CLOCK_Init+0x5e>
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 800368c:	7a60      	ldrb	r0, [r4, #9]
 800368e:	f7ff fc4b 	bl	8002f28 <XMC_SCU_HIB_SetStandbyClockSource>
 8003692:	4a20      	ldr	r2, [pc, #128]	; (8003714 <XMC_SCU_CLOCK_Init+0x9c>)
 8003694:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  while (XMC_SCU_GetMirrorStatus() != 0)
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1fb      	bne.n	8003694 <XMC_SCU_CLOCK_Init+0x1c>
  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800369c:	7a20      	ldrb	r0, [r4, #8]
 800369e:	f7ff fd25 	bl	80030ec <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80036a2:	7c20      	ldrb	r0, [r4, #16]
 80036a4:	f7ff fc52 	bl	8002f4c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80036a8:	7c60      	ldrb	r0, [r4, #17]
 80036aa:	f7ff fc63 	bl	8002f74 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80036ae:	7ca0      	ldrb	r0, [r4, #18]
 80036b0:	f7ff fc56 	bl	8002f60 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80036b4:	7ce0      	ldrb	r0, [r4, #19]
 80036b6:	f7ff fc67 	bl	8002f88 <XMC_SCU_CLOCK_SetPeripheralClockDivider>
  if (config->enable_oschp == true)
 80036ba:	79a3      	ldrb	r3, [r4, #6]
 80036bc:	b993      	cbnz	r3, 80036e4 <XMC_SCU_CLOCK_Init+0x6c>
  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80036be:	78e3      	ldrb	r3, [r4, #3]
 80036c0:	b9bb      	cbnz	r3, 80036f2 <XMC_SCU_CLOCK_Init+0x7a>
    XMC_SCU_CLOCK_DisableSystemPll();
 80036c2:	f7ff ff33 	bl	800352c <XMC_SCU_CLOCK_DisableSystemPll>
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80036c6:	68e3      	ldr	r3, [r4, #12]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d01c      	beq.n	8003708 <XMC_SCU_CLOCK_Init+0x90>
  SystemCoreClockUpdate();
 80036ce:	f000 faaf 	bl	8003c30 <SystemCoreClockUpdate>
}
 80036d2:	b003      	add	sp, #12
 80036d4:	bd30      	pop	{r4, r5, pc}
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80036d6:	f7ff fe6b 	bl	80033b0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80036da:	f7ff fe5f 	bl	800339c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80036de:	2800      	cmp	r0, #0
 80036e0:	d0fb      	beq.n	80036da <XMC_SCU_CLOCK_Init+0x62>
 80036e2:	e7d3      	b.n	800368c <XMC_SCU_CLOCK_Init+0x14>
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80036e4:	f7ff feca 	bl	800347c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80036e8:	f7ff feea 	bl	80034c0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d0fb      	beq.n	80036e8 <XMC_SCU_CLOCK_Init+0x70>
 80036f0:	e7e5      	b.n	80036be <XMC_SCU_CLOCK_Init+0x46>
    XMC_SCU_CLOCK_EnableSystemPll();
 80036f2:	f7ff ff11 	bl	8003518 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80036f6:	7823      	ldrb	r3, [r4, #0]
 80036f8:	7862      	ldrb	r2, [r4, #1]
 80036fa:	78e1      	ldrb	r1, [r4, #3]
 80036fc:	88a0      	ldrh	r0, [r4, #4]
 80036fe:	78a5      	ldrb	r5, [r4, #2]
 8003700:	9500      	str	r5, [sp, #0]
 8003702:	f7ff ff35 	bl	8003570 <XMC_SCU_CLOCK_StartSystemPll>
 8003706:	e7de      	b.n	80036c6 <XMC_SCU_CLOCK_Init+0x4e>
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8003708:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800370c:	f7ff fbbe 	bl	8002e8c <XMC_SCU_CLOCK_SetSystemClockSource>
 8003710:	e7dd      	b.n	80036ce <XMC_SCU_CLOCK_Init+0x56>
 8003712:	bf00      	nop
 8003714:	50004000 	.word	0x50004000

08003718 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8003718:	4b02      	ldr	r3, [pc, #8]	; (8003724 <XMC_SCU_CLOCK_IsSystemPllLocked+0xc>)
 800371a:	6818      	ldr	r0, [r3, #0]
}
 800371c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	50004710 	.word	0x50004710

08003728 <XMC_SCU_INTERRUPT_SetEventHandler>:
{
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8003728:	f010 0f01 	tst.w	r0, #1
 800372c:	d111      	bne.n	8003752 <XMC_SCU_INTERRUPT_SetEventHandler+0x2a>
  index = 0U;
 800372e:	2300      	movs	r3, #0
  {
    index++;
 8003730:	3301      	adds	r3, #1
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8003732:	fa20 f203 	lsr.w	r2, r0, r3
 8003736:	f012 0f01 	tst.w	r2, #1
 800373a:	d103      	bne.n	8003744 <XMC_SCU_INTERRUPT_SetEventHandler+0x1c>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d1f7      	bne.n	8003730 <XMC_SCU_INTERRUPT_SetEventHandler+0x8>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
  {
    status = XMC_SCU_STATUS_ERROR;
 8003740:	2001      	movs	r0, #1
 8003742:	4770      	bx	lr
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8003744:	2b20      	cmp	r3, #32
 8003746:	d006      	beq.n	8003756 <XMC_SCU_INTERRUPT_SetEventHandler+0x2e>
  }
  else
  {
    event_handler_list[index] = handler;
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <XMC_SCU_INTERRUPT_SetEventHandler+0x34>)
 800374a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 800374e:	2000      	movs	r0, #0
 8003750:	4770      	bx	lr
  index = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	e7f8      	b.n	8003748 <XMC_SCU_INTERRUPT_SetEventHandler+0x20>
    status = XMC_SCU_STATUS_ERROR;
 8003756:	2001      	movs	r0, #1
  }
  
  return (status);
}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000f00 	.word	0x20000f00

08003760 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8003760:	b510      	push	{r4, lr}
  return (SCU_INTERRUPT->SRRAW);
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <XMC_SCU_IRQHandler+0x38>)
 8003764:	685a      	ldr	r2, [r3, #4]
  
  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus();
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8003766:	f012 0f01 	tst.w	r2, #1
 800376a:	d109      	bne.n	8003780 <XMC_SCU_IRQHandler+0x20>
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
      
      break;
    }   
    index++;    
 800376c:	2401      	movs	r4, #1
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 800376e:	fa22 f304 	lsr.w	r3, r2, r4
 8003772:	f013 0f01 	tst.w	r3, #1
 8003776:	d104      	bne.n	8003782 <XMC_SCU_IRQHandler+0x22>
    index++;    
 8003778:	3401      	adds	r4, #1
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 800377a:	2c20      	cmp	r4, #32
 800377c:	d1f7      	bne.n	800376e <XMC_SCU_IRQHandler+0xe>
 800377e:	e00a      	b.n	8003796 <XMC_SCU_IRQHandler+0x36>
  index = 0U;
 8003780:	2400      	movs	r4, #0
      event_handler = event_handler_list[index];
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <XMC_SCU_IRQHandler+0x3c>)
 8003784:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
      if (event_handler != NULL)
 8003788:	b103      	cbz	r3, 800378c <XMC_SCU_IRQHandler+0x2c>
          (event_handler)();
 800378a:	4798      	blx	r3
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 800378c:	2301      	movs	r3, #1
 800378e:	fa03 f404 	lsl.w	r4, r3, r4
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8003792:	4b01      	ldr	r3, [pc, #4]	; (8003798 <XMC_SCU_IRQHandler+0x38>)
 8003794:	60dc      	str	r4, [r3, #12]
  }
}
 8003796:	bd10      	pop	{r4, pc}
 8003798:	50004074 	.word	0x50004074
 800379c:	20000f00 	.word	0x20000f00

080037a0 <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 80037a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a4:	4681      	mov	r9, r0
 80037a6:	460e      	mov	r6, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <Endpoint_Write_Stream_LE+0xb4>)
 80037aa:	f893 a13c 	ldrb.w	sl, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
	if (BytesProcessed!=NULL) {
 80037ae:	4690      	mov	r8, r2
 80037b0:	b14a      	cbz	r2, 80037c6 <Endpoint_Write_Stream_LE+0x26>
		Length -= *BytesProcessed;
 80037b2:	8817      	ldrh	r7, [r2, #0]
 80037b4:	1bce      	subs	r6, r1, r7
 80037b6:	b2b6      	uxth	r6, r6
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
			prev_length = Length;
			Length -= Bytes;
 80037b8:	f04f 0b00 	mov.w	fp, #0
		if (ep->InInUse)
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <Endpoint_Write_Stream_LE+0xb4>)
 80037be:	252c      	movs	r5, #44	; 0x2c
 80037c0:	fb05 350a 	mla	r5, r5, sl, r3
 80037c4:	e01a      	b.n	80037fc <Endpoint_Write_Stream_LE+0x5c>
	uint16_t BytesTransfered = 0;
 80037c6:	2700      	movs	r7, #0
 80037c8:	e7f6      	b.n	80037b8 <Endpoint_Write_Stream_LE+0x18>
		if (Endpoint_IsReadWriteAllowed()) {
 80037ca:	f7ff f847 	bl	800285c <Endpoint_IsReadWriteAllowed>
 80037ce:	b1f8      	cbz	r0, 8003810 <Endpoint_Write_Stream_LE+0x70>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80037d0:	69eb      	ldr	r3, [r5, #28]
 80037d2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80037d4:	1ae4      	subs	r4, r4, r3
 80037d6:	42b4      	cmp	r4, r6
 80037d8:	bf28      	it	cs
 80037da:	4634      	movcs	r4, r6
 80037dc:	b2a4      	uxth	r4, r4
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 80037de:	6a28      	ldr	r0, [r5, #32]
 80037e0:	4622      	mov	r2, r4
 80037e2:	eb09 0107 	add.w	r1, r9, r7
 80037e6:	4418      	add	r0, r3
 80037e8:	f000 f9ce 	bl	8003b88 <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 80037ec:	69eb      	ldr	r3, [r5, #28]
 80037ee:	4423      	add	r3, r4
 80037f0:	61eb      	str	r3, [r5, #28]
			BytesTransfered += Bytes;
 80037f2:	4427      	add	r7, r4
 80037f4:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 80037f6:	1b34      	subs	r4, r6, r4
 80037f8:	46b3      	mov	fp, r6
 80037fa:	b2a6      	uxth	r6, r4
	while (Length) {
 80037fc:	b1be      	cbz	r6, 800382e <Endpoint_Write_Stream_LE+0x8e>
		if (ep->InInUse)
 80037fe:	68ab      	ldr	r3, [r5, #8]
 8003800:	f013 0f10 	tst.w	r3, #16
 8003804:	d0e1      	beq.n	80037ca <Endpoint_Write_Stream_LE+0x2a>
 8003806:	68ab      	ldr	r3, [r5, #8]
 8003808:	f013 0f10 	tst.w	r3, #16
 800380c:	d1fb      	bne.n	8003806 <Endpoint_Write_Stream_LE+0x66>
 800380e:	e7dc      	b.n	80037ca <Endpoint_Write_Stream_LE+0x2a>
		}
		else {
			Endpoint_ClearIN();
 8003810:	f7fe ffc8 	bl	80027a4 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8003814:	f1b8 0f00 	cmp.w	r8, #0
 8003818:	d105      	bne.n	8003826 <Endpoint_Write_Stream_LE+0x86>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800381a:	f7fe ff45 	bl	80026a8 <Endpoint_WaitUntilReady>
 800381e:	4603      	mov	r3, r0
 8003820:	2800      	cmp	r0, #0
 8003822:	d0eb      	beq.n	80037fc <Endpoint_Write_Stream_LE+0x5c>
 8003824:	e00e      	b.n	8003844 <Endpoint_Write_Stream_LE+0xa4>
				*BytesProcessed = BytesTransfered;
 8003826:	f8a8 7000 	strh.w	r7, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800382a:	2305      	movs	r3, #5
 800382c:	e00a      	b.n	8003844 <Endpoint_Write_Stream_LE+0xa4>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <Endpoint_Write_Stream_LE+0xb4>)
 8003830:	222c      	movs	r2, #44	; 0x2c
 8003832:	fb02 3a0a 	mla	sl, r2, sl, r3
 8003836:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 800383a:	f3c3 1386 	ubfx	r3, r3, #6, #7
 800383e:	455b      	cmp	r3, fp
 8003840:	d003      	beq.n	800384a <Endpoint_Write_Stream_LE+0xaa>
	{
	   zlp_flag = true;
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	   zlp_flag = true;
 800384a:	4b03      	ldr	r3, [pc, #12]	; (8003858 <Endpoint_Write_Stream_LE+0xb8>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
	return ENDPOINT_RWSTREAM_NoError;
 8003850:	2300      	movs	r3, #0
 8003852:	e7f7      	b.n	8003844 <Endpoint_Write_Stream_LE+0xa4>
 8003854:	20000ba8 	.word	0x20000ba8
 8003858:	200008a8 	.word	0x200008a8

0800385c <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
	uint32_t i = 0;
	while(i<Length) {
 800385c:	b172      	cbz	r2, 800387c <SwapCopy+0x20>
void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 800385e:	b410      	push	{r4}
 8003860:	1e4b      	subs	r3, r1, #1
 8003862:	3801      	subs	r0, #1
 8003864:	4410      	add	r0, r2
 8003866:	4411      	add	r1, r2
 8003868:	3901      	subs	r1, #1
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 800386a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800386e:	f800 2901 	strb.w	r2, [r0], #-1
	while(i<Length) {
 8003872:	428b      	cmp	r3, r1
 8003874:	d1f9      	bne.n	800386a <SwapCopy+0xe>
		i++;
	}
}
 8003876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	4770      	bx	lr
	...

08003880 <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003884:	4680      	mov	r8, r0
 8003886:	4689      	mov	r9, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <Endpoint_Write_Stream_BE+0x94>)
 800388a:	f893 513c 	ldrb.w	r5, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 800388e:	4617      	mov	r7, r2
 8003890:	b142      	cbz	r2, 80038a4 <Endpoint_Write_Stream_BE+0x24>
		Length -= *BytesProcessed;
 8003892:	8816      	ldrh	r6, [r2, #0]
 8003894:	1b8c      	subs	r4, r1, r6
 8003896:	fa1f f984 	uxth.w	r9, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 800389a:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <Endpoint_Write_Stream_BE+0x94>)
 800389c:	222c      	movs	r2, #44	; 0x2c
 800389e:	fb02 3505 	mla	r5, r2, r5, r3
 80038a2:	e01b      	b.n	80038dc <Endpoint_Write_Stream_BE+0x5c>
	uint16_t BytesTransfered = 0;
 80038a4:	2600      	movs	r6, #0
 80038a6:	e7f8      	b.n	800389a <Endpoint_Write_Stream_BE+0x1a>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 80038a8:	f7fe ffd8 	bl	800285c <Endpoint_IsReadWriteAllowed>
 80038ac:	b310      	cbz	r0, 80038f4 <Endpoint_Write_Stream_BE+0x74>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80038ae:	69e8      	ldr	r0, [r5, #28]
 80038b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80038b2:	1a1b      	subs	r3, r3, r0
 80038b4:	454b      	cmp	r3, r9
 80038b6:	bf28      	it	cs
 80038b8:	464b      	movcs	r3, r9
 80038ba:	b29c      	uxth	r4, r3
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 80038bc:	6a2b      	ldr	r3, [r5, #32]
 80038be:	4622      	mov	r2, r4
 80038c0:	eb08 0106 	add.w	r1, r8, r6
 80038c4:	4418      	add	r0, r3
 80038c6:	f7ff ffc9 	bl	800385c <SwapCopy>
			ep->InBytesAvailable += Bytes;
 80038ca:	69eb      	ldr	r3, [r5, #28]
 80038cc:	4423      	add	r3, r4
 80038ce:	61eb      	str	r3, [r5, #28]
			BytesTransfered += Bytes;
 80038d0:	4426      	add	r6, r4
 80038d2:	b2b6      	uxth	r6, r6
			Length -= Bytes;
 80038d4:	eba9 0404 	sub.w	r4, r9, r4
 80038d8:	fa1f f984 	uxth.w	r9, r4
	while (Length) {
 80038dc:	f1b9 0f00 	cmp.w	r9, #0
 80038e0:	d014      	beq.n	800390c <Endpoint_Write_Stream_BE+0x8c>
		if (ep->InInUse)
 80038e2:	68ab      	ldr	r3, [r5, #8]
 80038e4:	f013 0f10 	tst.w	r3, #16
 80038e8:	d0de      	beq.n	80038a8 <Endpoint_Write_Stream_BE+0x28>
 80038ea:	68ab      	ldr	r3, [r5, #8]
 80038ec:	f013 0f10 	tst.w	r3, #16
 80038f0:	d1fb      	bne.n	80038ea <Endpoint_Write_Stream_BE+0x6a>
 80038f2:	e7d9      	b.n	80038a8 <Endpoint_Write_Stream_BE+0x28>
		}
		else {
			Endpoint_ClearIN();
 80038f4:	f7fe ff56 	bl	80027a4 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 80038f8:	b92f      	cbnz	r7, 8003906 <Endpoint_Write_Stream_BE+0x86>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80038fa:	f7fe fed5 	bl	80026a8 <Endpoint_WaitUntilReady>
 80038fe:	4603      	mov	r3, r0
 8003900:	2800      	cmp	r0, #0
 8003902:	d0eb      	beq.n	80038dc <Endpoint_Write_Stream_BE+0x5c>
 8003904:	e003      	b.n	800390e <Endpoint_Write_Stream_BE+0x8e>
				*BytesProcessed = BytesTransfered;
 8003906:	803e      	strh	r6, [r7, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003908:	2305      	movs	r3, #5
 800390a:	e000      	b.n	800390e <Endpoint_Write_Stream_BE+0x8e>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003914:	20000ba8 	.word	0x20000ba8

08003918 <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800391c:	4681      	mov	r9, r0
 800391e:	460e      	mov	r6, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <Endpoint_Read_Stream_LE+0x94>)
 8003922:	f893 513c 	ldrb.w	r5, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003926:	4690      	mov	r8, r2
 8003928:	b13a      	cbz	r2, 800393a <Endpoint_Read_Stream_LE+0x22>
		Length -= *BytesProcessed;
 800392a:	8817      	ldrh	r7, [r2, #0]
 800392c:	1bcc      	subs	r4, r1, r7
 800392e:	b2a6      	uxth	r6, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->OutInUse)
 8003930:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <Endpoint_Read_Stream_LE+0x94>)
 8003932:	222c      	movs	r2, #44	; 0x2c
 8003934:	fb02 3505 	mla	r5, r2, r5, r3
 8003938:	e01b      	b.n	8003972 <Endpoint_Read_Stream_LE+0x5a>
	uint16_t BytesTransfered = 0;
 800393a:	2700      	movs	r7, #0
 800393c:	e7f8      	b.n	8003930 <Endpoint_Read_Stream_LE+0x18>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 800393e:	f7fe ff8d 	bl	800285c <Endpoint_IsReadWriteAllowed>
 8003942:	b300      	cbz	r0, 8003986 <Endpoint_Read_Stream_LE+0x6e>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003944:	68ec      	ldr	r4, [r5, #12]
 8003946:	42b4      	cmp	r4, r6
 8003948:	bf28      	it	cs
 800394a:	4634      	movcs	r4, r6
 800394c:	b2a4      	uxth	r4, r4
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 800394e:	6969      	ldr	r1, [r5, #20]
 8003950:	692b      	ldr	r3, [r5, #16]
 8003952:	4622      	mov	r2, r4
 8003954:	4419      	add	r1, r3
 8003956:	eb09 0007 	add.w	r0, r9, r7
 800395a:	f000 f915 	bl	8003b88 <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 800395e:	68eb      	ldr	r3, [r5, #12]
 8003960:	1b1b      	subs	r3, r3, r4
 8003962:	60eb      	str	r3, [r5, #12]
			ep->OutOffset += Bytes;
 8003964:	692b      	ldr	r3, [r5, #16]
 8003966:	4423      	add	r3, r4
 8003968:	612b      	str	r3, [r5, #16]
			BytesTransfered += Bytes;
 800396a:	4427      	add	r7, r4
 800396c:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 800396e:	1b34      	subs	r4, r6, r4
 8003970:	b2a6      	uxth	r6, r4
	while (Length) {
 8003972:	b1be      	cbz	r6, 80039a4 <Endpoint_Read_Stream_LE+0x8c>
		if (ep->OutInUse)
 8003974:	68ab      	ldr	r3, [r5, #8]
 8003976:	f013 0f08 	tst.w	r3, #8
 800397a:	d0e0      	beq.n	800393e <Endpoint_Read_Stream_LE+0x26>
 800397c:	68ab      	ldr	r3, [r5, #8]
 800397e:	f013 0f08 	tst.w	r3, #8
 8003982:	d1fb      	bne.n	800397c <Endpoint_Read_Stream_LE+0x64>
 8003984:	e7db      	b.n	800393e <Endpoint_Read_Stream_LE+0x26>
		}
		else {
			Endpoint_ClearOUT();
 8003986:	f7fe fedf 	bl	8002748 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 800398a:	f1b8 0f00 	cmp.w	r8, #0
 800398e:	d105      	bne.n	800399c <Endpoint_Read_Stream_LE+0x84>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003990:	f7fe fe8a 	bl	80026a8 <Endpoint_WaitUntilReady>
 8003994:	4603      	mov	r3, r0
 8003996:	2800      	cmp	r0, #0
 8003998:	d0eb      	beq.n	8003972 <Endpoint_Read_Stream_LE+0x5a>
 800399a:	e004      	b.n	80039a6 <Endpoint_Read_Stream_LE+0x8e>
				*BytesProcessed = BytesTransfered;
 800399c:	f8a8 7000 	strh.w	r7, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80039a0:	2305      	movs	r3, #5
 80039a2:	e000      	b.n	80039a6 <Endpoint_Read_Stream_LE+0x8e>
				return ErrorCode;
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ac:	20000ba8 	.word	0x20000ba8

080039b0 <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80039b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039b4:	4681      	mov	r9, r0
 80039b6:	460e      	mov	r6, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <Endpoint_Read_Stream_BE+0x94>)
 80039ba:	f893 513c 	ldrb.w	r5, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 80039be:	4690      	mov	r8, r2
 80039c0:	b13a      	cbz	r2, 80039d2 <Endpoint_Read_Stream_BE+0x22>
		Length -= *BytesProcessed;
 80039c2:	8817      	ldrh	r7, [r2, #0]
 80039c4:	1bcc      	subs	r4, r1, r7
 80039c6:	b2a6      	uxth	r6, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 80039c8:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <Endpoint_Read_Stream_BE+0x94>)
 80039ca:	222c      	movs	r2, #44	; 0x2c
 80039cc:	fb02 3505 	mla	r5, r2, r5, r3
 80039d0:	e01b      	b.n	8003a0a <Endpoint_Read_Stream_BE+0x5a>
	uint16_t BytesTransfered = 0;
 80039d2:	2700      	movs	r7, #0
 80039d4:	e7f8      	b.n	80039c8 <Endpoint_Read_Stream_BE+0x18>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 80039d6:	f7fe ff41 	bl	800285c <Endpoint_IsReadWriteAllowed>
 80039da:	b300      	cbz	r0, 8003a1e <Endpoint_Read_Stream_BE+0x6e>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 80039dc:	68ec      	ldr	r4, [r5, #12]
 80039de:	42b4      	cmp	r4, r6
 80039e0:	bf28      	it	cs
 80039e2:	4634      	movcs	r4, r6
 80039e4:	b2a4      	uxth	r4, r4
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 80039e6:	6969      	ldr	r1, [r5, #20]
 80039e8:	692b      	ldr	r3, [r5, #16]
 80039ea:	4622      	mov	r2, r4
 80039ec:	4419      	add	r1, r3
 80039ee:	eb09 0007 	add.w	r0, r9, r7
 80039f2:	f7ff ff33 	bl	800385c <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 80039f6:	68eb      	ldr	r3, [r5, #12]
 80039f8:	1b1b      	subs	r3, r3, r4
 80039fa:	60eb      	str	r3, [r5, #12]
			ep->OutOffset += Bytes;
 80039fc:	692b      	ldr	r3, [r5, #16]
 80039fe:	4423      	add	r3, r4
 8003a00:	612b      	str	r3, [r5, #16]
			BytesTransfered += Bytes;
 8003a02:	4427      	add	r7, r4
 8003a04:	b2bf      	uxth	r7, r7
			Length -= Bytes;
 8003a06:	1b34      	subs	r4, r6, r4
 8003a08:	b2a6      	uxth	r6, r4
	while (Length) {
 8003a0a:	b1be      	cbz	r6, 8003a3c <Endpoint_Read_Stream_BE+0x8c>
		if (ep->InInUse)
 8003a0c:	68ab      	ldr	r3, [r5, #8]
 8003a0e:	f013 0f10 	tst.w	r3, #16
 8003a12:	d0e0      	beq.n	80039d6 <Endpoint_Read_Stream_BE+0x26>
 8003a14:	68ab      	ldr	r3, [r5, #8]
 8003a16:	f013 0f10 	tst.w	r3, #16
 8003a1a:	d1fb      	bne.n	8003a14 <Endpoint_Read_Stream_BE+0x64>
 8003a1c:	e7db      	b.n	80039d6 <Endpoint_Read_Stream_BE+0x26>
		}
		else {
			Endpoint_ClearOUT();
 8003a1e:	f7fe fe93 	bl	8002748 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 8003a22:	f1b8 0f00 	cmp.w	r8, #0
 8003a26:	d105      	bne.n	8003a34 <Endpoint_Read_Stream_BE+0x84>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003a28:	f7fe fe3e 	bl	80026a8 <Endpoint_WaitUntilReady>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d0eb      	beq.n	8003a0a <Endpoint_Read_Stream_BE+0x5a>
 8003a32:	e004      	b.n	8003a3e <Endpoint_Read_Stream_BE+0x8e>
				*BytesProcessed = BytesTransfered;
 8003a34:	f8a8 7000 	strh.w	r7, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003a38:	2305      	movs	r3, #5
 8003a3a:	e000      	b.n	8003a3e <Endpoint_Read_Stream_BE+0x8e>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a44:	20000ba8 	.word	0x20000ba8

08003a48 <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	4607      	mov	r7, r0
 8003a4c:	460e      	mov	r6, r1
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (!EndPoint->InInUse) {
 8003a4e:	4c0f      	ldr	r4, [pc, #60]	; (8003a8c <Endpoint_Write_Control_Stream_LE+0x44>)
	while (Length) {
 8003a50:	b1ce      	cbz	r6, 8003a86 <Endpoint_Write_Control_Stream_LE+0x3e>
		if (!EndPoint->InInUse) {
 8003a52:	68a3      	ldr	r3, [r4, #8]
 8003a54:	f013 0f10 	tst.w	r3, #16
 8003a58:	d003      	beq.n	8003a62 <Endpoint_Write_Control_Stream_LE+0x1a>
 8003a5a:	68a3      	ldr	r3, [r4, #8]
 8003a5c:	f013 0f10 	tst.w	r3, #16
 8003a60:	d1fb      	bne.n	8003a5a <Endpoint_Write_Control_Stream_LE+0x12>
			if (EndPoint->InBufferLength > Length) {
 8003a62:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003a64:	42b5      	cmp	r5, r6
				Bytes = Length;
			} else {
				Bytes = EndPoint->InBufferLength;
 8003a66:	bf94      	ite	ls
 8003a68:	b2ad      	uxthls	r5, r5
 8003a6a:	4635      	movhi	r5, r6
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 8003a6c:	462a      	mov	r2, r5
 8003a6e:	4639      	mov	r1, r7
 8003a70:	6a20      	ldr	r0, [r4, #32]
 8003a72:	f000 f889 	bl	8003b88 <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8003a76:	69e3      	ldr	r3, [r4, #28]
 8003a78:	442b      	add	r3, r5
 8003a7a:	61e3      	str	r3, [r4, #28]
			Length -= Bytes;
 8003a7c:	1b75      	subs	r5, r6, r5
 8003a7e:	b2ae      	uxth	r6, r5

			Endpoint_ClearIN();
 8003a80:	f7fe fe90 	bl	80027a4 <Endpoint_ClearIN>
 8003a84:	e7e4      	b.n	8003a50 <Endpoint_Write_Control_Stream_LE+0x8>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 8003a86:	2000      	movs	r0, #0
 8003a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000ba8 	.word	0x20000ba8

08003a90 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 8003a90:	b508      	push	{r3, lr}
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 8003a92:	f7ff ffd9 	bl	8003a48 <Endpoint_Write_Control_Stream_LE>
}
 8003a96:	bd08      	pop	{r3, pc}

08003a98 <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 8003a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9c:	4607      	mov	r7, r0
 8003a9e:	460e      	mov	r6, r1
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (EndPoint->IsOutRecieved) {
 8003aa0:	4c10      	ldr	r4, [pc, #64]	; (8003ae4 <Endpoint_Read_Control_Stream_LE+0x4c>)
	while (Length) {
 8003aa2:	b1de      	cbz	r6, 8003adc <Endpoint_Read_Control_Stream_LE+0x44>
		if (EndPoint->IsOutRecieved) {
 8003aa4:	68a3      	ldr	r3, [r4, #8]
 8003aa6:	f013 0f20 	tst.w	r3, #32
 8003aaa:	d103      	bne.n	8003ab4 <Endpoint_Read_Control_Stream_LE+0x1c>
 8003aac:	68a3      	ldr	r3, [r4, #8]
 8003aae:	f013 0f20 	tst.w	r3, #32
 8003ab2:	d0fb      	beq.n	8003aac <Endpoint_Read_Control_Stream_LE+0x14>
			Bytes = EndPoint->OutBytesAvailable > Length
					? Length : EndPoint->OutBytesAvailable;
 8003ab4:	68e5      	ldr	r5, [r4, #12]
 8003ab6:	42b5      	cmp	r5, r6
 8003ab8:	bf28      	it	cs
 8003aba:	4635      	movcs	r5, r6
 8003abc:	fa1f f885 	uxth.w	r8, r5
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	6961      	ldr	r1, [r4, #20]
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	f000 f85f 	bl	8003b88 <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8003aca:	68e3      	ldr	r3, [r4, #12]
 8003acc:	eba3 0308 	sub.w	r3, r3, r8
 8003ad0:	60e3      	str	r3, [r4, #12]
			Length -= Bytes;
 8003ad2:	1b75      	subs	r5, r6, r5
 8003ad4:	b2ae      	uxth	r6, r5

			Endpoint_ClearOUT();
 8003ad6:	f7fe fe37 	bl	8002748 <Endpoint_ClearOUT>
 8003ada:	e7e2      	b.n	8003aa2 <Endpoint_Read_Control_Stream_LE+0xa>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 8003adc:	2000      	movs	r0, #0
 8003ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000ba8 	.word	0x20000ba8

08003ae8 <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8003ae8:	b508      	push	{r3, lr}
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8003aea:	f7ff ffd5 	bl	8003a98 <Endpoint_Read_Control_Stream_LE>
}
 8003aee:	bd08      	pop	{r3, pc}

08003af0 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 8003af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af4:	4681      	mov	r9, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <Endpoint_Null_Stream+0x94>)
 8003af8:	f893 513c 	ldrb.w	r5, [r3, #316]	; 0x13c
		uint16_t Bytes = 0;
		uint16_t BytesTransfered = 0;
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 8003afc:	460f      	mov	r7, r1
 8003afe:	b151      	cbz	r1, 8003b16 <Endpoint_Null_Stream+0x26>
			Length -= *BytesProcessed;
 8003b00:	880e      	ldrh	r6, [r1, #0]
 8003b02:	1b84      	subs	r4, r0, r6
 8003b04:	fa1f f984 	uxth.w	r9, r4
			BytesTransfered = *BytesProcessed;
		}

		while (Length) {
			if (ep->InInUse)
 8003b08:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <Endpoint_Null_Stream+0x94>)
 8003b0a:	222c      	movs	r2, #44	; 0x2c
 8003b0c:	fb02 3505 	mla	r5, r2, r5, r3
				continue;
			if (Endpoint_IsReadWriteAllowed()) {
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 8003b10:	f04f 0800 	mov.w	r8, #0
 8003b14:	e01a      	b.n	8003b4c <Endpoint_Null_Stream+0x5c>
		uint16_t BytesTransfered = 0;
 8003b16:	2600      	movs	r6, #0
 8003b18:	e7f6      	b.n	8003b08 <Endpoint_Null_Stream+0x18>
			if (Endpoint_IsReadWriteAllowed()) {
 8003b1a:	f7fe fe9f 	bl	800285c <Endpoint_IsReadWriteAllowed>
 8003b1e:	b308      	cbz	r0, 8003b64 <Endpoint_Null_Stream+0x74>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003b20:	69e8      	ldr	r0, [r5, #28]
 8003b22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b24:	1a1b      	subs	r3, r3, r0
 8003b26:	454b      	cmp	r3, r9
 8003b28:	bf28      	it	cs
 8003b2a:	464b      	movcs	r3, r9
 8003b2c:	b29c      	uxth	r4, r3
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 8003b2e:	6a2b      	ldr	r3, [r5, #32]
 8003b30:	4622      	mov	r2, r4
 8003b32:	4641      	mov	r1, r8
 8003b34:	4418      	add	r0, r3
 8003b36:	f000 fd77 	bl	8004628 <memset>
				ep->InBytesAvailable += Bytes;
 8003b3a:	69eb      	ldr	r3, [r5, #28]
 8003b3c:	4423      	add	r3, r4
 8003b3e:	61eb      	str	r3, [r5, #28]
				BytesTransfered += Bytes;
 8003b40:	4426      	add	r6, r4
 8003b42:	b2b6      	uxth	r6, r6
				Length -= Bytes;
 8003b44:	eba9 0404 	sub.w	r4, r9, r4
 8003b48:	fa1f f984 	uxth.w	r9, r4
		while (Length) {
 8003b4c:	f1b9 0f00 	cmp.w	r9, #0
 8003b50:	d014      	beq.n	8003b7c <Endpoint_Null_Stream+0x8c>
			if (ep->InInUse)
 8003b52:	68ab      	ldr	r3, [r5, #8]
 8003b54:	f013 0f10 	tst.w	r3, #16
 8003b58:	d0df      	beq.n	8003b1a <Endpoint_Null_Stream+0x2a>
 8003b5a:	68ab      	ldr	r3, [r5, #8]
 8003b5c:	f013 0f10 	tst.w	r3, #16
 8003b60:	d1fb      	bne.n	8003b5a <Endpoint_Null_Stream+0x6a>
 8003b62:	e7da      	b.n	8003b1a <Endpoint_Null_Stream+0x2a>
			}
			else {
				Endpoint_ClearIN();
 8003b64:	f7fe fe1e 	bl	80027a4 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 8003b68:	b92f      	cbnz	r7, 8003b76 <Endpoint_Null_Stream+0x86>
					*BytesProcessed = BytesTransfered;
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003b6a:	f7fe fd9d 	bl	80026a8 <Endpoint_WaitUntilReady>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d0eb      	beq.n	8003b4c <Endpoint_Null_Stream+0x5c>
 8003b74:	e003      	b.n	8003b7e <Endpoint_Null_Stream+0x8e>
					*BytesProcessed = BytesTransfered;
 8003b76:	803e      	strh	r6, [r7, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003b78:	2305      	movs	r3, #5
 8003b7a:	e000      	b.n	8003b7e <Endpoint_Null_Stream+0x8e>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b84:	20000ba8 	.word	0x20000ba8

08003b88 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8003b88:	0913      	lsrs	r3, r2, #4
 8003b8a:	d011      	beq.n	8003bb0 <thumb2_memcpy+0x28>
 8003b8c:	f851 cb04 	ldr.w	ip, [r1], #4
 8003b90:	f840 cb04 	str.w	ip, [r0], #4
 8003b94:	f851 cb04 	ldr.w	ip, [r1], #4
 8003b98:	f840 cb04 	str.w	ip, [r0], #4
 8003b9c:	f851 cb04 	ldr.w	ip, [r1], #4
 8003ba0:	f840 cb04 	str.w	ip, [r0], #4
 8003ba4:	f851 cb04 	ldr.w	ip, [r1], #4
 8003ba8:	f840 cb04 	str.w	ip, [r0], #4
 8003bac:	3b01      	subs	r3, #1
 8003bae:	d1ed      	bne.n	8003b8c <thumb2_memcpy+0x4>
 8003bb0:	f012 030f 	ands.w	r3, r2, #15
 8003bb4:	d005      	beq.n	8003bc2 <thumb2_memcpy+0x3a>
 8003bb6:	f811 cb01 	ldrb.w	ip, [r1], #1
 8003bba:	f800 cb01 	strb.w	ip, [r0], #1
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	d1f9      	bne.n	8003bb6 <thumb2_memcpy+0x2e>
 8003bc2:	4770      	bx	lr

08003bc4 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8003bc4:	b082      	sub	sp, #8
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	9b01      	ldr	r3, [sp, #4]
 8003bcc:	4298      	cmp	r0, r3
 8003bce:	d906      	bls.n	8003bde <delay+0x1a>
  {
    __NOP();
 8003bd0:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8003bd2:	9b01      	ldr	r3, [sp, #4]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	9b01      	ldr	r3, [sp, #4]
 8003bda:	4283      	cmp	r3, r0
 8003bdc:	d3f8      	bcc.n	8003bd0 <delay+0xc>
  }
}
 8003bde:	b002      	add	sp, #8
 8003be0:	4770      	bx	lr
	...

08003be4 <SystemCoreSetup>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003be4:	b672      	cpsid	i
{
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <SystemCoreSetup+0x38>)
 8003be8:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <SystemCoreSetup+0x3c>)
 8003bea:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8003bf0:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003bf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bf6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	f022 0208 	bic.w	r2, r2, #8
 8003c04:	615a      	str	r2, [r3, #20]

  temp = FLASH0->FCON;
 8003c06:	4907      	ldr	r1, [pc, #28]	; (8003c24 <SystemCoreSetup+0x40>)
 8003c08:	f241 0214 	movw	r2, #4116	; 0x1014
 8003c0c:	588b      	ldr	r3, [r1, r2]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8003c0e:	f023 030f 	bic.w	r3, r3, #15
  temp |= PMU_FLASH_WS;
 8003c12:	f043 0303 	orr.w	r3, r3, #3
  FLASH0->FCON = temp;
 8003c16:	508b      	str	r3, [r1, r2]
}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	e000ed00 	.word	0xe000ed00
 8003c20:	08000000 	.word	0x08000000
 8003c24:	58001000 	.word	0x58001000

08003c28 <OSCHP_GetFrequency>:
}

__WEAK uint32_t OSCHP_GetFrequency(void)
{
  return OSCHP_FREQUENCY;
}
 8003c28:	4800      	ldr	r0, [pc, #0]	; (8003c2c <OSCHP_GetFrequency+0x4>)
 8003c2a:	4770      	bx	lr
 8003c2c:	00b71b00 	.word	0x00b71b00

08003c30 <SystemCoreClockUpdate>:
{
 8003c30:	b508      	push	{r3, lr}
  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8003c32:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <SystemCoreClockUpdate+0x7c>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c3a:	d027      	beq.n	8003c8c <SystemCoreClockUpdate+0x5c>
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <SystemCoreClockUpdate+0x80>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f013 0f01 	tst.w	r3, #1
 8003c44:	d00d      	beq.n	8003c62 <SystemCoreClockUpdate+0x32>
      temp = OFI_FREQUENCY;
 8003c46:	481b      	ldr	r0, [pc, #108]	; (8003cb4 <SystemCoreClockUpdate+0x84>)
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <SystemCoreClockUpdate+0x80>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f013 0f04 	tst.w	r3, #4
 8003c50:	d10a      	bne.n	8003c68 <SystemCoreClockUpdate+0x38>
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8003c52:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <SystemCoreClockUpdate+0x80>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5a:	3301      	adds	r3, #1
      temp = (temp / kdiv);
 8003c5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c60:	e015      	b.n	8003c8e <SystemCoreClockUpdate+0x5e>
      temp = OSCHP_GetFrequency();
 8003c62:	f7ff ffe1 	bl	8003c28 <OSCHP_GetFrequency>
 8003c66:	e7ef      	b.n	8003c48 <SystemCoreClockUpdate+0x18>
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <SystemCoreClockUpdate+0x80>)
 8003c6a:	6899      	ldr	r1, [r3, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8003c6c:	689a      	ldr	r2, [r3, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8003c6e:	689b      	ldr	r3, [r3, #8]
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8003c70:	f3c1 6103 	ubfx	r1, r1, #24, #4
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8003c74:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003c78:	3301      	adds	r3, #1
      temp = (temp / (pdiv * kdiv)) * ndiv;
 8003c7a:	fb01 3303 	mla	r3, r1, r3, r3
 8003c7e:	fbb0 f0f3 	udiv	r0, r0, r3
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8003c82:	f3c2 2306 	ubfx	r3, r2, #8, #7
      temp = (temp / (pdiv * kdiv)) * ndiv;
 8003c86:	fb03 0000 	mla	r0, r3, r0, r0
 8003c8a:	e000      	b.n	8003c8e <SystemCoreClockUpdate+0x5e>
    temp = OFI_FREQUENCY;
 8003c8c:	4809      	ldr	r0, [pc, #36]	; (8003cb4 <SystemCoreClockUpdate+0x84>)
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8003c8e:	4a07      	ldr	r2, [pc, #28]	; (8003cac <SystemCoreClockUpdate+0x7c>)
 8003c90:	68d3      	ldr	r3, [r2, #12]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	3301      	adds	r3, #1
 8003c96:	fbb0 f0f3 	udiv	r0, r0, r3
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8003c9a:	6913      	ldr	r3, [r2, #16]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = temp;
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <SystemCoreClockUpdate+0x88>)
 8003ca8:	6018      	str	r0, [r3, #0]
}
 8003caa:	bd08      	pop	{r3, pc}
 8003cac:	50004600 	.word	0x50004600
 8003cb0:	50004710 	.word	0x50004710
 8003cb4:	016e3600 	.word	0x016e3600
 8003cb8:	2000ffc0 	.word	0x2000ffc0
{
 8003cbc:	b510      	push	{r4, lr}
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8003cbe:	4b5c      	ldr	r3, [pc, #368]	; (8003e30 <SystemCoreClockUpdate+0x200>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f013 0f01 	tst.w	r3, #1
 8003cc6:	d108      	bne.n	8003cda <SystemCoreClockUpdate+0xaa>
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8003cc8:	4a59      	ldr	r2, [pc, #356]	; (8003e30 <SystemCoreClockUpdate+0x200>)
 8003cca:	6853      	ldr	r3, [r2, #4]
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6053      	str	r3, [r2, #4]
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	f013 0f01 	tst.w	r3, #1
 8003cd8:	d0fb      	beq.n	8003cd2 <SystemCoreClockUpdate+0xa2>
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8003cda:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <SystemCoreClockUpdate+0x204>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003ce2:	d178      	bne.n	8003dd6 <SystemCoreClockUpdate+0x1a6>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8003ce4:	4c54      	ldr	r4, [pc, #336]	; (8003e38 <SystemCoreClockUpdate+0x208>)
 8003ce6:	6863      	ldr	r3, [r4, #4]
 8003ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cec:	6063      	str	r3, [r4, #4]
  delay(DELAY_CNT_50US_50MHZ);
 8003cee:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003cf2:	f7ff ff67 	bl	8003bc4 <delay>
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8003cf6:	6863      	ldr	r3, [r4, #4]
 8003cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfc:	f023 0302 	bic.w	r3, r3, #2
 8003d00:	6063      	str	r3, [r4, #4]
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8003d02:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <SystemCoreClockUpdate+0x20c>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f013 0f30 	tst.w	r3, #48	; 0x30
 8003d0a:	d16e      	bne.n	8003dea <SystemCoreClockUpdate+0x1ba>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8003d0c:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <SystemCoreClockUpdate+0x208>)
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	f042 0210 	orr.w	r2, r2, #16
 8003d1c:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003d1e:	4a48      	ldr	r2, [pc, #288]	; (8003e40 <SystemCoreClockUpdate+0x210>)
 8003d20:	609a      	str	r2, [r3, #8]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d28:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	f022 0210 	bic.w	r2, r2, #16
 8003d30:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003d38:	605a      	str	r2, [r3, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6813      	ldr	r3, [r2, #0]
 8003d3e:	f013 0f04 	tst.w	r3, #4
 8003d42:	d0fb      	beq.n	8003d3c <SystemCoreClockUpdate+0x10c>
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8003d44:	4a3c      	ldr	r2, [pc, #240]	; (8003e38 <SystemCoreClockUpdate+0x208>)
 8003d46:	6853      	ldr	r3, [r2, #4]
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8003d4e:	6813      	ldr	r3, [r2, #0]
 8003d50:	f013 0f01 	tst.w	r3, #1
 8003d54:	d1fb      	bne.n	8003d4e <SystemCoreClockUpdate+0x11e>
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8003d56:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <SystemCoreClockUpdate+0x214>)
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d5e:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8003d60:	2200      	movs	r2, #0
 8003d62:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8003d64:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8003d66:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8003d6a:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	619a      	str	r2, [r3, #24]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8003d70:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7a:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003d7c:	4a32      	ldr	r2, [pc, #200]	; (8003e48 <SystemCoreClockUpdate+0x218>)
 8003d7e:	609a      	str	r2, [r3, #8]
  delay(DELAY_CNT_50US_60MHZ);
 8003d80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003d84:	f7ff ff1e 	bl	8003bc4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003d88:	4a2b      	ldr	r2, [pc, #172]	; (8003e38 <SystemCoreClockUpdate+0x208>)
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	f013 0f04 	tst.w	r3, #4
 8003d90:	d0fb      	beq.n	8003d8a <SystemCoreClockUpdate+0x15a>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <SystemCoreClockUpdate+0x208>)
 8003d94:	4a2d      	ldr	r2, [pc, #180]	; (8003e4c <SystemCoreClockUpdate+0x21c>)
 8003d96:	609a      	str	r2, [r3, #8]
  delay(DELAY_CNT_50US_90MHZ);
 8003d98:	f241 1094 	movw	r0, #4500	; 0x1194
 8003d9c:	f7ff ff12 	bl	8003bc4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003da0:	4a25      	ldr	r2, [pc, #148]	; (8003e38 <SystemCoreClockUpdate+0x208>)
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	f013 0f04 	tst.w	r3, #4
 8003da8:	d0fb      	beq.n	8003da2 <SystemCoreClockUpdate+0x172>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <SystemCoreClockUpdate+0x208>)
 8003dac:	4a28      	ldr	r2, [pc, #160]	; (8003e50 <SystemCoreClockUpdate+0x220>)
 8003dae:	609a      	str	r2, [r3, #8]
  delay(DELAY_CNT_50US_120MHZ);
 8003db0:	f241 7070 	movw	r0, #6000	; 0x1770
 8003db4:	f7ff ff06 	bl	8003bc4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <SystemCoreClockUpdate+0x208>)
 8003dba:	6813      	ldr	r3, [r2, #0]
 8003dbc:	f013 0f04 	tst.w	r3, #4
 8003dc0:	d0fb      	beq.n	8003dba <SystemCoreClockUpdate+0x18a>
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8003dc2:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <SystemCoreClockUpdate+0x224>)
 8003dc4:	2205      	movs	r2, #5
 8003dc6:	60da      	str	r2, [r3, #12]
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8003dc8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8003dcc:	2200      	movs	r2, #0
 8003dce:	605a      	str	r2, [r3, #4]
  SystemCoreClockUpdate();
 8003dd0:	f7ff ff2e 	bl	8003c30 <SystemCoreClockUpdate>
}
 8003dd4:	bd10      	pop	{r4, pc}
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8003dd6:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <SystemCoreClockUpdate+0x204>)
 8003dd8:	6893      	ldr	r3, [r2, #8]
 8003dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dde:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8003de0:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8003de4:	f7ff feee 	bl	8003bc4 <delay>
 8003de8:	e77c      	b.n	8003ce4 <SystemCoreClockUpdate+0xb4>
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8003dea:	3c10      	subs	r4, #16
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003df2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003df6:	6063      	str	r3, [r4, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8003df8:	f7ff ff16 	bl	8003c28 <OSCHP_GetFrequency>
 8003dfc:	6862      	ldr	r2, [r4, #4]
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <SystemCoreClockUpdate+0x228>)
 8003e00:	fba3 1300 	umull	r1, r3, r3, r0
 8003e04:	0d1b      	lsrs	r3, r3, #20
 8003e06:	3b01      	subs	r3, #1
 8003e08:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8003e0c:	6063      	str	r3, [r4, #4]
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <SystemCoreClockUpdate+0x208>)
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	60da      	str	r2, [r3, #12]
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003e1e:	605a      	str	r2, [r3, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8003e20:	461a      	mov	r2, r3
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003e28:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8003e2c:	d1f9      	bne.n	8003e22 <SystemCoreClockUpdate+0x1f2>
 8003e2e:	e76d      	b.n	8003d0c <SystemCoreClockUpdate+0xdc>
 8003e30:	50004200 	.word	0x50004200
 8003e34:	50004400 	.word	0x50004400
 8003e38:	50004710 	.word	0x50004710
 8003e3c:	50004700 	.word	0x50004700
 8003e40:	01134f00 	.word	0x01134f00
 8003e44:	50004600 	.word	0x50004600
 8003e48:	01074f00 	.word	0x01074f00
 8003e4c:	01044f00 	.word	0x01044f00
 8003e50:	01034f00 	.word	0x01034f00
 8003e54:	50004160 	.word	0x50004160
 8003e58:	6b5fca6b 	.word	0x6b5fca6b

08003e5c <SystemInit>:
{
 8003e5c:	b510      	push	{r4, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 8003e5e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003e62:	4c04      	ldr	r4, [pc, #16]	; (8003e74 <SystemInit+0x18>)
 8003e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SystemCoreSetup();
 8003e6a:	f7ff febb 	bl	8003be4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8003e6e:	f7fc fa65 	bl	800033c <SystemCoreClockSetup>
}
 8003e72:	bd10      	pop	{r4, pc}
 8003e74:	2000ffc4 	.word	0x2000ffc4

08003e78 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8003e78:	b508      	push	{r3, lr}
 8003e7a:	4603      	mov	r3, r0
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8003e7c:	4a0c      	ldr	r2, [pc, #48]	; (8003eb0 <_sbrk+0x38>)
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	b15a      	cbz	r2, 8003e9a <_sbrk+0x22>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
  }

  base = heap_ptr;
 8003e82:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <_sbrk+0x38>)
 8003e84:	6810      	ldr	r0, [r2, #0]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8003e86:	3303      	adds	r3, #3
 8003e88:	f023 0303 	bic.w	r3, r3, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8003e8c:	4403      	add	r3, r0
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <_sbrk+0x3c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d206      	bcs.n	8003ea2 <_sbrk+0x2a>
  {
    heap_ptr += nbytes;
 8003e94:	4a06      	ldr	r2, [pc, #24]	; (8003eb0 <_sbrk+0x38>)
 8003e96:	6013      	str	r3, [r2, #0]
  {
    /* Heap overflow */
    errno = ENOMEM;
    return ((caddr_t)-1);
  }
}
 8003e98:	bd08      	pop	{r3, pc}
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8003e9a:	4a05      	ldr	r2, [pc, #20]	; (8003eb0 <_sbrk+0x38>)
 8003e9c:	4906      	ldr	r1, [pc, #24]	; (8003eb8 <_sbrk+0x40>)
 8003e9e:	6011      	str	r1, [r2, #0]
 8003ea0:	e7ef      	b.n	8003e82 <_sbrk+0xa>
    errno = ENOMEM;
 8003ea2:	f000 f849 	bl	8003f38 <__errno>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 8003eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eae:	e7f3      	b.n	8003e98 <_sbrk+0x20>
 8003eb0:	200008ac 	.word	0x200008ac
 8003eb4:	2000ffc0 	.word	0x2000ffc0
 8003eb8:	20000fa8 	.word	0x20000fa8

08003ebc <_init>:

/* Init */
void _init(void)
{}
 8003ebc:	4770      	bx	lr
	...

08003ec0 <calloc>:
 8003ec0:	4b02      	ldr	r3, [pc, #8]	; (8003ecc <calloc+0xc>)
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	4601      	mov	r1, r0
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	f000 b802 	b.w	8003ed0 <_calloc_r>
 8003ecc:	20000030 	.word	0x20000030

08003ed0 <_calloc_r>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	fb02 f101 	mul.w	r1, r2, r1
 8003ed6:	f000 f869 	bl	8003fac <_malloc_r>
 8003eda:	4604      	mov	r4, r0
 8003edc:	b1d8      	cbz	r0, 8003f16 <_calloc_r+0x46>
 8003ede:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8003ee2:	f022 0203 	bic.w	r2, r2, #3
 8003ee6:	3a04      	subs	r2, #4
 8003ee8:	2a24      	cmp	r2, #36	; 0x24
 8003eea:	d81d      	bhi.n	8003f28 <_calloc_r+0x58>
 8003eec:	2a13      	cmp	r2, #19
 8003eee:	d914      	bls.n	8003f1a <_calloc_r+0x4a>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2a1b      	cmp	r2, #27
 8003ef4:	e9c0 3300 	strd	r3, r3, [r0]
 8003ef8:	d91b      	bls.n	8003f32 <_calloc_r+0x62>
 8003efa:	2a24      	cmp	r2, #36	; 0x24
 8003efc:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8003f00:	bf0a      	itet	eq
 8003f02:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 8003f06:	f100 0210 	addne.w	r2, r0, #16
 8003f0a:	f100 0218 	addeq.w	r2, r0, #24
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e9c2 3300 	strd	r3, r3, [r2]
 8003f14:	6093      	str	r3, [r2, #8]
 8003f16:	4620      	mov	r0, r4
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e9c2 3300 	strd	r3, r3, [r2]
 8003f22:	6093      	str	r3, [r2, #8]
 8003f24:	4620      	mov	r0, r4
 8003f26:	bd10      	pop	{r4, pc}
 8003f28:	2100      	movs	r1, #0
 8003f2a:	f000 fb7d 	bl	8004628 <memset>
 8003f2e:	4620      	mov	r0, r4
 8003f30:	bd10      	pop	{r4, pc}
 8003f32:	f100 0208 	add.w	r2, r0, #8
 8003f36:	e7f1      	b.n	8003f1c <_calloc_r+0x4c>

08003f38 <__errno>:
 8003f38:	4b01      	ldr	r3, [pc, #4]	; (8003f40 <__errno+0x8>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000030 	.word	0x20000030

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4e0d      	ldr	r6, [pc, #52]	; (8003f7c <__libc_init_array+0x38>)
 8003f48:	4d0d      	ldr	r5, [pc, #52]	; (8003f80 <__libc_init_array+0x3c>)
 8003f4a:	1b76      	subs	r6, r6, r5
 8003f4c:	10b6      	asrs	r6, r6, #2
 8003f4e:	d006      	beq.n	8003f5e <__libc_init_array+0x1a>
 8003f50:	2400      	movs	r4, #0
 8003f52:	3401      	adds	r4, #1
 8003f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f58:	4798      	blx	r3
 8003f5a:	42a6      	cmp	r6, r4
 8003f5c:	d1f9      	bne.n	8003f52 <__libc_init_array+0xe>
 8003f5e:	4e09      	ldr	r6, [pc, #36]	; (8003f84 <__libc_init_array+0x40>)
 8003f60:	4d09      	ldr	r5, [pc, #36]	; (8003f88 <__libc_init_array+0x44>)
 8003f62:	1b76      	subs	r6, r6, r5
 8003f64:	f7ff ffaa 	bl	8003ebc <_init>
 8003f68:	10b6      	asrs	r6, r6, #2
 8003f6a:	d006      	beq.n	8003f7a <__libc_init_array+0x36>
 8003f6c:	2400      	movs	r4, #0
 8003f6e:	3401      	adds	r4, #1
 8003f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f74:	4798      	blx	r3
 8003f76:	42a6      	cmp	r6, r4
 8003f78:	d1f9      	bne.n	8003f6e <__libc_init_array+0x2a>
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	20000870 	.word	0x20000870
 8003f80:	20000870 	.word	0x20000870
 8003f84:	20000870 	.word	0x20000870
 8003f88:	20000870 	.word	0x20000870

08003f8c <malloc>:
 8003f8c:	4b02      	ldr	r3, [pc, #8]	; (8003f98 <malloc+0xc>)
 8003f8e:	4601      	mov	r1, r0
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f000 b80b 	b.w	8003fac <_malloc_r>
 8003f96:	bf00      	nop
 8003f98:	20000030 	.word	0x20000030

08003f9c <free>:
 8003f9c:	4b02      	ldr	r3, [pc, #8]	; (8003fa8 <free+0xc>)
 8003f9e:	4601      	mov	r1, r0
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f000 bcab 	b.w	80048fc <_free_r>
 8003fa6:	bf00      	nop
 8003fa8:	20000030 	.word	0x20000030

08003fac <_malloc_r>:
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	f101 050b 	add.w	r5, r1, #11
 8003fb4:	2d16      	cmp	r5, #22
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	4606      	mov	r6, r0
 8003fba:	d823      	bhi.n	8004004 <_malloc_r+0x58>
 8003fbc:	2910      	cmp	r1, #16
 8003fbe:	f200 80b9 	bhi.w	8004134 <_malloc_r+0x188>
 8003fc2:	f000 fb7b 	bl	80046bc <__malloc_lock>
 8003fc6:	2510      	movs	r5, #16
 8003fc8:	2318      	movs	r3, #24
 8003fca:	2002      	movs	r0, #2
 8003fcc:	4fc5      	ldr	r7, [pc, #788]	; (80042e4 <_malloc_r+0x338>)
 8003fce:	443b      	add	r3, r7
 8003fd0:	f1a3 0208 	sub.w	r2, r3, #8
 8003fd4:	685c      	ldr	r4, [r3, #4]
 8003fd6:	4294      	cmp	r4, r2
 8003fd8:	f000 8166 	beq.w	80042a8 <_malloc_r+0x2fc>
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	4423      	add	r3, r4
 8003fe4:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	60e9      	str	r1, [r5, #12]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	608d      	str	r5, [r1, #8]
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	f000 fb67 	bl	80046c8 <__malloc_unlock>
 8003ffa:	3408      	adds	r4, #8
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	b003      	add	sp, #12
 8004000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004004:	f035 0507 	bics.w	r5, r5, #7
 8004008:	f100 8094 	bmi.w	8004134 <_malloc_r+0x188>
 800400c:	42a9      	cmp	r1, r5
 800400e:	f200 8091 	bhi.w	8004134 <_malloc_r+0x188>
 8004012:	f000 fb53 	bl	80046bc <__malloc_lock>
 8004016:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800401a:	f0c0 8183 	bcc.w	8004324 <_malloc_r+0x378>
 800401e:	0a6b      	lsrs	r3, r5, #9
 8004020:	f000 808f 	beq.w	8004142 <_malloc_r+0x196>
 8004024:	2b04      	cmp	r3, #4
 8004026:	f200 8146 	bhi.w	80042b6 <_malloc_r+0x30a>
 800402a:	09ab      	lsrs	r3, r5, #6
 800402c:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8004030:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8004034:	00c3      	lsls	r3, r0, #3
 8004036:	4fab      	ldr	r7, [pc, #684]	; (80042e4 <_malloc_r+0x338>)
 8004038:	443b      	add	r3, r7
 800403a:	f1a3 0108 	sub.w	r1, r3, #8
 800403e:	685c      	ldr	r4, [r3, #4]
 8004040:	42a1      	cmp	r1, r4
 8004042:	d106      	bne.n	8004052 <_malloc_r+0xa6>
 8004044:	e00c      	b.n	8004060 <_malloc_r+0xb4>
 8004046:	2a00      	cmp	r2, #0
 8004048:	f280 811d 	bge.w	8004286 <_malloc_r+0x2da>
 800404c:	68e4      	ldr	r4, [r4, #12]
 800404e:	42a1      	cmp	r1, r4
 8004050:	d006      	beq.n	8004060 <_malloc_r+0xb4>
 8004052:	6863      	ldr	r3, [r4, #4]
 8004054:	f023 0303 	bic.w	r3, r3, #3
 8004058:	1b5a      	subs	r2, r3, r5
 800405a:	2a0f      	cmp	r2, #15
 800405c:	ddf3      	ble.n	8004046 <_malloc_r+0x9a>
 800405e:	4660      	mov	r0, ip
 8004060:	693c      	ldr	r4, [r7, #16]
 8004062:	f8df c294 	ldr.w	ip, [pc, #660]	; 80042f8 <_malloc_r+0x34c>
 8004066:	4564      	cmp	r4, ip
 8004068:	d071      	beq.n	800414e <_malloc_r+0x1a2>
 800406a:	6863      	ldr	r3, [r4, #4]
 800406c:	f023 0303 	bic.w	r3, r3, #3
 8004070:	1b5a      	subs	r2, r3, r5
 8004072:	2a0f      	cmp	r2, #15
 8004074:	f300 8144 	bgt.w	8004300 <_malloc_r+0x354>
 8004078:	2a00      	cmp	r2, #0
 800407a:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 800407e:	f280 8126 	bge.w	80042ce <_malloc_r+0x322>
 8004082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004086:	f080 8169 	bcs.w	800435c <_malloc_r+0x3b0>
 800408a:	08db      	lsrs	r3, r3, #3
 800408c:	1c59      	adds	r1, r3, #1
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 8004094:	f8c4 8008 	str.w	r8, [r4, #8]
 8004098:	f04f 0e01 	mov.w	lr, #1
 800409c:	109b      	asrs	r3, r3, #2
 800409e:	fa0e f303 	lsl.w	r3, lr, r3
 80040a2:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f1ae 0208 	sub.w	r2, lr, #8
 80040ac:	60e2      	str	r2, [r4, #12]
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 80040b4:	f8c8 400c 	str.w	r4, [r8, #12]
 80040b8:	1082      	asrs	r2, r0, #2
 80040ba:	2401      	movs	r4, #1
 80040bc:	4094      	lsls	r4, r2
 80040be:	429c      	cmp	r4, r3
 80040c0:	d84b      	bhi.n	800415a <_malloc_r+0x1ae>
 80040c2:	421c      	tst	r4, r3
 80040c4:	d106      	bne.n	80040d4 <_malloc_r+0x128>
 80040c6:	f020 0003 	bic.w	r0, r0, #3
 80040ca:	0064      	lsls	r4, r4, #1
 80040cc:	421c      	tst	r4, r3
 80040ce:	f100 0004 	add.w	r0, r0, #4
 80040d2:	d0fa      	beq.n	80040ca <_malloc_r+0x11e>
 80040d4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80040d8:	46ce      	mov	lr, r9
 80040da:	4680      	mov	r8, r0
 80040dc:	f8de 300c 	ldr.w	r3, [lr, #12]
 80040e0:	459e      	cmp	lr, r3
 80040e2:	d107      	bne.n	80040f4 <_malloc_r+0x148>
 80040e4:	e122      	b.n	800432c <_malloc_r+0x380>
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	f280 8129 	bge.w	800433e <_malloc_r+0x392>
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	459e      	cmp	lr, r3
 80040f0:	f000 811c 	beq.w	800432c <_malloc_r+0x380>
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	f021 0103 	bic.w	r1, r1, #3
 80040fa:	1b4a      	subs	r2, r1, r5
 80040fc:	2a0f      	cmp	r2, #15
 80040fe:	ddf2      	ble.n	80040e6 <_malloc_r+0x13a>
 8004100:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 8004104:	195c      	adds	r4, r3, r5
 8004106:	f045 0501 	orr.w	r5, r5, #1
 800410a:	605d      	str	r5, [r3, #4]
 800410c:	f042 0501 	orr.w	r5, r2, #1
 8004110:	f8c8 e00c 	str.w	lr, [r8, #12]
 8004114:	4630      	mov	r0, r6
 8004116:	f8ce 8008 	str.w	r8, [lr, #8]
 800411a:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800411e:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 8004122:	6065      	str	r5, [r4, #4]
 8004124:	505a      	str	r2, [r3, r1]
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	f000 face 	bl	80046c8 <__malloc_unlock>
 800412c:	9b01      	ldr	r3, [sp, #4]
 800412e:	f103 0408 	add.w	r4, r3, #8
 8004132:	e763      	b.n	8003ffc <_malloc_r+0x50>
 8004134:	2400      	movs	r4, #0
 8004136:	230c      	movs	r3, #12
 8004138:	4620      	mov	r0, r4
 800413a:	6033      	str	r3, [r6, #0]
 800413c:	b003      	add	sp, #12
 800413e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004146:	2040      	movs	r0, #64	; 0x40
 8004148:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800414c:	e773      	b.n	8004036 <_malloc_r+0x8a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1082      	asrs	r2, r0, #2
 8004152:	2401      	movs	r4, #1
 8004154:	4094      	lsls	r4, r2
 8004156:	429c      	cmp	r4, r3
 8004158:	d9b3      	bls.n	80040c2 <_malloc_r+0x116>
 800415a:	68bc      	ldr	r4, [r7, #8]
 800415c:	6863      	ldr	r3, [r4, #4]
 800415e:	f023 0903 	bic.w	r9, r3, #3
 8004162:	45a9      	cmp	r9, r5
 8004164:	d303      	bcc.n	800416e <_malloc_r+0x1c2>
 8004166:	eba9 0305 	sub.w	r3, r9, r5
 800416a:	2b0f      	cmp	r3, #15
 800416c:	dc7b      	bgt.n	8004266 <_malloc_r+0x2ba>
 800416e:	4b5e      	ldr	r3, [pc, #376]	; (80042e8 <_malloc_r+0x33c>)
 8004170:	f8df a188 	ldr.w	sl, [pc, #392]	; 80042fc <_malloc_r+0x350>
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	f8da 3000 	ldr.w	r3, [sl]
 800417a:	3301      	adds	r3, #1
 800417c:	eb05 0802 	add.w	r8, r5, r2
 8004180:	f000 8148 	beq.w	8004414 <_malloc_r+0x468>
 8004184:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 8004188:	f108 080f 	add.w	r8, r8, #15
 800418c:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 8004190:	f028 080f 	bic.w	r8, r8, #15
 8004194:	4641      	mov	r1, r8
 8004196:	4630      	mov	r0, r6
 8004198:	f000 fac2 	bl	8004720 <_sbrk_r>
 800419c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80041a0:	4683      	mov	fp, r0
 80041a2:	f000 8104 	beq.w	80043ae <_malloc_r+0x402>
 80041a6:	eb04 0009 	add.w	r0, r4, r9
 80041aa:	4558      	cmp	r0, fp
 80041ac:	f200 80fd 	bhi.w	80043aa <_malloc_r+0x3fe>
 80041b0:	4a4e      	ldr	r2, [pc, #312]	; (80042ec <_malloc_r+0x340>)
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	4443      	add	r3, r8
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	f000 814d 	beq.w	8004456 <_malloc_r+0x4aa>
 80041bc:	f8da 1000 	ldr.w	r1, [sl]
 80041c0:	3101      	adds	r1, #1
 80041c2:	bf1b      	ittet	ne
 80041c4:	ebab 0000 	subne.w	r0, fp, r0
 80041c8:	181b      	addne	r3, r3, r0
 80041ca:	f8ca b000 	streq.w	fp, [sl]
 80041ce:	6013      	strne	r3, [r2, #0]
 80041d0:	f01b 0307 	ands.w	r3, fp, #7
 80041d4:	f000 8134 	beq.w	8004440 <_malloc_r+0x494>
 80041d8:	f1c3 0108 	rsb	r1, r3, #8
 80041dc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80041e0:	448b      	add	fp, r1
 80041e2:	3308      	adds	r3, #8
 80041e4:	44d8      	add	r8, fp
 80041e6:	f3c8 080b 	ubfx	r8, r8, #0, #12
 80041ea:	eba3 0808 	sub.w	r8, r3, r8
 80041ee:	4641      	mov	r1, r8
 80041f0:	4630      	mov	r0, r6
 80041f2:	9201      	str	r2, [sp, #4]
 80041f4:	f000 fa94 	bl	8004720 <_sbrk_r>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	9a01      	ldr	r2, [sp, #4]
 80041fc:	f000 8146 	beq.w	800448c <_malloc_r+0x4e0>
 8004200:	eba0 010b 	sub.w	r1, r0, fp
 8004204:	4441      	add	r1, r8
 8004206:	f041 0101 	orr.w	r1, r1, #1
 800420a:	6813      	ldr	r3, [r2, #0]
 800420c:	f8c7 b008 	str.w	fp, [r7, #8]
 8004210:	4443      	add	r3, r8
 8004212:	42bc      	cmp	r4, r7
 8004214:	f8cb 1004 	str.w	r1, [fp, #4]
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	d015      	beq.n	8004248 <_malloc_r+0x29c>
 800421c:	f1b9 0f0f 	cmp.w	r9, #15
 8004220:	f240 8130 	bls.w	8004484 <_malloc_r+0x4d8>
 8004224:	6860      	ldr	r0, [r4, #4]
 8004226:	f1a9 010c 	sub.w	r1, r9, #12
 800422a:	f021 0107 	bic.w	r1, r1, #7
 800422e:	f000 0001 	and.w	r0, r0, #1
 8004232:	eb04 0c01 	add.w	ip, r4, r1
 8004236:	4308      	orrs	r0, r1
 8004238:	f04f 0e05 	mov.w	lr, #5
 800423c:	290f      	cmp	r1, #15
 800423e:	6060      	str	r0, [r4, #4]
 8004240:	e9cc ee01 	strd	lr, lr, [ip, #4]
 8004244:	f200 813a 	bhi.w	80044bc <_malloc_r+0x510>
 8004248:	4a29      	ldr	r2, [pc, #164]	; (80042f0 <_malloc_r+0x344>)
 800424a:	482a      	ldr	r0, [pc, #168]	; (80042f4 <_malloc_r+0x348>)
 800424c:	6811      	ldr	r1, [r2, #0]
 800424e:	68bc      	ldr	r4, [r7, #8]
 8004250:	428b      	cmp	r3, r1
 8004252:	6801      	ldr	r1, [r0, #0]
 8004254:	bf88      	it	hi
 8004256:	6013      	strhi	r3, [r2, #0]
 8004258:	6862      	ldr	r2, [r4, #4]
 800425a:	428b      	cmp	r3, r1
 800425c:	f022 0203 	bic.w	r2, r2, #3
 8004260:	bf88      	it	hi
 8004262:	6003      	strhi	r3, [r0, #0]
 8004264:	e0a7      	b.n	80043b6 <_malloc_r+0x40a>
 8004266:	1962      	adds	r2, r4, r5
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	f045 0501 	orr.w	r5, r5, #1
 8004270:	6065      	str	r5, [r4, #4]
 8004272:	4630      	mov	r0, r6
 8004274:	60ba      	str	r2, [r7, #8]
 8004276:	6053      	str	r3, [r2, #4]
 8004278:	f000 fa26 	bl	80046c8 <__malloc_unlock>
 800427c:	3408      	adds	r4, #8
 800427e:	4620      	mov	r0, r4
 8004280:	b003      	add	sp, #12
 8004282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004286:	4423      	add	r3, r4
 8004288:	68e1      	ldr	r1, [r4, #12]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	68a5      	ldr	r5, [r4, #8]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	60e9      	str	r1, [r5, #12]
 8004294:	4630      	mov	r0, r6
 8004296:	608d      	str	r5, [r1, #8]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	f000 fa15 	bl	80046c8 <__malloc_unlock>
 800429e:	3408      	adds	r4, #8
 80042a0:	4620      	mov	r0, r4
 80042a2:	b003      	add	sp, #12
 80042a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a8:	68dc      	ldr	r4, [r3, #12]
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	bf08      	it	eq
 80042ae:	3002      	addeq	r0, #2
 80042b0:	f43f aed6 	beq.w	8004060 <_malloc_r+0xb4>
 80042b4:	e692      	b.n	8003fdc <_malloc_r+0x30>
 80042b6:	2b14      	cmp	r3, #20
 80042b8:	d971      	bls.n	800439e <_malloc_r+0x3f2>
 80042ba:	2b54      	cmp	r3, #84	; 0x54
 80042bc:	f200 80ad 	bhi.w	800441a <_malloc_r+0x46e>
 80042c0:	0b2b      	lsrs	r3, r5, #12
 80042c2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80042c6:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 80042ca:	00c3      	lsls	r3, r0, #3
 80042cc:	e6b3      	b.n	8004036 <_malloc_r+0x8a>
 80042ce:	4423      	add	r3, r4
 80042d0:	4630      	mov	r0, r6
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	3408      	adds	r4, #8
 80042dc:	f000 f9f4 	bl	80046c8 <__malloc_unlock>
 80042e0:	e68c      	b.n	8003ffc <_malloc_r+0x50>
 80042e2:	bf00      	nop
 80042e4:	20000460 	.word	0x20000460
 80042e8:	200008e4 	.word	0x200008e4
 80042ec:	200008b4 	.word	0x200008b4
 80042f0:	200008dc 	.word	0x200008dc
 80042f4:	200008e0 	.word	0x200008e0
 80042f8:	20000468 	.word	0x20000468
 80042fc:	20000868 	.word	0x20000868
 8004300:	1961      	adds	r1, r4, r5
 8004302:	f045 0e01 	orr.w	lr, r5, #1
 8004306:	f042 0501 	orr.w	r5, r2, #1
 800430a:	f8c4 e004 	str.w	lr, [r4, #4]
 800430e:	4630      	mov	r0, r6
 8004310:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8004314:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8004318:	604d      	str	r5, [r1, #4]
 800431a:	50e2      	str	r2, [r4, r3]
 800431c:	f000 f9d4 	bl	80046c8 <__malloc_unlock>
 8004320:	3408      	adds	r4, #8
 8004322:	e66b      	b.n	8003ffc <_malloc_r+0x50>
 8004324:	08e8      	lsrs	r0, r5, #3
 8004326:	f105 0308 	add.w	r3, r5, #8
 800432a:	e64f      	b.n	8003fcc <_malloc_r+0x20>
 800432c:	f108 0801 	add.w	r8, r8, #1
 8004330:	f018 0f03 	tst.w	r8, #3
 8004334:	f10e 0e08 	add.w	lr, lr, #8
 8004338:	f47f aed0 	bne.w	80040dc <_malloc_r+0x130>
 800433c:	e052      	b.n	80043e4 <_malloc_r+0x438>
 800433e:	4419      	add	r1, r3
 8004340:	461c      	mov	r4, r3
 8004342:	684a      	ldr	r2, [r1, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	604a      	str	r2, [r1, #4]
 8004350:	4630      	mov	r0, r6
 8004352:	60eb      	str	r3, [r5, #12]
 8004354:	609d      	str	r5, [r3, #8]
 8004356:	f000 f9b7 	bl	80046c8 <__malloc_unlock>
 800435a:	e64f      	b.n	8003ffc <_malloc_r+0x50>
 800435c:	0a5a      	lsrs	r2, r3, #9
 800435e:	2a04      	cmp	r2, #4
 8004360:	d935      	bls.n	80043ce <_malloc_r+0x422>
 8004362:	2a14      	cmp	r2, #20
 8004364:	d86f      	bhi.n	8004446 <_malloc_r+0x49a>
 8004366:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800436a:	00c9      	lsls	r1, r1, #3
 800436c:	325b      	adds	r2, #91	; 0x5b
 800436e:	eb07 0e01 	add.w	lr, r7, r1
 8004372:	5879      	ldr	r1, [r7, r1]
 8004374:	f1ae 0e08 	sub.w	lr, lr, #8
 8004378:	458e      	cmp	lr, r1
 800437a:	d058      	beq.n	800442e <_malloc_r+0x482>
 800437c:	684a      	ldr	r2, [r1, #4]
 800437e:	f022 0203 	bic.w	r2, r2, #3
 8004382:	429a      	cmp	r2, r3
 8004384:	d902      	bls.n	800438c <_malloc_r+0x3e0>
 8004386:	6889      	ldr	r1, [r1, #8]
 8004388:	458e      	cmp	lr, r1
 800438a:	d1f7      	bne.n	800437c <_malloc_r+0x3d0>
 800438c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 8004396:	f8ce 4008 	str.w	r4, [lr, #8]
 800439a:	60cc      	str	r4, [r1, #12]
 800439c:	e68c      	b.n	80040b8 <_malloc_r+0x10c>
 800439e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80043a2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 80043a6:	00c3      	lsls	r3, r0, #3
 80043a8:	e645      	b.n	8004036 <_malloc_r+0x8a>
 80043aa:	42bc      	cmp	r4, r7
 80043ac:	d072      	beq.n	8004494 <_malloc_r+0x4e8>
 80043ae:	68bc      	ldr	r4, [r7, #8]
 80043b0:	6862      	ldr	r2, [r4, #4]
 80043b2:	f022 0203 	bic.w	r2, r2, #3
 80043b6:	4295      	cmp	r5, r2
 80043b8:	eba2 0305 	sub.w	r3, r2, r5
 80043bc:	d802      	bhi.n	80043c4 <_malloc_r+0x418>
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	f73f af51 	bgt.w	8004266 <_malloc_r+0x2ba>
 80043c4:	4630      	mov	r0, r6
 80043c6:	f000 f97f 	bl	80046c8 <__malloc_unlock>
 80043ca:	2400      	movs	r4, #0
 80043cc:	e616      	b.n	8003ffc <_malloc_r+0x50>
 80043ce:	099a      	lsrs	r2, r3, #6
 80043d0:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80043d4:	00c9      	lsls	r1, r1, #3
 80043d6:	3238      	adds	r2, #56	; 0x38
 80043d8:	e7c9      	b.n	800436e <_malloc_r+0x3c2>
 80043da:	f8d9 9000 	ldr.w	r9, [r9]
 80043de:	4599      	cmp	r9, r3
 80043e0:	f040 8083 	bne.w	80044ea <_malloc_r+0x53e>
 80043e4:	f010 0f03 	tst.w	r0, #3
 80043e8:	f1a9 0308 	sub.w	r3, r9, #8
 80043ec:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80043f0:	d1f3      	bne.n	80043da <_malloc_r+0x42e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	ea23 0304 	bic.w	r3, r3, r4
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	0064      	lsls	r4, r4, #1
 80043fc:	429c      	cmp	r4, r3
 80043fe:	f63f aeac 	bhi.w	800415a <_malloc_r+0x1ae>
 8004402:	b91c      	cbnz	r4, 800440c <_malloc_r+0x460>
 8004404:	e6a9      	b.n	800415a <_malloc_r+0x1ae>
 8004406:	0064      	lsls	r4, r4, #1
 8004408:	f108 0804 	add.w	r8, r8, #4
 800440c:	421c      	tst	r4, r3
 800440e:	d0fa      	beq.n	8004406 <_malloc_r+0x45a>
 8004410:	4640      	mov	r0, r8
 8004412:	e65f      	b.n	80040d4 <_malloc_r+0x128>
 8004414:	f108 0810 	add.w	r8, r8, #16
 8004418:	e6bc      	b.n	8004194 <_malloc_r+0x1e8>
 800441a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800441e:	d826      	bhi.n	800446e <_malloc_r+0x4c2>
 8004420:	0beb      	lsrs	r3, r5, #15
 8004422:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004426:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800442a:	00c3      	lsls	r3, r0, #3
 800442c:	e603      	b.n	8004036 <_malloc_r+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	1092      	asrs	r2, r2, #2
 8004432:	f04f 0801 	mov.w	r8, #1
 8004436:	fa08 f202 	lsl.w	r2, r8, r2
 800443a:	4313      	orrs	r3, r2
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	e7a8      	b.n	8004392 <_malloc_r+0x3e6>
 8004440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004444:	e6ce      	b.n	80041e4 <_malloc_r+0x238>
 8004446:	2a54      	cmp	r2, #84	; 0x54
 8004448:	d829      	bhi.n	800449e <_malloc_r+0x4f2>
 800444a:	0b1a      	lsrs	r2, r3, #12
 800444c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8004450:	00c9      	lsls	r1, r1, #3
 8004452:	326e      	adds	r2, #110	; 0x6e
 8004454:	e78b      	b.n	800436e <_malloc_r+0x3c2>
 8004456:	f3c0 010b 	ubfx	r1, r0, #0, #12
 800445a:	2900      	cmp	r1, #0
 800445c:	f47f aeae 	bne.w	80041bc <_malloc_r+0x210>
 8004460:	eb09 0208 	add.w	r2, r9, r8
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	604a      	str	r2, [r1, #4]
 800446c:	e6ec      	b.n	8004248 <_malloc_r+0x29c>
 800446e:	f240 5254 	movw	r2, #1364	; 0x554
 8004472:	4293      	cmp	r3, r2
 8004474:	d81c      	bhi.n	80044b0 <_malloc_r+0x504>
 8004476:	0cab      	lsrs	r3, r5, #18
 8004478:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800447c:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8004480:	00c3      	lsls	r3, r0, #3
 8004482:	e5d8      	b.n	8004036 <_malloc_r+0x8a>
 8004484:	2301      	movs	r3, #1
 8004486:	f8cb 3004 	str.w	r3, [fp, #4]
 800448a:	e79b      	b.n	80043c4 <_malloc_r+0x418>
 800448c:	2101      	movs	r1, #1
 800448e:	f04f 0800 	mov.w	r8, #0
 8004492:	e6ba      	b.n	800420a <_malloc_r+0x25e>
 8004494:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <_malloc_r+0x544>)
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	4443      	add	r3, r8
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e68e      	b.n	80041bc <_malloc_r+0x210>
 800449e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80044a2:	d814      	bhi.n	80044ce <_malloc_r+0x522>
 80044a4:	0bda      	lsrs	r2, r3, #15
 80044a6:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80044aa:	00c9      	lsls	r1, r1, #3
 80044ac:	3277      	adds	r2, #119	; 0x77
 80044ae:	e75e      	b.n	800436e <_malloc_r+0x3c2>
 80044b0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80044b4:	207f      	movs	r0, #127	; 0x7f
 80044b6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80044ba:	e5bc      	b.n	8004036 <_malloc_r+0x8a>
 80044bc:	f104 0108 	add.w	r1, r4, #8
 80044c0:	4630      	mov	r0, r6
 80044c2:	9201      	str	r2, [sp, #4]
 80044c4:	f000 fa1a 	bl	80048fc <_free_r>
 80044c8:	9a01      	ldr	r2, [sp, #4]
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	e6bc      	b.n	8004248 <_malloc_r+0x29c>
 80044ce:	f240 5154 	movw	r1, #1364	; 0x554
 80044d2:	428a      	cmp	r2, r1
 80044d4:	d805      	bhi.n	80044e2 <_malloc_r+0x536>
 80044d6:	0c9a      	lsrs	r2, r3, #18
 80044d8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 80044dc:	00c9      	lsls	r1, r1, #3
 80044de:	327c      	adds	r2, #124	; 0x7c
 80044e0:	e745      	b.n	800436e <_malloc_r+0x3c2>
 80044e2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80044e6:	227e      	movs	r2, #126	; 0x7e
 80044e8:	e741      	b.n	800436e <_malloc_r+0x3c2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	e785      	b.n	80043fa <_malloc_r+0x44e>
 80044ee:	bf00      	nop
 80044f0:	200008b4 	.word	0x200008b4

080044f4 <memcpy>:
 80044f4:	4684      	mov	ip, r0
 80044f6:	ea41 0300 	orr.w	r3, r1, r0
 80044fa:	f013 0303 	ands.w	r3, r3, #3
 80044fe:	d16d      	bne.n	80045dc <memcpy+0xe8>
 8004500:	3a40      	subs	r2, #64	; 0x40
 8004502:	d341      	bcc.n	8004588 <memcpy+0x94>
 8004504:	f851 3b04 	ldr.w	r3, [r1], #4
 8004508:	f840 3b04 	str.w	r3, [r0], #4
 800450c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004510:	f840 3b04 	str.w	r3, [r0], #4
 8004514:	f851 3b04 	ldr.w	r3, [r1], #4
 8004518:	f840 3b04 	str.w	r3, [r0], #4
 800451c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004520:	f840 3b04 	str.w	r3, [r0], #4
 8004524:	f851 3b04 	ldr.w	r3, [r1], #4
 8004528:	f840 3b04 	str.w	r3, [r0], #4
 800452c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004530:	f840 3b04 	str.w	r3, [r0], #4
 8004534:	f851 3b04 	ldr.w	r3, [r1], #4
 8004538:	f840 3b04 	str.w	r3, [r0], #4
 800453c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004540:	f840 3b04 	str.w	r3, [r0], #4
 8004544:	f851 3b04 	ldr.w	r3, [r1], #4
 8004548:	f840 3b04 	str.w	r3, [r0], #4
 800454c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004550:	f840 3b04 	str.w	r3, [r0], #4
 8004554:	f851 3b04 	ldr.w	r3, [r1], #4
 8004558:	f840 3b04 	str.w	r3, [r0], #4
 800455c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004560:	f840 3b04 	str.w	r3, [r0], #4
 8004564:	f851 3b04 	ldr.w	r3, [r1], #4
 8004568:	f840 3b04 	str.w	r3, [r0], #4
 800456c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004570:	f840 3b04 	str.w	r3, [r0], #4
 8004574:	f851 3b04 	ldr.w	r3, [r1], #4
 8004578:	f840 3b04 	str.w	r3, [r0], #4
 800457c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004580:	f840 3b04 	str.w	r3, [r0], #4
 8004584:	3a40      	subs	r2, #64	; 0x40
 8004586:	d2bd      	bcs.n	8004504 <memcpy+0x10>
 8004588:	3230      	adds	r2, #48	; 0x30
 800458a:	d311      	bcc.n	80045b0 <memcpy+0xbc>
 800458c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004590:	f840 3b04 	str.w	r3, [r0], #4
 8004594:	f851 3b04 	ldr.w	r3, [r1], #4
 8004598:	f840 3b04 	str.w	r3, [r0], #4
 800459c:	f851 3b04 	ldr.w	r3, [r1], #4
 80045a0:	f840 3b04 	str.w	r3, [r0], #4
 80045a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80045a8:	f840 3b04 	str.w	r3, [r0], #4
 80045ac:	3a10      	subs	r2, #16
 80045ae:	d2ed      	bcs.n	800458c <memcpy+0x98>
 80045b0:	320c      	adds	r2, #12
 80045b2:	d305      	bcc.n	80045c0 <memcpy+0xcc>
 80045b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80045b8:	f840 3b04 	str.w	r3, [r0], #4
 80045bc:	3a04      	subs	r2, #4
 80045be:	d2f9      	bcs.n	80045b4 <memcpy+0xc0>
 80045c0:	3204      	adds	r2, #4
 80045c2:	d008      	beq.n	80045d6 <memcpy+0xe2>
 80045c4:	07d2      	lsls	r2, r2, #31
 80045c6:	bf1c      	itt	ne
 80045c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80045cc:	f800 3b01 	strbne.w	r3, [r0], #1
 80045d0:	d301      	bcc.n	80045d6 <memcpy+0xe2>
 80045d2:	880b      	ldrh	r3, [r1, #0]
 80045d4:	8003      	strh	r3, [r0, #0]
 80045d6:	4660      	mov	r0, ip
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	2a08      	cmp	r2, #8
 80045de:	d313      	bcc.n	8004608 <memcpy+0x114>
 80045e0:	078b      	lsls	r3, r1, #30
 80045e2:	d08d      	beq.n	8004500 <memcpy+0xc>
 80045e4:	f010 0303 	ands.w	r3, r0, #3
 80045e8:	d08a      	beq.n	8004500 <memcpy+0xc>
 80045ea:	f1c3 0304 	rsb	r3, r3, #4
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	07db      	lsls	r3, r3, #31
 80045f2:	bf1c      	itt	ne
 80045f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80045f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80045fc:	d380      	bcc.n	8004500 <memcpy+0xc>
 80045fe:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004602:	f820 3b02 	strh.w	r3, [r0], #2
 8004606:	e77b      	b.n	8004500 <memcpy+0xc>
 8004608:	3a04      	subs	r2, #4
 800460a:	d3d9      	bcc.n	80045c0 <memcpy+0xcc>
 800460c:	3a01      	subs	r2, #1
 800460e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004612:	f800 3b01 	strb.w	r3, [r0], #1
 8004616:	d2f9      	bcs.n	800460c <memcpy+0x118>
 8004618:	780b      	ldrb	r3, [r1, #0]
 800461a:	7003      	strb	r3, [r0, #0]
 800461c:	784b      	ldrb	r3, [r1, #1]
 800461e:	7043      	strb	r3, [r0, #1]
 8004620:	788b      	ldrb	r3, [r1, #2]
 8004622:	7083      	strb	r3, [r0, #2]
 8004624:	4660      	mov	r0, ip
 8004626:	4770      	bx	lr

08004628 <memset>:
 8004628:	b4f0      	push	{r4, r5, r6, r7}
 800462a:	0786      	lsls	r6, r0, #30
 800462c:	d043      	beq.n	80046b6 <memset+0x8e>
 800462e:	1e54      	subs	r4, r2, #1
 8004630:	2a00      	cmp	r2, #0
 8004632:	d03e      	beq.n	80046b2 <memset+0x8a>
 8004634:	b2ca      	uxtb	r2, r1
 8004636:	4603      	mov	r3, r0
 8004638:	e002      	b.n	8004640 <memset+0x18>
 800463a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800463e:	d338      	bcc.n	80046b2 <memset+0x8a>
 8004640:	f803 2b01 	strb.w	r2, [r3], #1
 8004644:	079d      	lsls	r5, r3, #30
 8004646:	d1f8      	bne.n	800463a <memset+0x12>
 8004648:	2c03      	cmp	r4, #3
 800464a:	d92b      	bls.n	80046a4 <memset+0x7c>
 800464c:	b2cd      	uxtb	r5, r1
 800464e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004652:	2c0f      	cmp	r4, #15
 8004654:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004658:	d916      	bls.n	8004688 <memset+0x60>
 800465a:	f1a4 0710 	sub.w	r7, r4, #16
 800465e:	093f      	lsrs	r7, r7, #4
 8004660:	f103 0620 	add.w	r6, r3, #32
 8004664:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8004668:	f103 0210 	add.w	r2, r3, #16
 800466c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8004670:	e942 5502 	strd	r5, r5, [r2, #-8]
 8004674:	3210      	adds	r2, #16
 8004676:	42b2      	cmp	r2, r6
 8004678:	d1f8      	bne.n	800466c <memset+0x44>
 800467a:	f004 040f 	and.w	r4, r4, #15
 800467e:	3701      	adds	r7, #1
 8004680:	2c03      	cmp	r4, #3
 8004682:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8004686:	d90d      	bls.n	80046a4 <memset+0x7c>
 8004688:	461e      	mov	r6, r3
 800468a:	4622      	mov	r2, r4
 800468c:	3a04      	subs	r2, #4
 800468e:	2a03      	cmp	r2, #3
 8004690:	f846 5b04 	str.w	r5, [r6], #4
 8004694:	d8fa      	bhi.n	800468c <memset+0x64>
 8004696:	1f22      	subs	r2, r4, #4
 8004698:	f022 0203 	bic.w	r2, r2, #3
 800469c:	3204      	adds	r2, #4
 800469e:	4413      	add	r3, r2
 80046a0:	f004 0403 	and.w	r4, r4, #3
 80046a4:	b12c      	cbz	r4, 80046b2 <memset+0x8a>
 80046a6:	b2c9      	uxtb	r1, r1
 80046a8:	441c      	add	r4, r3
 80046aa:	f803 1b01 	strb.w	r1, [r3], #1
 80046ae:	429c      	cmp	r4, r3
 80046b0:	d1fb      	bne.n	80046aa <memset+0x82>
 80046b2:	bcf0      	pop	{r4, r5, r6, r7}
 80046b4:	4770      	bx	lr
 80046b6:	4614      	mov	r4, r2
 80046b8:	4603      	mov	r3, r0
 80046ba:	e7c5      	b.n	8004648 <memset+0x20>

080046bc <__malloc_lock>:
 80046bc:	4801      	ldr	r0, [pc, #4]	; (80046c4 <__malloc_lock+0x8>)
 80046be:	f000 ba1b 	b.w	8004af8 <__retarget_lock_acquire_recursive>
 80046c2:	bf00      	nop
 80046c4:	20000f90 	.word	0x20000f90

080046c8 <__malloc_unlock>:
 80046c8:	4801      	ldr	r0, [pc, #4]	; (80046d0 <__malloc_unlock+0x8>)
 80046ca:	f000 ba1d 	b.w	8004b08 <__retarget_lock_release_recursive>
 80046ce:	bf00      	nop
 80046d0:	20000f90 	.word	0x20000f90

080046d4 <srand>:
 80046d4:	4b02      	ldr	r3, [pc, #8]	; (80046e0 <srand+0xc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	e9c3 022a 	strd	r0, r2, [r3, #168]	; 0xa8
 80046de:	4770      	bx	lr
 80046e0:	20000030 	.word	0x20000030

080046e4 <rand>:
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <rand+0x30>)
 80046e6:	480c      	ldr	r0, [pc, #48]	; (8004718 <rand+0x34>)
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	e9d1 232a 	ldrd	r2, r3, [r1, #168]	; 0xa8
 80046ee:	b430      	push	{r4, r5}
 80046f0:	4c0a      	ldr	r4, [pc, #40]	; (800471c <rand+0x38>)
 80046f2:	fb00 f002 	mul.w	r0, r0, r2
 80046f6:	fb04 0003 	mla	r0, r4, r3, r0
 80046fa:	fba2 2304 	umull	r2, r3, r2, r4
 80046fe:	1c54      	adds	r4, r2, #1
 8004700:	4403      	add	r3, r0
 8004702:	f143 0500 	adc.w	r5, r3, #0
 8004706:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800470a:	e9c1 452a 	strd	r4, r5, [r1, #168]	; 0xa8
 800470e:	bc30      	pop	{r4, r5}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000030 	.word	0x20000030
 8004718:	5851f42d 	.word	0x5851f42d
 800471c:	4c957f2d 	.word	0x4c957f2d

08004720 <_sbrk_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4c07      	ldr	r4, [pc, #28]	; (8004740 <_sbrk_r+0x20>)
 8004724:	2300      	movs	r3, #0
 8004726:	4605      	mov	r5, r0
 8004728:	4608      	mov	r0, r1
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	f7ff fba4 	bl	8003e78 <_sbrk>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d000      	beq.n	8004736 <_sbrk_r+0x16>
 8004734:	bd38      	pop	{r3, r4, r5, pc}
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0fb      	beq.n	8004734 <_sbrk_r+0x14>
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	20000fa4 	.word	0x20000fa4
	...

08004780 <strlen>:
 8004780:	f890 f000 	pld	[r0]
 8004784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8004788:	f020 0107 	bic.w	r1, r0, #7
 800478c:	f06f 0c00 	mvn.w	ip, #0
 8004790:	f010 0407 	ands.w	r4, r0, #7
 8004794:	f891 f020 	pld	[r1, #32]
 8004798:	f040 8049 	bne.w	800482e <strlen+0xae>
 800479c:	f04f 0400 	mov.w	r4, #0
 80047a0:	f06f 0007 	mvn.w	r0, #7
 80047a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80047a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80047ac:	f100 0008 	add.w	r0, r0, #8
 80047b0:	fa82 f24c 	uadd8	r2, r2, ip
 80047b4:	faa4 f28c 	sel	r2, r4, ip
 80047b8:	fa83 f34c 	uadd8	r3, r3, ip
 80047bc:	faa2 f38c 	sel	r3, r2, ip
 80047c0:	bb4b      	cbnz	r3, 8004816 <strlen+0x96>
 80047c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80047c6:	fa82 f24c 	uadd8	r2, r2, ip
 80047ca:	f100 0008 	add.w	r0, r0, #8
 80047ce:	faa4 f28c 	sel	r2, r4, ip
 80047d2:	fa83 f34c 	uadd8	r3, r3, ip
 80047d6:	faa2 f38c 	sel	r3, r2, ip
 80047da:	b9e3      	cbnz	r3, 8004816 <strlen+0x96>
 80047dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80047e0:	fa82 f24c 	uadd8	r2, r2, ip
 80047e4:	f100 0008 	add.w	r0, r0, #8
 80047e8:	faa4 f28c 	sel	r2, r4, ip
 80047ec:	fa83 f34c 	uadd8	r3, r3, ip
 80047f0:	faa2 f38c 	sel	r3, r2, ip
 80047f4:	b97b      	cbnz	r3, 8004816 <strlen+0x96>
 80047f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80047fa:	f101 0120 	add.w	r1, r1, #32
 80047fe:	fa82 f24c 	uadd8	r2, r2, ip
 8004802:	f100 0008 	add.w	r0, r0, #8
 8004806:	faa4 f28c 	sel	r2, r4, ip
 800480a:	fa83 f34c 	uadd8	r3, r3, ip
 800480e:	faa2 f38c 	sel	r3, r2, ip
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0c6      	beq.n	80047a4 <strlen+0x24>
 8004816:	2a00      	cmp	r2, #0
 8004818:	bf04      	itt	eq
 800481a:	3004      	addeq	r0, #4
 800481c:	461a      	moveq	r2, r3
 800481e:	ba12      	rev	r2, r2
 8004820:	fab2 f282 	clz	r2, r2
 8004824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8004828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800482c:	4770      	bx	lr
 800482e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004832:	f004 0503 	and.w	r5, r4, #3
 8004836:	f1c4 0000 	rsb	r0, r4, #0
 800483a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800483e:	f014 0f04 	tst.w	r4, #4
 8004842:	f891 f040 	pld	[r1, #64]	; 0x40
 8004846:	fa0c f505 	lsl.w	r5, ip, r5
 800484a:	ea62 0205 	orn	r2, r2, r5
 800484e:	bf1c      	itt	ne
 8004850:	ea63 0305 	ornne	r3, r3, r5
 8004854:	4662      	movne	r2, ip
 8004856:	f04f 0400 	mov.w	r4, #0
 800485a:	e7a9      	b.n	80047b0 <strlen+0x30>

0800485c <_malloc_trim_r>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	4f24      	ldr	r7, [pc, #144]	; (80048f0 <_malloc_trim_r+0x94>)
 8004860:	460c      	mov	r4, r1
 8004862:	4606      	mov	r6, r0
 8004864:	f7ff ff2a 	bl	80046bc <__malloc_lock>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	685d      	ldr	r5, [r3, #4]
 800486c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 8004870:	310f      	adds	r1, #15
 8004872:	f025 0503 	bic.w	r5, r5, #3
 8004876:	4429      	add	r1, r5
 8004878:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800487c:	f021 010f 	bic.w	r1, r1, #15
 8004880:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8004884:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004888:	db07      	blt.n	800489a <_malloc_trim_r+0x3e>
 800488a:	2100      	movs	r1, #0
 800488c:	4630      	mov	r0, r6
 800488e:	f7ff ff47 	bl	8004720 <_sbrk_r>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	442b      	add	r3, r5
 8004896:	4298      	cmp	r0, r3
 8004898:	d004      	beq.n	80048a4 <_malloc_trim_r+0x48>
 800489a:	4630      	mov	r0, r6
 800489c:	f7ff ff14 	bl	80046c8 <__malloc_unlock>
 80048a0:	2000      	movs	r0, #0
 80048a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a4:	4261      	negs	r1, r4
 80048a6:	4630      	mov	r0, r6
 80048a8:	f7ff ff3a 	bl	8004720 <_sbrk_r>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d00d      	beq.n	80048cc <_malloc_trim_r+0x70>
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <_malloc_trim_r+0x98>)
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	6819      	ldr	r1, [r3, #0]
 80048b6:	1b2d      	subs	r5, r5, r4
 80048b8:	f045 0501 	orr.w	r5, r5, #1
 80048bc:	4630      	mov	r0, r6
 80048be:	1b09      	subs	r1, r1, r4
 80048c0:	6055      	str	r5, [r2, #4]
 80048c2:	6019      	str	r1, [r3, #0]
 80048c4:	f7ff ff00 	bl	80046c8 <__malloc_unlock>
 80048c8:	2001      	movs	r0, #1
 80048ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048cc:	2100      	movs	r1, #0
 80048ce:	4630      	mov	r0, r6
 80048d0:	f7ff ff26 	bl	8004720 <_sbrk_r>
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	1a83      	subs	r3, r0, r2
 80048d8:	2b0f      	cmp	r3, #15
 80048da:	ddde      	ble.n	800489a <_malloc_trim_r+0x3e>
 80048dc:	4c06      	ldr	r4, [pc, #24]	; (80048f8 <_malloc_trim_r+0x9c>)
 80048de:	4905      	ldr	r1, [pc, #20]	; (80048f4 <_malloc_trim_r+0x98>)
 80048e0:	6824      	ldr	r4, [r4, #0]
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	1b00      	subs	r0, r0, r4
 80048e8:	6053      	str	r3, [r2, #4]
 80048ea:	6008      	str	r0, [r1, #0]
 80048ec:	e7d5      	b.n	800489a <_malloc_trim_r+0x3e>
 80048ee:	bf00      	nop
 80048f0:	20000460 	.word	0x20000460
 80048f4:	200008b4 	.word	0x200008b4
 80048f8:	20000868 	.word	0x20000868

080048fc <_free_r>:
 80048fc:	2900      	cmp	r1, #0
 80048fe:	d053      	beq.n	80049a8 <_free_r+0xac>
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	460c      	mov	r4, r1
 8004904:	4606      	mov	r6, r0
 8004906:	f7ff fed9 	bl	80046bc <__malloc_lock>
 800490a:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800490e:	4f71      	ldr	r7, [pc, #452]	; (8004ad4 <_free_r+0x1d8>)
 8004910:	f02c 0101 	bic.w	r1, ip, #1
 8004914:	f1a4 0508 	sub.w	r5, r4, #8
 8004918:	186b      	adds	r3, r5, r1
 800491a:	68b8      	ldr	r0, [r7, #8]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	4298      	cmp	r0, r3
 8004920:	f022 0203 	bic.w	r2, r2, #3
 8004924:	d053      	beq.n	80049ce <_free_r+0xd2>
 8004926:	f01c 0f01 	tst.w	ip, #1
 800492a:	605a      	str	r2, [r3, #4]
 800492c:	eb03 0002 	add.w	r0, r3, r2
 8004930:	d13b      	bne.n	80049aa <_free_r+0xae>
 8004932:	f854 cc08 	ldr.w	ip, [r4, #-8]
 8004936:	6840      	ldr	r0, [r0, #4]
 8004938:	eba5 050c 	sub.w	r5, r5, ip
 800493c:	f107 0e08 	add.w	lr, r7, #8
 8004940:	68ac      	ldr	r4, [r5, #8]
 8004942:	4574      	cmp	r4, lr
 8004944:	4461      	add	r1, ip
 8004946:	f000 0001 	and.w	r0, r0, #1
 800494a:	d075      	beq.n	8004a38 <_free_r+0x13c>
 800494c:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8004950:	f8c4 c00c 	str.w	ip, [r4, #12]
 8004954:	f8cc 4008 	str.w	r4, [ip, #8]
 8004958:	b360      	cbz	r0, 80049b4 <_free_r+0xb8>
 800495a:	f041 0301 	orr.w	r3, r1, #1
 800495e:	606b      	str	r3, [r5, #4]
 8004960:	5069      	str	r1, [r5, r1]
 8004962:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004966:	d350      	bcc.n	8004a0a <_free_r+0x10e>
 8004968:	0a4b      	lsrs	r3, r1, #9
 800496a:	2b04      	cmp	r3, #4
 800496c:	d870      	bhi.n	8004a50 <_free_r+0x154>
 800496e:	098b      	lsrs	r3, r1, #6
 8004970:	f103 0439 	add.w	r4, r3, #57	; 0x39
 8004974:	00e4      	lsls	r4, r4, #3
 8004976:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800497a:	1938      	adds	r0, r7, r4
 800497c:	593b      	ldr	r3, [r7, r4]
 800497e:	3808      	subs	r0, #8
 8004980:	4298      	cmp	r0, r3
 8004982:	d078      	beq.n	8004a76 <_free_r+0x17a>
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	f022 0203 	bic.w	r2, r2, #3
 800498a:	428a      	cmp	r2, r1
 800498c:	d971      	bls.n	8004a72 <_free_r+0x176>
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4298      	cmp	r0, r3
 8004992:	d1f7      	bne.n	8004984 <_free_r+0x88>
 8004994:	68c3      	ldr	r3, [r0, #12]
 8004996:	e9c5 0302 	strd	r0, r3, [r5, #8]
 800499a:	609d      	str	r5, [r3, #8]
 800499c:	60c5      	str	r5, [r0, #12]
 800499e:	4630      	mov	r0, r6
 80049a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049a4:	f7ff be90 	b.w	80046c8 <__malloc_unlock>
 80049a8:	4770      	bx	lr
 80049aa:	6840      	ldr	r0, [r0, #4]
 80049ac:	f000 0001 	and.w	r0, r0, #1
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d1d2      	bne.n	800495a <_free_r+0x5e>
 80049b4:	6898      	ldr	r0, [r3, #8]
 80049b6:	4c48      	ldr	r4, [pc, #288]	; (8004ad8 <_free_r+0x1dc>)
 80049b8:	4411      	add	r1, r2
 80049ba:	42a0      	cmp	r0, r4
 80049bc:	f041 0201 	orr.w	r2, r1, #1
 80049c0:	d062      	beq.n	8004a88 <_free_r+0x18c>
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	60c3      	str	r3, [r0, #12]
 80049c6:	6098      	str	r0, [r3, #8]
 80049c8:	606a      	str	r2, [r5, #4]
 80049ca:	5069      	str	r1, [r5, r1]
 80049cc:	e7c9      	b.n	8004962 <_free_r+0x66>
 80049ce:	f01c 0f01 	tst.w	ip, #1
 80049d2:	440a      	add	r2, r1
 80049d4:	d107      	bne.n	80049e6 <_free_r+0xea>
 80049d6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80049da:	1aed      	subs	r5, r5, r3
 80049dc:	441a      	add	r2, r3
 80049de:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 80049e2:	60cb      	str	r3, [r1, #12]
 80049e4:	6099      	str	r1, [r3, #8]
 80049e6:	4b3d      	ldr	r3, [pc, #244]	; (8004adc <_free_r+0x1e0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0101 	orr.w	r1, r2, #1
 80049ee:	4293      	cmp	r3, r2
 80049f0:	6069      	str	r1, [r5, #4]
 80049f2:	60bd      	str	r5, [r7, #8]
 80049f4:	d804      	bhi.n	8004a00 <_free_r+0x104>
 80049f6:	4b3a      	ldr	r3, [pc, #232]	; (8004ae0 <_free_r+0x1e4>)
 80049f8:	4630      	mov	r0, r6
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	f7ff ff2e 	bl	800485c <_malloc_trim_r>
 8004a00:	4630      	mov	r0, r6
 8004a02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a06:	f7ff be5f 	b.w	80046c8 <__malloc_unlock>
 8004a0a:	08c9      	lsrs	r1, r1, #3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	1c4a      	adds	r2, r1, #1
 8004a10:	2301      	movs	r3, #1
 8004a12:	1089      	asrs	r1, r1, #2
 8004a14:	408b      	lsls	r3, r1
 8004a16:	4303      	orrs	r3, r0
 8004a18:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 8004a1c:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	3908      	subs	r1, #8
 8004a24:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004a28:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 8004a2c:	60c5      	str	r5, [r0, #12]
 8004a2e:	4630      	mov	r0, r6
 8004a30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a34:	f7ff be48 	b.w	80046c8 <__malloc_unlock>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d145      	bne.n	8004ac8 <_free_r+0x1cc>
 8004a3c:	440a      	add	r2, r1
 8004a3e:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 8004a42:	f042 0001 	orr.w	r0, r2, #1
 8004a46:	60cb      	str	r3, [r1, #12]
 8004a48:	6099      	str	r1, [r3, #8]
 8004a4a:	6068      	str	r0, [r5, #4]
 8004a4c:	50aa      	str	r2, [r5, r2]
 8004a4e:	e7d7      	b.n	8004a00 <_free_r+0x104>
 8004a50:	2b14      	cmp	r3, #20
 8004a52:	d908      	bls.n	8004a66 <_free_r+0x16a>
 8004a54:	2b54      	cmp	r3, #84	; 0x54
 8004a56:	d81e      	bhi.n	8004a96 <_free_r+0x19a>
 8004a58:	0b0b      	lsrs	r3, r1, #12
 8004a5a:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8004a5e:	00e4      	lsls	r4, r4, #3
 8004a60:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8004a64:	e789      	b.n	800497a <_free_r+0x7e>
 8004a66:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8004a6a:	00e4      	lsls	r4, r4, #3
 8004a6c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8004a70:	e783      	b.n	800497a <_free_r+0x7e>
 8004a72:	4618      	mov	r0, r3
 8004a74:	e78e      	b.n	8004994 <_free_r+0x98>
 8004a76:	1093      	asrs	r3, r2, #2
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	430b      	orrs	r3, r1
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	4603      	mov	r3, r0
 8004a86:	e786      	b.n	8004996 <_free_r+0x9a>
 8004a88:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8004a8c:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8004a90:	606a      	str	r2, [r5, #4]
 8004a92:	5069      	str	r1, [r5, r1]
 8004a94:	e7b4      	b.n	8004a00 <_free_r+0x104>
 8004a96:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004a9a:	d806      	bhi.n	8004aaa <_free_r+0x1ae>
 8004a9c:	0bcb      	lsrs	r3, r1, #15
 8004a9e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8004aa2:	00e4      	lsls	r4, r4, #3
 8004aa4:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8004aa8:	e767      	b.n	800497a <_free_r+0x7e>
 8004aaa:	f240 5254 	movw	r2, #1364	; 0x554
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d806      	bhi.n	8004ac0 <_free_r+0x1c4>
 8004ab2:	0c8b      	lsrs	r3, r1, #18
 8004ab4:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 8004ab8:	00e4      	lsls	r4, r4, #3
 8004aba:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004abe:	e75c      	b.n	800497a <_free_r+0x7e>
 8004ac0:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 8004ac4:	227e      	movs	r2, #126	; 0x7e
 8004ac6:	e758      	b.n	800497a <_free_r+0x7e>
 8004ac8:	f041 0201 	orr.w	r2, r1, #1
 8004acc:	606a      	str	r2, [r5, #4]
 8004ace:	6019      	str	r1, [r3, #0]
 8004ad0:	e796      	b.n	8004a00 <_free_r+0x104>
 8004ad2:	bf00      	nop
 8004ad4:	20000460 	.word	0x20000460
 8004ad8:	20000468 	.word	0x20000468
 8004adc:	2000086c 	.word	0x2000086c
 8004ae0:	200008e4 	.word	0x200008e4

08004ae4 <__retarget_lock_init>:
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop

08004ae8 <__retarget_lock_init_recursive>:
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <__retarget_lock_close>:
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop

08004af0 <__retarget_lock_close_recursive>:
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop

08004af4 <__retarget_lock_acquire>:
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop

08004af8 <__retarget_lock_acquire_recursive>:
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop

08004afc <__retarget_lock_try_acquire>:
 8004afc:	2001      	movs	r0, #1
 8004afe:	4770      	bx	lr

08004b00 <__retarget_lock_try_acquire_recursive>:
 8004b00:	2001      	movs	r0, #1
 8004b02:	4770      	bx	lr

08004b04 <__retarget_lock_release>:
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <__retarget_lock_release_recursive>:
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop

08004b0c <cleanup_glue>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	460c      	mov	r4, r1
 8004b10:	6809      	ldr	r1, [r1, #0]
 8004b12:	4605      	mov	r5, r0
 8004b14:	b929      	cbnz	r1, 8004b22 <cleanup_glue+0x16>
 8004b16:	4621      	mov	r1, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b1e:	f7ff beed 	b.w	80048fc <_free_r>
 8004b22:	f7ff fff3 	bl	8004b0c <cleanup_glue>
 8004b26:	4621      	mov	r1, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b2e:	f7ff bee5 	b.w	80048fc <_free_r>
 8004b32:	bf00      	nop

08004b34 <_reclaim_reent>:
 8004b34:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <_reclaim_reent+0x84>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4283      	cmp	r3, r0
 8004b3a:	d03b      	beq.n	8004bb4 <_reclaim_reent+0x80>
 8004b3c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004b3e:	b570      	push	{r4, r5, r6, lr}
 8004b40:	4605      	mov	r5, r0
 8004b42:	b18b      	cbz	r3, 8004b68 <_reclaim_reent+0x34>
 8004b44:	2600      	movs	r6, #0
 8004b46:	5999      	ldr	r1, [r3, r6]
 8004b48:	b139      	cbz	r1, 8004b5a <_reclaim_reent+0x26>
 8004b4a:	680c      	ldr	r4, [r1, #0]
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f7ff fed5 	bl	80048fc <_free_r>
 8004b52:	4621      	mov	r1, r4
 8004b54:	2c00      	cmp	r4, #0
 8004b56:	d1f8      	bne.n	8004b4a <_reclaim_reent+0x16>
 8004b58:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004b5a:	3604      	adds	r6, #4
 8004b5c:	2e80      	cmp	r6, #128	; 0x80
 8004b5e:	d1f2      	bne.n	8004b46 <_reclaim_reent+0x12>
 8004b60:	4619      	mov	r1, r3
 8004b62:	4628      	mov	r0, r5
 8004b64:	f7ff feca 	bl	80048fc <_free_r>
 8004b68:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8004b6a:	b111      	cbz	r1, 8004b72 <_reclaim_reent+0x3e>
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f7ff fec5 	bl	80048fc <_free_r>
 8004b72:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8004b76:	b151      	cbz	r1, 8004b8e <_reclaim_reent+0x5a>
 8004b78:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8004b7c:	42b1      	cmp	r1, r6
 8004b7e:	d006      	beq.n	8004b8e <_reclaim_reent+0x5a>
 8004b80:	680c      	ldr	r4, [r1, #0]
 8004b82:	4628      	mov	r0, r5
 8004b84:	f7ff feba 	bl	80048fc <_free_r>
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	d1f8      	bne.n	8004b80 <_reclaim_reent+0x4c>
 8004b8e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8004b90:	b111      	cbz	r1, 8004b98 <_reclaim_reent+0x64>
 8004b92:	4628      	mov	r0, r5
 8004b94:	f7ff feb2 	bl	80048fc <_free_r>
 8004b98:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004b9a:	b153      	cbz	r3, 8004bb2 <_reclaim_reent+0x7e>
 8004b9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	4798      	blx	r3
 8004ba2:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8004ba6:	b121      	cbz	r1, 8004bb2 <_reclaim_reent+0x7e>
 8004ba8:	4628      	mov	r0, r5
 8004baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004bae:	f7ff bfad 	b.w	8004b0c <cleanup_glue>
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000030 	.word	0x20000030
 8004bbc:	42424242 	.word	0x42424242
 8004bc0:	42424242 	.word	0x42424242

08004bc4 <DeviceDescriptor>:
 8004bc4:	01100112 40000002 0058058b 02010010     .......@..X.....
 8004bd4:	00000100                                ....

08004bd8 <ConfigurationDescriptor>:
 8004bd8:	003e0209 80000102 00040932 02020100     ..>.....2.......
 8004be8:	24050001 04011000 05060224 01000624     ...$....$...$...
 8004bf8:	03810507 09ff0008 02000104 0000000a     ................
 8004c08:	02030507 07050040 40028205 00000500     ....@......@....

08004c18 <LanguageString>:
 8004c18:	04090304 00000000                       ........

08004c20 <ProductString>:
 8004c20:	00490320 00460000 00580000 00200000      .I...F...X... .
 8004c30:	00430000 00440000 00430000 00000000     ..C...D...C.....
 8004c40:	00000000                                ....

08004c44 <ManufacturerString>:
 8004c44:	00490358 006e0000 00660000 00690000     X.I...n...f...i.
 8004c54:	006e0000 00650000 006f0000 006e0000     ..n...e...o...n.
 8004c64:	00200000 00540000 00650000 00630000     .. ...T...e...c.
 8004c74:	00680000 006e0000 006f0000 006c0000     ..h...n...o...l.
 8004c84:	006f0000 00670000 00690000 00650000     ..o...g...i...e.
 8004c94:	00730000 00000000 00000000              ..s.........

08004ca0 <b64str.6030>:
 8004ca0:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
 8004cb0:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
 8004cc0:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
 8004cd0:	7a797877 33323130 37363534 5f2d3938     wxyz0123456789-_

08004ce0 <b64>:
 8004ce0:	ffffffff ffffffff ffffffff ffffffff     ................
 8004cf0:	ffffffff ffffffff ffffffff ffffffff     ................
 8004d00:	ffffffff ffffffff ffffffff ffff3eff     .............>..
 8004d10:	37363534 3b3a3938 ffff3d3c ffffffff     456789:;<=......
 8004d20:	020100ff 06050403 0a090807 0e0d0c0b     ................
 8004d30:	1211100f 16151413 ff191817 3fffffff     ...............?
 8004d40:	1c1b1aff 201f1e1d 24232221 28272625     ....... !"#$%&'(
 8004d50:	2c2b2a29 302f2e2d ff333231 ffffffff     )*+,-./0123.....
 8004d60:	ffffffff ffffffff ffffffff ffffffff     ................
 8004d70:	ffffffff ffffffff ffffffff ffffffff     ................
 8004d80:	ffffffff ffffffff ffffffff ffffffff     ................
 8004d90:	ffffffff ffffffff ffffffff ffffffff     ................
 8004da0:	ffffffff ffffffff ffffffff ffffffff     ................
 8004db0:	ffffffff ffffffff ffffffff ffffffff     ................
 8004dc0:	ffffffff ffffffff ffffffff ffffffff     ................
 8004dd0:	ffffffff ffffffff ffffffff ffffffff     ................

08004de0 <Driver_USBD0>:
 8004de0:	080013b1 08001a9d 080016b5 080013c1     ................
 8004df0:	080013d9 08001a55 08001449 080016d9     ....U...I.......
 8004e00:	08001571 08001461 080013f1 0800195d     q...a.......]...
 8004e10:	080019a5 0800151d 08001689 0800169d     ................
 8004e20:	000020a1 00020000                       . ......

08004e28 <_global_impure_ptr>:
 8004e28:	20000038                                8.. 
